syntax = "proto3";

package nevr.rtapi;

option go_package = "github.com/echotools/nevr-common/v3/rtapi";

option java_multiple_files = true;
option java_outer_classname = "NevrRealtime";
option java_package = "com.github.echotools.nevr.rtapi";

option csharp_namespace = "Nevr.Protobuf";

// include the gameapi.rtapi file
import "gameapi/nevr_gameapi.proto";
import "google/protobuf/timestamp.proto";

// Symbol hash value
message SymbolHash {
  fixed64 value = 1;
  Message
}

// Common types
message XPlatformID {
  // Platform code
  string id = 1;
}

// Envelope for all messages
message EnvelopeMessage {
  oneof message {
    // Unknown message.
    UnknownMessage unknown_message = 1;
    // Indicate a TCP event is required.
    STcpConnectionRequireEvent tcp_connection_require_event = 2;
    // Indicate a TCP event is no longer required.
    STcpConnectionUnrequireEvent tcp_connection_unrequire_event = 3;
    // Legacy config failure.
    SNSConfigFailure config_failure = 4;
    // Request a specific configuration resource.
    SNSConfigRequestV2Message config_request_v2 = 5;
    // Indicate a config request succeeded.
    SNSConfigSuccessV2Message config_success_v2 = 6;
    // Indicate a config request failed.
    SNSConfigFailureV2 config_failure_v2 = 7;
    // In-app purchase related request.
    SNSReconcileIAPMessage reconcile_iap = 8;
    // Request information about in-game channels.
    SNSChannelInfoRequest channel_info_request = 9;
    // Provide in-game channel information.
    SNSChannelInfoResponseMessage channel_info_response = 10;
    // Request a document resource.
    SNSDocumentRequestv2Message document_request_v2 = 11;
    // Indicate a document request succeeded.
    SNSDocumentSuccessMessage document_success = 12;
    // Indicate a document request failed.
    SNSDocumentFailureMessage document_failure = 13;
    // Provide information on servers available in different regions.

    SNSLobbyCreateSessionRequestv9Message lobby_create_session_request_v9 = 15;
    // Request to find an existing game session.
    SNSLobbyFindSessionRequestv11Message lobby_find_session_request_v11 = 16;
    // Request to join a specified game session.
    SNSLobbyJoinSessionRequestv7Message lobby_join_session_request_v7 = 17;
    // Provide the status of a matchmaking operation.
    SNSLobbyMatchmakerStatusMessage lobby_matchmaker_status = 18;
    // Request the status of a pending matchmaking operation.
    SNSLobbyMatchmakerStatusRequestMessage lobby_matchmaker_status_request = 19;
    // Indicate intent to cancel pending matchmaker operations.
    SNSLobbyPendingSessionCancelv2Message lobby_pending_session_cancel_v2 = 20;
    // Request the client to ping endpoints for optimal server selection.
    SNSLobbyPingRequestv3Message lobby_ping_request_v3 = 21;
    // Provide results of a ping request.
    SNSLobbyPingResponseMessage lobby_ping_response = 22;
    // Request game server sessions for a list of user identifiers.
    SNSLobbyPlayerSessionsRequestv5Message lobby_player_sessions_request_v5 =
        23;
    // Indicate a lobby session request failed.
    SNSLobbySessionFailurev4Message lobby_session_failure_v4 = 24;
    // Indicate a lobby session request succeeded.
    SNSLobbySessionSuccessv5Message lobby_session_success_v5 = 25;
    // Indicate a logged-in user profile request failed.
    SNSLoggedInUserProfileFailureMessage logged_in_user_profile_failure = 26;
    // Request the user profile for the logged-in account.
    SNSLoggedInUserProfileRequestMessage logged_in_user_profile_request = 27;
    // Indicate a logged-in user profile request succeeded.
    SNSLoggedInUserProfileSuccessMessage logged_in_user_profile_success = 28;
    // Indicate a login request failed.
    SNSLogInFailureMessage log_in_failure = 29;
    // Request user sign-in.
    SNSLogInRequestv2Message log_in_request_v2 = 30;
    // Provide settings for the user after login.
    SNSLoginSettingsMessage login_settings = 31;
    // Indicate a login request succeeded and provide a new session token.
    SNSLogInSuccessMessage log_in_success = 32;
    // Indicate an other user profile request failed.
    SNSOtherUserProfileFailureMessage other_user_profile_failure = 33;
    // Request the user profile for another user.
    SNSOtherUserProfileRequestMessage other_user_profile_request = 34;
    // Indicate an other user profile request succeeded.
    SNSOtherUserProfileSuccessMessage other_user_profile_success = 35;
    // In-app purchase related response.
    SNSReconcileIAPResultMessage reconcile_iap_result = 36;
    // Log client-side data.
    SNSRemoteLogSetv3Message remote_log_set_v3 = 37;
    // Request the server to update the user's client profile.
    SNSUpdateProfileMessage update_profile = 38;
    // Indicate an update profile request succeeded.
    SNSUpdateProfileSuccessMessage update_profile_success = 39;
    // Indicate an update profile request failed.
    SNSUpdateProfileFailureMessage update_profile_failure = 40;
    // Request the server to update the user's server profile.
    SNSUserServerProfileUpdateRequestMessage
        user_server_profile_update_request = 41;
    // Indicate a user server profile update request succeeded.
    SNSUserServerProfileUpdateSuccessMessage
        user_server_profile_update_success = 42;
  }
}

// A message originating from either party,
// indicating a TCP event is required.
message STcpConnectionRequireEvent {}

// A message originating from either party,
// indicating a TCP event is no longer required.
message STcpConnectionUnrequireEvent {}

// ConfigRequestv2: client to server requesting a specific
// configuration resource.
message SNSConfigRequestV2Message { string request_json = 1; }

// ConfigSuccessv2: server to the client indicating a
// ConfigRequestv2 succeeded. It contains information about the requested config
// resource.
message SNSConfigSuccessV2Message {
  SymbolHash type = 1;
  SymbolHash id = 2;
  string data = 3;
}

// ConfigFailurev2: server to client indicating a ConfigRequestv2
// resulted in a failure.
message SNSConfigFailureV2 { string error = 1; }

// TODO: In-app purchase related request
message SNSReconcileIAPMessage {
  string session_id = 1;
  XPlatformID user_id = 2;
}

// client to server, requesting information
// about the various in-game channels.
message SNSChannelInfoRequest {}

// server to client, providing the in-game
// channel information requested by a previous ChannelInfoRequest.
message SNSChannelInfoResponseMessage { string channel_info = 1; }

// DocumentRequestv2: client to server requesting a document
// resource.
message SNSDocumentRequestv2Message {
  string language = 1;
  string type = 2;
}

// server to the client indicating a
// DocumentRequestv2 succeeded. It contains information about the requested
// document resource.
message SNSDocumentSuccessMessage { string document_json = 1; }

// server to client indicating a
// DocumentRequestv2 failed.
message SNSDocumentFailureMessage { string message = 3; }

// LobbyCreateSessionRequestv9: client to server requesting the
// creation of a new game session.
message SNSLobbyCreateSessionRequestv9Message {
  SymbolHash region = 1;
  SymbolHash version_lock = 2;
  SymbolHash mode = 3;
  SymbolHash level = 4;
  SymbolHash platform = 5;
  string login_session_id = 6;
  repeated XPlatformID entrants = 7;
  string session_settings = 8;
}

// LobbyFindSessionRequestv11: client to server requesting
// finding of an existing game session that matches the message's underlying
// arguments.
message SNSLobbyFindSessionRequestv11Message {
  SymbolHash version_lock = 1;
  SymbolHash mode = 2;
  SymbolHash level = 3;
  SymbolHash platform = 4;
  string login_session_id = 5;
  string current_lobby_id = 6;
  string group_id = 7;
  string session_settings = 8;
  repeated XPlatformID entrants = 9;
}

// LobbyJoinSessionRequestv7: client to server requesting joining
// of a specified game session that matches the message's underlying arguments.
message SNSLobbyJoinSessionRequestv7Message {
  string lobby_id = 1;
  SymbolHash version_lock = 2;
  SymbolHash platform = 3;
  string login_session_id = 4;
  uint64 flags = 5;
}

// server to the client, providing the
// status of a previously sent LobbyMatchmakerStatusRequest.
message SNSLobbyMatchmakerStatusMessage { uint32 status_code = 1; }

// client to server, requesting the
// status of a pending matchmaking operation.
message SNSLobbyMatchmakerStatusRequestMessage {
  uint32 unk0 = 1;
  uint32 unk1 = 2;
  uint32 unk2 = 3;
}

// client to the server, indicating
// intent to cancel pending matchmaker operations.
message SNSLobbyPendingSessionCancelv2Message { string session_id = 1; }

// LobbyPingRequestv3: server to client, requesting the client
// ping a set of endpoints to determine the optimal game server to connect to.
message SNSLobbyPingRequestv3Message {
  uint32 unk0 = 1;
  uint32 unk1 = 2;
  uint32 rtt_max = 3;
  repeated string endpoints = 4;
}

// client to server, providing the results of
// a ping request. This tells the server which game servers are optimal for the
// client.
message SNSLobbyPingResponseMessage { repeated string results = 1; }

// LobbyPlayerSessionsRequestv5: client to server, asking it to
// obtain game server sessions for a given list of user identifiers.
message SNSLobbyPlayerSessionsRequestv5Message {
  string login_session_id = 1;
  XPlatformID user_id = 2;
  string lobby_id = 3;
  SymbolHash platform = 4;
  repeated XPlatformID player_xpids = 5;
}

// LobbySessionFailurev4: server to client indicating a lobby
// session request failed.
message SNSLobbySessionFailurev4Message {
  uint32 error_code = 1;
  string message = 2;
}

// LobbySessionSuccessv5: server to client indicating that a
// request to create/join/find a game server session succeeded.
message SNSLobbySessionSuccessv5Message {
  fixed64 game_mode = 1;
  string lobby_id = 2;
  string group_id = 3;
  string endpoint = 4;
  int32 team_index = 5;
  uint32 unk1 = 6;
  int32 headset_type = 7;
  uint64 server_encoder_flags = 8;
  uint64 client_encoder_flags = 9;
  uint64 server_sequence_id = 10;
  bytes server_mac_key = 11;
  bytes server_enc_key = 12;
  bytes server_random_key = 13;
  uint64 client_sequence_id = 14;
}

// server to client indicating their
// LoggedInUserProfileRequest failed.
message SNSLoggedInUserProfileFailureMessage {
  XPlatformID user_id = 1;
  uint64 status_code = 2;
  string error_message = 3;
}

// client to server requesting the
// user profile for their logged-in account.
message SNSLoggedInUserProfileRequestMessage {
  string session_id = 1;
  XPlatformID user_id = 2;
  string profile_request_data = 3;
}

// server to the client indicating a
// LoggedInUserProfileRequest succeeded. It contains profile information about
// the logged-in user.
message SNSLoggedInUserProfileSuccessMessage {
  XPlatformID user_id = 1;
  string payload = 2;
}

// server to client indicating their LoginRequest
// failed.
message SNSLogInFailureMessage {
  XPlatformID user_id = 1;
  uint64 status_code = 2;
  string error_message = 3;
}

// client to server requesting for a user sign-in.
message SNSLogInRequestv2Message {
  string previous_session_id = 1;
  XPlatformID user_id = 2;
  string payload = 3;
}

// server to client, providing the settings for
// the user after a LoginRequest.
message SNSLoginSettingsMessage { string config_data = 1; }

// server to client indicating their LoginRequest
// succeeded, providing them a new session token.
message SNSLogInSuccessMessage {
  string session_id = 1;
  XPlatformID user_id = 2;
}

// server to client indicating their
// OtherUserProfileRequest failed.
message SNSOtherUserProfileFailureMessage {
  XPlatformID user_id = 1;
  uint64 status_code = 2;
  string message = 3;
}

// client to server requesting the user
// profile for another user.
message SNSOtherUserProfileRequestMessage {
  XPlatformID user_id = 1;
  string data = 2;
}

// server to the client indicating a
// OtherUserProfileRequest succeeded. It contains profile information about the
// requested user.
message SNSOtherUserProfileSuccessMessage {
  XPlatformID user_id = 1;
  string profile = 2;
}

// TODO: In-app purchase related response
message SNSReconcileIAPResultMessage {
  XPlatformID user_id = 1;
  string iap_data = 2;
}

// RemoteLogSetv3: client to the server logging client-side data,
// as established by login profile data that tells the client how verbosely to
// log. It contains arbitrary log data about informational state changes,
// warnings, and errors.
message SNSRemoteLogSetv3Message {
  XPlatformID user_id = 1;
  uint64 log_level = 6;
  repeated string logs = 7;
}

// client to server requesting the server update
// the user's client profile.
message SNSUpdateProfileMessage {
  string login_session_id = 1;
  XPlatformID user_id = 2;
  string payload = 3;
}

// server to client indicating their
// UpdateProfile request succeeded.
message SNSUpdateProfileSuccessMessage { XPlatformID user_id = 1; }

// server to client indicating their
// UpdateProfile request failed.
message SNSUpdateProfileFailureMessage {
  XPlatformID user_id = 1;
  uint64 status_code = 2;
  string message = 3;
}

// client to server requesting
// the server update the user's client profile.
message SNSUserServerProfileUpdateRequestMessage {
  XPlatformID user_id = 1;
  string payload = 2;
}

// server to client indicating
// their UserServerProfileUpdateRequest request succeeded.
message SNSUserServerProfileUpdateSuccessMessage { XPlatformID user_id = 1; }
