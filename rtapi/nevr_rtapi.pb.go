// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: nevr_rtapi.proto

package rtapi

import (
	gameapi "github.com/echotools/nevr-common/v3/gameapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The selection of possible error codes.
type Error_Code int32

const (
	// An unexpected result from the server.
	Error_RUNTIME_EXCEPTION Error_Code = 0
	// The server received a message which is not recognised.
	Error_UNRECOGNIZED_PAYLOAD Error_Code = 1
	// A message was expected but contains no content.
	Error_MISSING_PAYLOAD Error_Code = 2
	// Fields in the message have an invalid format.
	Error_BAD_INPUT Error_Code = 3
	// Game server registration failed
	Error_REGISTRATION_FAILED Error_Code = 4
	// The lobby session was not found.
	Error_LOBBY_SESSION_NOT_FOUND Error_Code = 5
)

// Enum value maps for Error_Code.
var (
	Error_Code_name = map[int32]string{
		0: "RUNTIME_EXCEPTION",
		1: "UNRECOGNIZED_PAYLOAD",
		2: "MISSING_PAYLOAD",
		3: "BAD_INPUT",
		4: "REGISTRATION_FAILED",
		5: "LOBBY_SESSION_NOT_FOUND",
	}
	Error_Code_value = map[string]int32{
		"RUNTIME_EXCEPTION":       0,
		"UNRECOGNIZED_PAYLOAD":    1,
		"MISSING_PAYLOAD":         2,
		"BAD_INPUT":               3,
		"REGISTRATION_FAILED":     4,
		"LOBBY_SESSION_NOT_FOUND": 5,
	}
)

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}

func (x Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_nevr_rtapi_proto_enumTypes[0].Descriptor()
}

func (Error_Code) Type() protoreflect.EnumType {
	return &file_nevr_rtapi_proto_enumTypes[0]
}

func (x Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Code.Descriptor instead.
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{1, 0}
}

// The selection of possible session event codes.
type LobbySessionEventMessage_Code int32

const (
	// Session started
	LobbySessionEventMessage_STARTED LobbySessionEventMessage_Code = 0
	// Session ended
	LobbySessionEventMessage_ENDED LobbySessionEventMessage_Code = 1
	// Session locked
	LobbySessionEventMessage_LOCKED LobbySessionEventMessage_Code = 2
	// Session unlocked
	LobbySessionEventMessage_UNLOCKED LobbySessionEventMessage_Code = 3
)

// Enum value maps for LobbySessionEventMessage_Code.
var (
	LobbySessionEventMessage_Code_name = map[int32]string{
		0: "STARTED",
		1: "ENDED",
		2: "LOCKED",
		3: "UNLOCKED",
	}
	LobbySessionEventMessage_Code_value = map[string]int32{
		"STARTED":  0,
		"ENDED":    1,
		"LOCKED":   2,
		"UNLOCKED": 3,
	}
)

func (x LobbySessionEventMessage_Code) Enum() *LobbySessionEventMessage_Code {
	p := new(LobbySessionEventMessage_Code)
	*p = x
	return p
}

func (x LobbySessionEventMessage_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbySessionEventMessage_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_nevr_rtapi_proto_enumTypes[1].Descriptor()
}

func (LobbySessionEventMessage_Code) Type() protoreflect.EnumType {
	return &file_nevr_rtapi_proto_enumTypes[1]
}

func (x LobbySessionEventMessage_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbySessionEventMessage_Code.Descriptor instead.
func (LobbySessionEventMessage_Code) EnumDescriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{2, 0}
}

type LobbyEntrantsRejectMessage_Code int32

const (
	LobbyEntrantsRejectMessage_INTERNAL          LobbyEntrantsRejectMessage_Code = 0 // Internal server error
	LobbyEntrantsRejectMessage_BAD_REQUEST       LobbyEntrantsRejectMessage_Code = 1 // Bad request from the player
	LobbyEntrantsRejectMessage_TIMEOUT           LobbyEntrantsRejectMessage_Code = 2 // Player connection timeout
	LobbyEntrantsRejectMessage_DUPLICATE_USER_ID LobbyEntrantsRejectMessage_Code = 3 // Duplicate player session
	LobbyEntrantsRejectMessage_LOBBY_LOCKED      LobbyEntrantsRejectMessage_Code = 4 // Lobby is locked
	LobbyEntrantsRejectMessage_LOBBY_FULL        LobbyEntrantsRejectMessage_Code = 5 // Lobby is full
	LobbyEntrantsRejectMessage_LOBBY_ENDING      LobbyEntrantsRejectMessage_Code = 6 // Lobby is ending
	LobbyEntrantsRejectMessage_KICKED            LobbyEntrantsRejectMessage_Code = 7 // Player was kicked from the server
	LobbyEntrantsRejectMessage_DISCONNECTED      LobbyEntrantsRejectMessage_Code = 8 // Player was disconnected
	LobbyEntrantsRejectMessage_INACTIVE          LobbyEntrantsRejectMessage_Code = 9 // Player is inactive
)

// Enum value maps for LobbyEntrantsRejectMessage_Code.
var (
	LobbyEntrantsRejectMessage_Code_name = map[int32]string{
		0: "INTERNAL",
		1: "BAD_REQUEST",
		2: "TIMEOUT",
		3: "DUPLICATE_USER_ID",
		4: "LOBBY_LOCKED",
		5: "LOBBY_FULL",
		6: "LOBBY_ENDING",
		7: "KICKED",
		8: "DISCONNECTED",
		9: "INACTIVE",
	}
	LobbyEntrantsRejectMessage_Code_value = map[string]int32{
		"INTERNAL":          0,
		"BAD_REQUEST":       1,
		"TIMEOUT":           2,
		"DUPLICATE_USER_ID": 3,
		"LOBBY_LOCKED":      4,
		"LOBBY_FULL":        5,
		"LOBBY_ENDING":      6,
		"KICKED":            7,
		"DISCONNECTED":      8,
		"INACTIVE":          9,
	}
)

func (x LobbyEntrantsRejectMessage_Code) Enum() *LobbyEntrantsRejectMessage_Code {
	p := new(LobbyEntrantsRejectMessage_Code)
	*p = x
	return p
}

func (x LobbyEntrantsRejectMessage_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyEntrantsRejectMessage_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_nevr_rtapi_proto_enumTypes[2].Descriptor()
}

func (LobbyEntrantsRejectMessage_Code) Type() protoreflect.EnumType {
	return &file_nevr_rtapi_proto_enumTypes[2]
}

func (x LobbyEntrantsRejectMessage_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyEntrantsRejectMessage_Code.Descriptor instead.
func (LobbyEntrantsRejectMessage_Code) EnumDescriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{7, 0}
}

type LobbyEntrantRemovedMessage_Code int32

const (
	LobbyEntrantRemovedMessage_INTERNAL          LobbyEntrantRemovedMessage_Code = 0 // Internal server error
	LobbyEntrantRemovedMessage_BAD_REQUEST       LobbyEntrantRemovedMessage_Code = 1 // Bad request from the player
	LobbyEntrantRemovedMessage_TIMEOUT           LobbyEntrantRemovedMessage_Code = 2 // Player connection timeout
	LobbyEntrantRemovedMessage_DUPLICATE_USER_ID LobbyEntrantRemovedMessage_Code = 3 // Duplicate player session
	LobbyEntrantRemovedMessage_LOBBY_LOCKED      LobbyEntrantRemovedMessage_Code = 4 // Lobby is locked
	LobbyEntrantRemovedMessage_LOBBY_FULL        LobbyEntrantRemovedMessage_Code = 5 // Lobby is full
	LobbyEntrantRemovedMessage_LOBBY_ENDING      LobbyEntrantRemovedMessage_Code = 6 // Lobby is ending
	LobbyEntrantRemovedMessage_KICKED            LobbyEntrantRemovedMessage_Code = 7 // Player was kicked from the server
	LobbyEntrantRemovedMessage_DISCONNECTED      LobbyEntrantRemovedMessage_Code = 8 // Player was disconnected
	LobbyEntrantRemovedMessage_INACTIVE          LobbyEntrantRemovedMessage_Code = 9 // Player is inactive
)

// Enum value maps for LobbyEntrantRemovedMessage_Code.
var (
	LobbyEntrantRemovedMessage_Code_name = map[int32]string{
		0: "INTERNAL",
		1: "BAD_REQUEST",
		2: "TIMEOUT",
		3: "DUPLICATE_USER_ID",
		4: "LOBBY_LOCKED",
		5: "LOBBY_FULL",
		6: "LOBBY_ENDING",
		7: "KICKED",
		8: "DISCONNECTED",
		9: "INACTIVE",
	}
	LobbyEntrantRemovedMessage_Code_value = map[string]int32{
		"INTERNAL":          0,
		"BAD_REQUEST":       1,
		"TIMEOUT":           2,
		"DUPLICATE_USER_ID": 3,
		"LOBBY_LOCKED":      4,
		"LOBBY_FULL":        5,
		"LOBBY_ENDING":      6,
		"KICKED":            7,
		"DISCONNECTED":      8,
		"INACTIVE":          9,
	}
)

func (x LobbyEntrantRemovedMessage_Code) Enum() *LobbyEntrantRemovedMessage_Code {
	p := new(LobbyEntrantRemovedMessage_Code)
	*p = x
	return p
}

func (x LobbyEntrantRemovedMessage_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyEntrantRemovedMessage_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_nevr_rtapi_proto_enumTypes[3].Descriptor()
}

func (LobbyEntrantRemovedMessage_Code) Type() protoreflect.EnumType {
	return &file_nevr_rtapi_proto_enumTypes[3]
}

func (x LobbyEntrantRemovedMessage_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyEntrantRemovedMessage_Code.Descriptor instead.
func (LobbyEntrantRemovedMessage_Code) EnumDescriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{8, 0}
}

type LobbySessionCreateMessage_LobbyType int32

const (
	// A public lobby which is visible to all players.
	LobbySessionCreateMessage_PUBLIC LobbySessionCreateMessage_LobbyType = 0
	// A private lobby which is only visible to invited players.
	LobbySessionCreateMessage_PRIVATE LobbySessionCreateMessage_LobbyType = 1
)

// Enum value maps for LobbySessionCreateMessage_LobbyType.
var (
	LobbySessionCreateMessage_LobbyType_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
	}
	LobbySessionCreateMessage_LobbyType_value = map[string]int32{
		"PUBLIC":  0,
		"PRIVATE": 1,
	}
)

func (x LobbySessionCreateMessage_LobbyType) Enum() *LobbySessionCreateMessage_LobbyType {
	p := new(LobbySessionCreateMessage_LobbyType)
	*p = x
	return p
}

func (x LobbySessionCreateMessage_LobbyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbySessionCreateMessage_LobbyType) Descriptor() protoreflect.EnumDescriptor {
	return file_nevr_rtapi_proto_enumTypes[4].Descriptor()
}

func (LobbySessionCreateMessage_LobbyType) Type() protoreflect.EnumType {
	return &file_nevr_rtapi_proto_enumTypes[4]
}

func (x LobbySessionCreateMessage_LobbyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbySessionCreateMessage_LobbyType.Descriptor instead.
func (LobbySessionCreateMessage_LobbyType) EnumDescriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{9, 0}
}

type Envelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Cid   string                 `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*Envelope_Error
	//	*Envelope_SessionUpdate
	//	*Envelope_ConnectivityStatistics
	//	*Envelope_GameServerRegistrationRequest
	//	*Envelope_GameServerRegistrationSuccess
	//	*Envelope_LobbySessionCreate
	//	*Envelope_LobbySessionEvent
	//	*Envelope_LobbyEntrantConnected
	//	*Envelope_LobbyEntrantsAccept
	//	*Envelope_LobbyEntrantsReject
	//	*Envelope_LobbyEntrantRemoved
	Message       isEnvelope_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_nevr_rtapi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Envelope) GetMessage() isEnvelope_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Envelope) GetError() *Error {
	if x != nil {
		if x, ok := x.Message.(*Envelope_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *Envelope) GetSessionUpdate() *SessionUpdateMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_SessionUpdate); ok {
			return x.SessionUpdate
		}
	}
	return nil
}

func (x *Envelope) GetConnectivityStatistics() *ConnectivityStatisticsMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_ConnectivityStatistics); ok {
			return x.ConnectivityStatistics
		}
	}
	return nil
}

func (x *Envelope) GetGameServerRegistrationRequest() *GameServerRegistrationMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_GameServerRegistrationRequest); ok {
			return x.GameServerRegistrationRequest
		}
	}
	return nil
}

func (x *Envelope) GetGameServerRegistrationSuccess() *GameServerRegistrationSuccess {
	if x != nil {
		if x, ok := x.Message.(*Envelope_GameServerRegistrationSuccess); ok {
			return x.GameServerRegistrationSuccess
		}
	}
	return nil
}

func (x *Envelope) GetLobbySessionCreate() *LobbySessionCreateMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_LobbySessionCreate); ok {
			return x.LobbySessionCreate
		}
	}
	return nil
}

func (x *Envelope) GetLobbySessionEvent() *LobbySessionEventMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_LobbySessionEvent); ok {
			return x.LobbySessionEvent
		}
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantConnected() *LobbyEntrantsConnectedMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_LobbyEntrantConnected); ok {
			return x.LobbyEntrantConnected
		}
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantsAccept() *LobbyEntrantsAcceptMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_LobbyEntrantsAccept); ok {
			return x.LobbyEntrantsAccept
		}
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantsReject() *LobbyEntrantsRejectMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_LobbyEntrantsReject); ok {
			return x.LobbyEntrantsReject
		}
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantRemoved() *LobbyEntrantRemovedMessage {
	if x != nil {
		if x, ok := x.Message.(*Envelope_LobbyEntrantRemoved); ok {
			return x.LobbyEntrantRemoved
		}
	}
	return nil
}

type isEnvelope_Message interface {
	isEnvelope_Message()
}

type Envelope_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type Envelope_SessionUpdate struct {
	SessionUpdate *SessionUpdateMessage `protobuf:"bytes,3,opt,name=sessionUpdate,proto3,oneof"`
}

type Envelope_ConnectivityStatistics struct {
	ConnectivityStatistics *ConnectivityStatisticsMessage `protobuf:"bytes,4,opt,name=connectivityStatistics,proto3,oneof"`
}

type Envelope_GameServerRegistrationRequest struct {
	GameServerRegistrationRequest *GameServerRegistrationMessage `protobuf:"bytes,5,opt,name=gameServerRegistrationRequest,proto3,oneof"`
}

type Envelope_GameServerRegistrationSuccess struct {
	GameServerRegistrationSuccess *GameServerRegistrationSuccess `protobuf:"bytes,6,opt,name=gameServerRegistrationSuccess,proto3,oneof"`
}

type Envelope_LobbySessionCreate struct {
	LobbySessionCreate *LobbySessionCreateMessage `protobuf:"bytes,7,opt,name=lobbySessionCreate,proto3,oneof"`
}

type Envelope_LobbySessionEvent struct {
	LobbySessionEvent *LobbySessionEventMessage `protobuf:"bytes,8,opt,name=lobbySessionEvent,proto3,oneof"`
}

type Envelope_LobbyEntrantConnected struct {
	LobbyEntrantConnected *LobbyEntrantsConnectedMessage `protobuf:"bytes,9,opt,name=lobbyEntrantConnected,proto3,oneof"`
}

type Envelope_LobbyEntrantsAccept struct {
	LobbyEntrantsAccept *LobbyEntrantsAcceptMessage `protobuf:"bytes,10,opt,name=lobbyEntrantsAccept,proto3,oneof"`
}

type Envelope_LobbyEntrantsReject struct {
	LobbyEntrantsReject *LobbyEntrantsRejectMessage `protobuf:"bytes,11,opt,name=lobbyEntrantsReject,proto3,oneof"`
}

type Envelope_LobbyEntrantRemoved struct {
	LobbyEntrantRemoved *LobbyEntrantRemovedMessage `protobuf:"bytes,12,opt,name=lobbyEntrantRemoved,proto3,oneof"`
}

func (*Envelope_Error) isEnvelope_Message() {}

func (*Envelope_SessionUpdate) isEnvelope_Message() {}

func (*Envelope_ConnectivityStatistics) isEnvelope_Message() {}

func (*Envelope_GameServerRegistrationRequest) isEnvelope_Message() {}

func (*Envelope_GameServerRegistrationSuccess) isEnvelope_Message() {}

func (*Envelope_LobbySessionCreate) isEnvelope_Message() {}

func (*Envelope_LobbySessionEvent) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantConnected) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantsAccept) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantsReject) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantRemoved) isEnvelope_Message() {}

// A logical error which may occur on the server.
type Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error code which should be one of "Error.Code" enums.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message in English to help developers debug the response.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Additional error details which may be different for each response.
	Context       map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_nevr_rtapi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

// LobbySessionEntrantJoinMessage is sent from the server to the service.
type LobbySessionEventMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LobbySessionId string                 `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	Code           int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LobbySessionEventMessage) Reset() {
	*x = LobbySessionEventMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionEventMessage) ProtoMessage() {}

func (x *LobbySessionEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionEventMessage.ProtoReflect.Descriptor instead.
func (*LobbySessionEventMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{2}
}

func (x *LobbySessionEventMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbySessionEventMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Registration request sent from the server to the service.
type GameServerRegistrationMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LoginSessionId    string                 `protobuf:"bytes,1,opt,name=login_session_id,json=loginSessionId,proto3" json:"login_session_id,omitempty"`
	ServerId          uint64                 `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	InternalIpAddress string                 `protobuf:"bytes,3,opt,name=internal_ip_address,json=internalIpAddress,proto3" json:"internal_ip_address,omitempty"`
	Port              uint32                 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Region            uint64                 `protobuf:"varint,5,opt,name=region,proto3" json:"region,omitempty"`
	VersionLock       uint64                 `protobuf:"varint,6,opt,name=version_lock,json=versionLock,proto3" json:"version_lock,omitempty"`
	TimeStepUsecs     uint32                 `protobuf:"varint,7,opt,name=time_step_usecs,json=timeStepUsecs,proto3" json:"time_step_usecs,omitempty"`
	Version           string                 `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GameServerRegistrationMessage) Reset() {
	*x = GameServerRegistrationMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameServerRegistrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerRegistrationMessage) ProtoMessage() {}

func (x *GameServerRegistrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerRegistrationMessage.ProtoReflect.Descriptor instead.
func (*GameServerRegistrationMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{3}
}

func (x *GameServerRegistrationMessage) GetLoginSessionId() string {
	if x != nil {
		return x.LoginSessionId
	}
	return ""
}

func (x *GameServerRegistrationMessage) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetInternalIpAddress() string {
	if x != nil {
		return x.InternalIpAddress
	}
	return ""
}

func (x *GameServerRegistrationMessage) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetRegion() uint64 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetVersionLock() uint64 {
	if x != nil {
		return x.VersionLock
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetTimeStepUsecs() uint32 {
	if x != nil {
		return x.TimeStepUsecs
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Registration success message is sent from the service to the server.
type GameServerRegistrationSuccess struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ServerId          uint64                 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`                             // The server ID assigned by the server
	ExternalIpAddress string                 `protobuf:"bytes,2,opt,name=external_ip_address,json=externalIpAddress,proto3" json:"external_ip_address,omitempty"` // The external address of the server (ip)
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GameServerRegistrationSuccess) Reset() {
	*x = GameServerRegistrationSuccess{}
	mi := &file_nevr_rtapi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameServerRegistrationSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerRegistrationSuccess) ProtoMessage() {}

func (x *GameServerRegistrationSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerRegistrationSuccess.ProtoReflect.Descriptor instead.
func (*GameServerRegistrationSuccess) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{4}
}

func (x *GameServerRegistrationSuccess) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GameServerRegistrationSuccess) GetExternalIpAddress() string {
	if x != nil {
		return x.ExternalIpAddress
	}
	return ""
}

// Entrant connect message is sent from the server to the service.
type LobbyEntrantsConnectedMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LobbySessionId string                 `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	EntrantIds     []string               `protobuf:"bytes,2,rep,name=entrant_ids,json=entrantIds,proto3" json:"entrant_ids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LobbyEntrantsConnectedMessage) Reset() {
	*x = LobbyEntrantsConnectedMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbyEntrantsConnectedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantsConnectedMessage) ProtoMessage() {}

func (x *LobbyEntrantsConnectedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantsConnectedMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantsConnectedMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{5}
}

func (x *LobbyEntrantsConnectedMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbyEntrantsConnectedMessage) GetEntrantIds() []string {
	if x != nil {
		return x.EntrantIds
	}
	return nil
}

// Entrant accept message is sent from the service to the server.
type LobbyEntrantsAcceptMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntrantIds    []string               `protobuf:"bytes,1,rep,name=entrant_ids,json=entrantIds,proto3" json:"entrant_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbyEntrantsAcceptMessage) Reset() {
	*x = LobbyEntrantsAcceptMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbyEntrantsAcceptMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantsAcceptMessage) ProtoMessage() {}

func (x *LobbyEntrantsAcceptMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantsAcceptMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantsAcceptMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{6}
}

func (x *LobbyEntrantsAcceptMessage) GetEntrantIds() []string {
	if x != nil {
		return x.EntrantIds
	}
	return nil
}

// Entrant rejection message is sent from the server to the service.
type LobbyEntrantsRejectMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntrantIds    []string               `protobuf:"bytes,1,rep,name=entrant_ids,json=entrantIds,proto3" json:"entrant_ids,omitempty"`
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"` // Optional reason for rejection
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbyEntrantsRejectMessage) Reset() {
	*x = LobbyEntrantsRejectMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbyEntrantsRejectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantsRejectMessage) ProtoMessage() {}

func (x *LobbyEntrantsRejectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantsRejectMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantsRejectMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{7}
}

func (x *LobbyEntrantsRejectMessage) GetEntrantIds() []string {
	if x != nil {
		return x.EntrantIds
	}
	return nil
}

func (x *LobbyEntrantsRejectMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Entrant rejection message is sent from the server to the service.
type LobbyEntrantRemovedMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LobbySessionId string                 `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	EntrantId      string                 `protobuf:"bytes,2,opt,name=entrant_id,json=entrantId,proto3" json:"entrant_id,omitempty"`
	Code           int32                  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"` // Optional reason for rejection
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LobbyEntrantRemovedMessage) Reset() {
	*x = LobbyEntrantRemovedMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbyEntrantRemovedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantRemovedMessage) ProtoMessage() {}

func (x *LobbyEntrantRemovedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantRemovedMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantRemovedMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{8}
}

func (x *LobbyEntrantRemovedMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbyEntrantRemovedMessage) GetEntrantId() string {
	if x != nil {
		return x.EntrantId
	}
	return ""
}

func (x *LobbyEntrantRemovedMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type LobbySessionCreateMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LobbySessionId string                 `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	LobbyType      int32                  `protobuf:"varint,2,opt,name=lobby_type,json=lobbyType,proto3" json:"lobby_type,omitempty"`
	GroupId        string                 `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MaxEntrants    int32                  `protobuf:"varint,4,opt,name=max_entrants,json=maxEntrants,proto3" json:"max_entrants,omitempty"`
	SettingsJson   string                 `protobuf:"bytes,5,opt,name=settings_json,json=settingsJson,proto3" json:"settings_json,omitempty"`
	Features       []string               `protobuf:"bytes,6,rep,name=features,proto3" json:"features,omitempty"`
	TimeStepUsecs  uint32                 `protobuf:"varint,7,opt,name=time_step_usecs,json=timeStepUsecs,proto3" json:"time_step_usecs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LobbySessionCreateMessage) Reset() {
	*x = LobbySessionCreateMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionCreateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionCreateMessage) ProtoMessage() {}

func (x *LobbySessionCreateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionCreateMessage.ProtoReflect.Descriptor instead.
func (*LobbySessionCreateMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{9}
}

func (x *LobbySessionCreateMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbySessionCreateMessage) GetLobbyType() int32 {
	if x != nil {
		return x.LobbyType
	}
	return 0
}

func (x *LobbySessionCreateMessage) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *LobbySessionCreateMessage) GetMaxEntrants() int32 {
	if x != nil {
		return x.MaxEntrants
	}
	return 0
}

func (x *LobbySessionCreateMessage) GetSettingsJson() string {
	if x != nil {
		return x.SettingsJson
	}
	return ""
}

func (x *LobbySessionCreateMessage) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *LobbySessionCreateMessage) GetTimeStepUsecs() uint32 {
	if x != nil {
		return x.TimeStepUsecs
	}
	return 0
}

// SessionUpdateMessage is sent from the server to the game service.
type SessionUpdateMessage struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	LobbySessionId string                     `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	TimeStepUsecs  uint32                     `protobuf:"varint,2,opt,name=time_step_usecs,json=timeStepUsecs,proto3" json:"time_step_usecs,omitempty"`
	TickCount      uint64                     `protobuf:"varint,3,opt,name=tick_count,json=tickCount,proto3" json:"tick_count,omitempty"`
	EntrantCount   uint64                     `protobuf:"varint,4,opt,name=entrant_count,json=entrantCount,proto3" json:"entrant_count,omitempty"`
	Timestamp      *timestamppb.Timestamp     `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Session        *gameapi.SessionResponse   `protobuf:"bytes,6,opt,name=session,json=session_data,proto3" json:"session,omitempty"`
	UserBones      *gameapi.UserBonesResponse `protobuf:"bytes,7,opt,name=user_bones,proto3" json:"user_bones,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SessionUpdateMessage) Reset() {
	*x = SessionUpdateMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateMessage) ProtoMessage() {}

func (x *SessionUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateMessage.ProtoReflect.Descriptor instead.
func (*SessionUpdateMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{10}
}

func (x *SessionUpdateMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *SessionUpdateMessage) GetTimeStepUsecs() uint32 {
	if x != nil {
		return x.TimeStepUsecs
	}
	return 0
}

func (x *SessionUpdateMessage) GetTickCount() uint64 {
	if x != nil {
		return x.TickCount
	}
	return 0
}

func (x *SessionUpdateMessage) GetEntrantCount() uint64 {
	if x != nil {
		return x.EntrantCount
	}
	return 0
}

func (x *SessionUpdateMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SessionUpdateMessage) GetSession() *gameapi.SessionResponse {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SessionUpdateMessage) GetUserBones() *gameapi.UserBonesResponse {
	if x != nil {
		return x.UserBones
	}
	return nil
}

// ConnectivityStatsMessage is a structure normally only seen in the r14logs
type ConnectivityStatisticsMessage struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PacketLossRatio    float32                `protobuf:"fixed32,1,opt,name=packet_loss_ratio,json=packetLossRatio,proto3" json:"packet_loss_ratio,omitempty"`
	PredictionOffset   uint64                 `protobuf:"varint,2,opt,name=prediction_offset,json=predictionOffset,proto3" json:"prediction_offset,omitempty"`
	Target             uint64                 `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	LocalTime          uint64                 `protobuf:"varint,4,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	ServerTime         uint64                 `protobuf:"varint,5,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	PendingServerDelta int64                  `protobuf:"varint,6,opt,name=pending_server_delta,json=pendingServerDelta,proto3" json:"pending_server_delta,omitempty"`
	DiscardedFramePct  float32                `protobuf:"fixed32,7,opt,name=discarded_frame_pct,json=discardedFramePct,proto3" json:"discarded_frame_pct,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ConnectivityStatisticsMessage) Reset() {
	*x = ConnectivityStatisticsMessage{}
	mi := &file_nevr_rtapi_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectivityStatisticsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectivityStatisticsMessage) ProtoMessage() {}

func (x *ConnectivityStatisticsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_rtapi_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectivityStatisticsMessage.ProtoReflect.Descriptor instead.
func (*ConnectivityStatisticsMessage) Descriptor() ([]byte, []int) {
	return file_nevr_rtapi_proto_rawDescGZIP(), []int{11}
}

func (x *ConnectivityStatisticsMessage) GetPacketLossRatio() float32 {
	if x != nil {
		return x.PacketLossRatio
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetPredictionOffset() uint64 {
	if x != nil {
		return x.PredictionOffset
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetLocalTime() uint64 {
	if x != nil {
		return x.LocalTime
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetServerTime() uint64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetPendingServerDelta() int64 {
	if x != nil {
		return x.PendingServerDelta
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetDiscardedFramePct() float32 {
	if x != nil {
		return x.DiscardedFramePct
	}
	return 0
}

var File_nevr_rtapi_proto protoreflect.FileDescriptor

const file_nevr_rtapi_proto_rawDesc = "" +
	"\n" +
	"\x10nevr_rtapi.proto\x12\n" +
	"nevr.rtapi\x1a\x1agameapi/nevr_gameapi.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8d\b\n" +
	"\bEnvelope\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\x12)\n" +
	"\x05error\x18\x02 \x01(\v2\x11.nevr.rtapi.ErrorH\x00R\x05error\x12H\n" +
	"\rsessionUpdate\x18\x03 \x01(\v2 .nevr.rtapi.SessionUpdateMessageH\x00R\rsessionUpdate\x12c\n" +
	"\x16connectivityStatistics\x18\x04 \x01(\v2).nevr.rtapi.ConnectivityStatisticsMessageH\x00R\x16connectivityStatistics\x12q\n" +
	"\x1dgameServerRegistrationRequest\x18\x05 \x01(\v2).nevr.rtapi.GameServerRegistrationMessageH\x00R\x1dgameServerRegistrationRequest\x12q\n" +
	"\x1dgameServerRegistrationSuccess\x18\x06 \x01(\v2).nevr.rtapi.GameServerRegistrationSuccessH\x00R\x1dgameServerRegistrationSuccess\x12W\n" +
	"\x12lobbySessionCreate\x18\a \x01(\v2%.nevr.rtapi.LobbySessionCreateMessageH\x00R\x12lobbySessionCreate\x12T\n" +
	"\x11lobbySessionEvent\x18\b \x01(\v2$.nevr.rtapi.LobbySessionEventMessageH\x00R\x11lobbySessionEvent\x12a\n" +
	"\x15lobbyEntrantConnected\x18\t \x01(\v2).nevr.rtapi.LobbyEntrantsConnectedMessageH\x00R\x15lobbyEntrantConnected\x12Z\n" +
	"\x13lobbyEntrantsAccept\x18\n" +
	" \x01(\v2&.nevr.rtapi.LobbyEntrantsAcceptMessageH\x00R\x13lobbyEntrantsAccept\x12Z\n" +
	"\x13lobbyEntrantsReject\x18\v \x01(\v2&.nevr.rtapi.LobbyEntrantsRejectMessageH\x00R\x13lobbyEntrantsReject\x12Z\n" +
	"\x13lobbyEntrantRemoved\x18\f \x01(\v2&.nevr.rtapi.LobbyEntrantRemovedMessageH\x00R\x13lobbyEntrantRemovedB\t\n" +
	"\amessage\"\xbf\x02\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x128\n" +
	"\acontext\x18\x03 \x03(\v2\x1e.nevr.rtapi.Error.ContextEntryR\acontext\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x91\x01\n" +
	"\x04Code\x12\x15\n" +
	"\x11RUNTIME_EXCEPTION\x10\x00\x12\x18\n" +
	"\x14UNRECOGNIZED_PAYLOAD\x10\x01\x12\x13\n" +
	"\x0fMISSING_PAYLOAD\x10\x02\x12\r\n" +
	"\tBAD_INPUT\x10\x03\x12\x17\n" +
	"\x13REGISTRATION_FAILED\x10\x04\x12\x1b\n" +
	"\x17LOBBY_SESSION_NOT_FOUND\x10\x05\"\x92\x01\n" +
	"\x18LobbySessionEventMessage\x12(\n" +
	"\x10lobby_session_id\x18\x01 \x01(\tR\x0elobbySessionId\x12\x12\n" +
	"\x04code\x18\x02 \x01(\x05R\x04code\"8\n" +
	"\x04Code\x12\v\n" +
	"\aSTARTED\x10\x00\x12\t\n" +
	"\x05ENDED\x10\x01\x12\n" +
	"\n" +
	"\x06LOCKED\x10\x02\x12\f\n" +
	"\bUNLOCKED\x10\x03\"\xa7\x02\n" +
	"\x1dGameServerRegistrationMessage\x12(\n" +
	"\x10login_session_id\x18\x01 \x01(\tR\x0eloginSessionId\x12\x1b\n" +
	"\tserver_id\x18\x02 \x01(\x04R\bserverId\x12.\n" +
	"\x13internal_ip_address\x18\x03 \x01(\tR\x11internalIpAddress\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12\x16\n" +
	"\x06region\x18\x05 \x01(\x04R\x06region\x12!\n" +
	"\fversion_lock\x18\x06 \x01(\x04R\vversionLock\x12&\n" +
	"\x0ftime_step_usecs\x18\a \x01(\rR\rtimeStepUsecs\x12\x18\n" +
	"\aversion\x18\b \x01(\tR\aversion\"l\n" +
	"\x1dGameServerRegistrationSuccess\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\x04R\bserverId\x12.\n" +
	"\x13external_ip_address\x18\x02 \x01(\tR\x11externalIpAddress\"j\n" +
	"\x1dLobbyEntrantsConnectedMessage\x12(\n" +
	"\x10lobby_session_id\x18\x01 \x01(\tR\x0elobbySessionId\x12\x1f\n" +
	"\ventrant_ids\x18\x02 \x03(\tR\n" +
	"entrantIds\"=\n" +
	"\x1aLobbyEntrantsAcceptMessage\x12\x1f\n" +
	"\ventrant_ids\x18\x01 \x03(\tR\n" +
	"entrantIds\"\xfd\x01\n" +
	"\x1aLobbyEntrantsRejectMessage\x12\x1f\n" +
	"\ventrant_ids\x18\x01 \x03(\tR\n" +
	"entrantIds\x12\x12\n" +
	"\x04code\x18\x02 \x01(\x05R\x04code\"\xa9\x01\n" +
	"\x04Code\x12\f\n" +
	"\bINTERNAL\x10\x00\x12\x0f\n" +
	"\vBAD_REQUEST\x10\x01\x12\v\n" +
	"\aTIMEOUT\x10\x02\x12\x15\n" +
	"\x11DUPLICATE_USER_ID\x10\x03\x12\x10\n" +
	"\fLOBBY_LOCKED\x10\x04\x12\x0e\n" +
	"\n" +
	"LOBBY_FULL\x10\x05\x12\x10\n" +
	"\fLOBBY_ENDING\x10\x06\x12\n" +
	"\n" +
	"\x06KICKED\x10\a\x12\x10\n" +
	"\fDISCONNECTED\x10\b\x12\f\n" +
	"\bINACTIVE\x10\t\"\xa5\x02\n" +
	"\x1aLobbyEntrantRemovedMessage\x12(\n" +
	"\x10lobby_session_id\x18\x01 \x01(\tR\x0elobbySessionId\x12\x1d\n" +
	"\n" +
	"entrant_id\x18\x02 \x01(\tR\tentrantId\x12\x12\n" +
	"\x04code\x18\x03 \x01(\x05R\x04code\"\xa9\x01\n" +
	"\x04Code\x12\f\n" +
	"\bINTERNAL\x10\x00\x12\x0f\n" +
	"\vBAD_REQUEST\x10\x01\x12\v\n" +
	"\aTIMEOUT\x10\x02\x12\x15\n" +
	"\x11DUPLICATE_USER_ID\x10\x03\x12\x10\n" +
	"\fLOBBY_LOCKED\x10\x04\x12\x0e\n" +
	"\n" +
	"LOBBY_FULL\x10\x05\x12\x10\n" +
	"\fLOBBY_ENDING\x10\x06\x12\n" +
	"\n" +
	"\x06KICKED\x10\a\x12\x10\n" +
	"\fDISCONNECTED\x10\b\x12\f\n" +
	"\bINACTIVE\x10\t\"\xb1\x02\n" +
	"\x19LobbySessionCreateMessage\x12(\n" +
	"\x10lobby_session_id\x18\x01 \x01(\tR\x0elobbySessionId\x12\x1d\n" +
	"\n" +
	"lobby_type\x18\x02 \x01(\x05R\tlobbyType\x12\x19\n" +
	"\bgroup_id\x18\x03 \x01(\tR\agroupId\x12!\n" +
	"\fmax_entrants\x18\x04 \x01(\x05R\vmaxEntrants\x12#\n" +
	"\rsettings_json\x18\x05 \x01(\tR\fsettingsJson\x12\x1a\n" +
	"\bfeatures\x18\x06 \x03(\tR\bfeatures\x12&\n" +
	"\x0ftime_step_usecs\x18\a \x01(\rR\rtimeStepUsecs\"$\n" +
	"\tLobbyType\x12\n" +
	"\n" +
	"\x06PUBLIC\x10\x00\x12\v\n" +
	"\aPRIVATE\x10\x01\"\xe5\x02\n" +
	"\x14SessionUpdateMessage\x12(\n" +
	"\x10lobby_session_id\x18\x01 \x01(\tR\x0elobbySessionId\x12&\n" +
	"\x0ftime_step_usecs\x18\x02 \x01(\rR\rtimeStepUsecs\x12\x1d\n" +
	"\n" +
	"tick_count\x18\x03 \x01(\x04R\ttickCount\x12#\n" +
	"\rentrant_count\x18\x04 \x01(\x04R\fentrantCount\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12<\n" +
	"\asession\x18\x06 \x01(\v2\x1d.nevr.gameapi.SessionResponseR\fsession_data\x12?\n" +
	"\n" +
	"user_bones\x18\a \x01(\v2\x1f.nevr.gameapi.UserBonesResponseR\n" +
	"user_bones\"\xb2\x02\n" +
	"\x1dConnectivityStatisticsMessage\x12*\n" +
	"\x11packet_loss_ratio\x18\x01 \x01(\x02R\x0fpacketLossRatio\x12+\n" +
	"\x11prediction_offset\x18\x02 \x01(\x04R\x10predictionOffset\x12\x16\n" +
	"\x06target\x18\x03 \x01(\x04R\x06target\x12\x1d\n" +
	"\n" +
	"local_time\x18\x04 \x01(\x04R\tlocalTime\x12\x1f\n" +
	"\vserver_time\x18\x05 \x01(\x04R\n" +
	"serverTime\x120\n" +
	"\x14pending_server_delta\x18\x06 \x01(\x03R\x12pendingServerDelta\x12.\n" +
	"\x13discarded_frame_pct\x18\a \x01(\x02R\x11discardedFramePctBl\n" +
	"\x1fcom.github.echotools.nevr.rtapiB\fNevrRealtimeP\x01Z)github.com/echotools/nevr-common/v3/rtapi\xaa\x02\rNevr.Protobufb\x06proto3"

var (
	file_nevr_rtapi_proto_rawDescOnce sync.Once
	file_nevr_rtapi_proto_rawDescData []byte
)

func file_nevr_rtapi_proto_rawDescGZIP() []byte {
	file_nevr_rtapi_proto_rawDescOnce.Do(func() {
		file_nevr_rtapi_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nevr_rtapi_proto_rawDesc), len(file_nevr_rtapi_proto_rawDesc)))
	})
	return file_nevr_rtapi_proto_rawDescData
}

var file_nevr_rtapi_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_nevr_rtapi_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_nevr_rtapi_proto_goTypes = []any{
	(Error_Code)(0),                          // 0: nevr.rtapi.Error.Code
	(LobbySessionEventMessage_Code)(0),       // 1: nevr.rtapi.LobbySessionEventMessage.Code
	(LobbyEntrantsRejectMessage_Code)(0),     // 2: nevr.rtapi.LobbyEntrantsRejectMessage.Code
	(LobbyEntrantRemovedMessage_Code)(0),     // 3: nevr.rtapi.LobbyEntrantRemovedMessage.Code
	(LobbySessionCreateMessage_LobbyType)(0), // 4: nevr.rtapi.LobbySessionCreateMessage.LobbyType
	(*Envelope)(nil),                         // 5: nevr.rtapi.Envelope
	(*Error)(nil),                            // 6: nevr.rtapi.Error
	(*LobbySessionEventMessage)(nil),         // 7: nevr.rtapi.LobbySessionEventMessage
	(*GameServerRegistrationMessage)(nil),    // 8: nevr.rtapi.GameServerRegistrationMessage
	(*GameServerRegistrationSuccess)(nil),    // 9: nevr.rtapi.GameServerRegistrationSuccess
	(*LobbyEntrantsConnectedMessage)(nil),    // 10: nevr.rtapi.LobbyEntrantsConnectedMessage
	(*LobbyEntrantsAcceptMessage)(nil),       // 11: nevr.rtapi.LobbyEntrantsAcceptMessage
	(*LobbyEntrantsRejectMessage)(nil),       // 12: nevr.rtapi.LobbyEntrantsRejectMessage
	(*LobbyEntrantRemovedMessage)(nil),       // 13: nevr.rtapi.LobbyEntrantRemovedMessage
	(*LobbySessionCreateMessage)(nil),        // 14: nevr.rtapi.LobbySessionCreateMessage
	(*SessionUpdateMessage)(nil),             // 15: nevr.rtapi.SessionUpdateMessage
	(*ConnectivityStatisticsMessage)(nil),    // 16: nevr.rtapi.ConnectivityStatisticsMessage
	nil,                                      // 17: nevr.rtapi.Error.ContextEntry
	(*timestamppb.Timestamp)(nil),            // 18: google.protobuf.Timestamp
	(*gameapi.SessionResponse)(nil),          // 19: nevr.gameapi.SessionResponse
	(*gameapi.UserBonesResponse)(nil),        // 20: nevr.gameapi.UserBonesResponse
}
var file_nevr_rtapi_proto_depIdxs = []int32{
	6,  // 0: nevr.rtapi.Envelope.error:type_name -> nevr.rtapi.Error
	15, // 1: nevr.rtapi.Envelope.sessionUpdate:type_name -> nevr.rtapi.SessionUpdateMessage
	16, // 2: nevr.rtapi.Envelope.connectivityStatistics:type_name -> nevr.rtapi.ConnectivityStatisticsMessage
	8,  // 3: nevr.rtapi.Envelope.gameServerRegistrationRequest:type_name -> nevr.rtapi.GameServerRegistrationMessage
	9,  // 4: nevr.rtapi.Envelope.gameServerRegistrationSuccess:type_name -> nevr.rtapi.GameServerRegistrationSuccess
	14, // 5: nevr.rtapi.Envelope.lobbySessionCreate:type_name -> nevr.rtapi.LobbySessionCreateMessage
	7,  // 6: nevr.rtapi.Envelope.lobbySessionEvent:type_name -> nevr.rtapi.LobbySessionEventMessage
	10, // 7: nevr.rtapi.Envelope.lobbyEntrantConnected:type_name -> nevr.rtapi.LobbyEntrantsConnectedMessage
	11, // 8: nevr.rtapi.Envelope.lobbyEntrantsAccept:type_name -> nevr.rtapi.LobbyEntrantsAcceptMessage
	12, // 9: nevr.rtapi.Envelope.lobbyEntrantsReject:type_name -> nevr.rtapi.LobbyEntrantsRejectMessage
	13, // 10: nevr.rtapi.Envelope.lobbyEntrantRemoved:type_name -> nevr.rtapi.LobbyEntrantRemovedMessage
	17, // 11: nevr.rtapi.Error.context:type_name -> nevr.rtapi.Error.ContextEntry
	18, // 12: nevr.rtapi.SessionUpdateMessage.timestamp:type_name -> google.protobuf.Timestamp
	19, // 13: nevr.rtapi.SessionUpdateMessage.session:type_name -> nevr.gameapi.SessionResponse
	20, // 14: nevr.rtapi.SessionUpdateMessage.user_bones:type_name -> nevr.gameapi.UserBonesResponse
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_nevr_rtapi_proto_init() }
func file_nevr_rtapi_proto_init() {
	if File_nevr_rtapi_proto != nil {
		return
	}
	file_nevr_rtapi_proto_msgTypes[0].OneofWrappers = []any{
		(*Envelope_Error)(nil),
		(*Envelope_SessionUpdate)(nil),
		(*Envelope_ConnectivityStatistics)(nil),
		(*Envelope_GameServerRegistrationRequest)(nil),
		(*Envelope_GameServerRegistrationSuccess)(nil),
		(*Envelope_LobbySessionCreate)(nil),
		(*Envelope_LobbySessionEvent)(nil),
		(*Envelope_LobbyEntrantConnected)(nil),
		(*Envelope_LobbyEntrantsAccept)(nil),
		(*Envelope_LobbyEntrantsReject)(nil),
		(*Envelope_LobbyEntrantRemoved)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nevr_rtapi_proto_rawDesc), len(file_nevr_rtapi_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nevr_rtapi_proto_goTypes,
		DependencyIndexes: file_nevr_rtapi_proto_depIdxs,
		EnumInfos:         file_nevr_rtapi_proto_enumTypes,
		MessageInfos:      file_nevr_rtapi_proto_msgTypes,
	}.Build()
	File_nevr_rtapi_proto = out.File
	file_nevr_rtapi_proto_goTypes = nil
	file_nevr_rtapi_proto_depIdxs = nil
}
