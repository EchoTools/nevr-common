// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v6.30.2
// source: rtapi.proto

package rtapi

import (
	gameapi "github.com/echotools/nevr-common/gameapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The selection of possible error codes.
type Error_Code int32

const (
	// An unexpected result from the server.
	Error_RUNTIME_EXCEPTION Error_Code = 0
	// The server received a message which is not recognised.
	Error_UNRECOGNIZED_PAYLOAD Error_Code = 1
	// A message was expected but contains no content.
	Error_MISSING_PAYLOAD Error_Code = 2
	// Fields in the message have an invalid format.
	Error_BAD_INPUT Error_Code = 3
	// Game server registration failed
	Error_REGISTRATION_FAILED Error_Code = 4
	// The lobby session was not found.
	Error_LOBBY_SESSION_NOT_FOUND Error_Code = 5
)

// Enum value maps for Error_Code.
var (
	Error_Code_name = map[int32]string{
		0: "RUNTIME_EXCEPTION",
		1: "UNRECOGNIZED_PAYLOAD",
		2: "MISSING_PAYLOAD",
		3: "BAD_INPUT",
		4: "REGISTRATION_FAILED",
		5: "LOBBY_SESSION_NOT_FOUND",
	}
	Error_Code_value = map[string]int32{
		"RUNTIME_EXCEPTION":       0,
		"UNRECOGNIZED_PAYLOAD":    1,
		"MISSING_PAYLOAD":         2,
		"BAD_INPUT":               3,
		"REGISTRATION_FAILED":     4,
		"LOBBY_SESSION_NOT_FOUND": 5,
	}
)

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}

func (x Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_rtapi_proto_enumTypes[0].Descriptor()
}

func (Error_Code) Type() protoreflect.EnumType {
	return &file_rtapi_proto_enumTypes[0]
}

func (x Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Code.Descriptor instead.
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{1, 0}
}

// The selection of possible session event codes.
type LobbySessionEventMessage_Code int32

const (
	// Session started
	LobbySessionEventMessage_STARTED LobbySessionEventMessage_Code = 0
	// Session ended
	LobbySessionEventMessage_ENDED LobbySessionEventMessage_Code = 1
	// Session locked
	LobbySessionEventMessage_LOCKED LobbySessionEventMessage_Code = 2
	// Session unlocked
	LobbySessionEventMessage_UNLOCKED LobbySessionEventMessage_Code = 3
)

// Enum value maps for LobbySessionEventMessage_Code.
var (
	LobbySessionEventMessage_Code_name = map[int32]string{
		0: "STARTED",
		1: "ENDED",
		2: "LOCKED",
		3: "UNLOCKED",
	}
	LobbySessionEventMessage_Code_value = map[string]int32{
		"STARTED":  0,
		"ENDED":    1,
		"LOCKED":   2,
		"UNLOCKED": 3,
	}
)

func (x LobbySessionEventMessage_Code) Enum() *LobbySessionEventMessage_Code {
	p := new(LobbySessionEventMessage_Code)
	*p = x
	return p
}

func (x LobbySessionEventMessage_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbySessionEventMessage_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_rtapi_proto_enumTypes[1].Descriptor()
}

func (LobbySessionEventMessage_Code) Type() protoreflect.EnumType {
	return &file_rtapi_proto_enumTypes[1]
}

func (x LobbySessionEventMessage_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbySessionEventMessage_Code.Descriptor instead.
func (LobbySessionEventMessage_Code) EnumDescriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{2, 0}
}

type LobbyEntrantsRejectMessage_Code int32

const (
	LobbyEntrantsRejectMessage_INTERNAL          LobbyEntrantsRejectMessage_Code = 0 // Internal server error
	LobbyEntrantsRejectMessage_BAD_REQUEST       LobbyEntrantsRejectMessage_Code = 1 // Bad request from the player
	LobbyEntrantsRejectMessage_TIMEOUT           LobbyEntrantsRejectMessage_Code = 2 // Player connection timeout
	LobbyEntrantsRejectMessage_DUPLICATE_USER_ID LobbyEntrantsRejectMessage_Code = 3 // Duplicate player session
	LobbyEntrantsRejectMessage_LOBBY_LOCKED      LobbyEntrantsRejectMessage_Code = 4 // Lobby is locked
	LobbyEntrantsRejectMessage_LOBBY_FULL        LobbyEntrantsRejectMessage_Code = 5 // Lobby is full
	LobbyEntrantsRejectMessage_LOBBY_ENDING      LobbyEntrantsRejectMessage_Code = 6 // Lobby is ending
	LobbyEntrantsRejectMessage_KICKED            LobbyEntrantsRejectMessage_Code = 7 // Player was kicked from the server
	LobbyEntrantsRejectMessage_DISCONNECTED      LobbyEntrantsRejectMessage_Code = 8 // Player was disconnected
	LobbyEntrantsRejectMessage_INACTIVE          LobbyEntrantsRejectMessage_Code = 9 // Player is inactive
)

// Enum value maps for LobbyEntrantsRejectMessage_Code.
var (
	LobbyEntrantsRejectMessage_Code_name = map[int32]string{
		0: "INTERNAL",
		1: "BAD_REQUEST",
		2: "TIMEOUT",
		3: "DUPLICATE_USER_ID",
		4: "LOBBY_LOCKED",
		5: "LOBBY_FULL",
		6: "LOBBY_ENDING",
		7: "KICKED",
		8: "DISCONNECTED",
		9: "INACTIVE",
	}
	LobbyEntrantsRejectMessage_Code_value = map[string]int32{
		"INTERNAL":          0,
		"BAD_REQUEST":       1,
		"TIMEOUT":           2,
		"DUPLICATE_USER_ID": 3,
		"LOBBY_LOCKED":      4,
		"LOBBY_FULL":        5,
		"LOBBY_ENDING":      6,
		"KICKED":            7,
		"DISCONNECTED":      8,
		"INACTIVE":          9,
	}
)

func (x LobbyEntrantsRejectMessage_Code) Enum() *LobbyEntrantsRejectMessage_Code {
	p := new(LobbyEntrantsRejectMessage_Code)
	*p = x
	return p
}

func (x LobbyEntrantsRejectMessage_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyEntrantsRejectMessage_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_rtapi_proto_enumTypes[2].Descriptor()
}

func (LobbyEntrantsRejectMessage_Code) Type() protoreflect.EnumType {
	return &file_rtapi_proto_enumTypes[2]
}

func (x LobbyEntrantsRejectMessage_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyEntrantsRejectMessage_Code.Descriptor instead.
func (LobbyEntrantsRejectMessage_Code) EnumDescriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{7, 0}
}

type LobbyEntrantRemovedMessage_Code int32

const (
	LobbyEntrantRemovedMessage_INTERNAL          LobbyEntrantRemovedMessage_Code = 0 // Internal server error
	LobbyEntrantRemovedMessage_BAD_REQUEST       LobbyEntrantRemovedMessage_Code = 1 // Bad request from the player
	LobbyEntrantRemovedMessage_TIMEOUT           LobbyEntrantRemovedMessage_Code = 2 // Player connection timeout
	LobbyEntrantRemovedMessage_DUPLICATE_USER_ID LobbyEntrantRemovedMessage_Code = 3 // Duplicate player session
	LobbyEntrantRemovedMessage_LOBBY_LOCKED      LobbyEntrantRemovedMessage_Code = 4 // Lobby is locked
	LobbyEntrantRemovedMessage_LOBBY_FULL        LobbyEntrantRemovedMessage_Code = 5 // Lobby is full
	LobbyEntrantRemovedMessage_LOBBY_ENDING      LobbyEntrantRemovedMessage_Code = 6 // Lobby is ending
	LobbyEntrantRemovedMessage_KICKED            LobbyEntrantRemovedMessage_Code = 7 // Player was kicked from the server
	LobbyEntrantRemovedMessage_DISCONNECTED      LobbyEntrantRemovedMessage_Code = 8 // Player was disconnected
	LobbyEntrantRemovedMessage_INACTIVE          LobbyEntrantRemovedMessage_Code = 9 // Player is inactive
)

// Enum value maps for LobbyEntrantRemovedMessage_Code.
var (
	LobbyEntrantRemovedMessage_Code_name = map[int32]string{
		0: "INTERNAL",
		1: "BAD_REQUEST",
		2: "TIMEOUT",
		3: "DUPLICATE_USER_ID",
		4: "LOBBY_LOCKED",
		5: "LOBBY_FULL",
		6: "LOBBY_ENDING",
		7: "KICKED",
		8: "DISCONNECTED",
		9: "INACTIVE",
	}
	LobbyEntrantRemovedMessage_Code_value = map[string]int32{
		"INTERNAL":          0,
		"BAD_REQUEST":       1,
		"TIMEOUT":           2,
		"DUPLICATE_USER_ID": 3,
		"LOBBY_LOCKED":      4,
		"LOBBY_FULL":        5,
		"LOBBY_ENDING":      6,
		"KICKED":            7,
		"DISCONNECTED":      8,
		"INACTIVE":          9,
	}
)

func (x LobbyEntrantRemovedMessage_Code) Enum() *LobbyEntrantRemovedMessage_Code {
	p := new(LobbyEntrantRemovedMessage_Code)
	*p = x
	return p
}

func (x LobbyEntrantRemovedMessage_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyEntrantRemovedMessage_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_rtapi_proto_enumTypes[3].Descriptor()
}

func (LobbyEntrantRemovedMessage_Code) Type() protoreflect.EnumType {
	return &file_rtapi_proto_enumTypes[3]
}

func (x LobbyEntrantRemovedMessage_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyEntrantRemovedMessage_Code.Descriptor instead.
func (LobbyEntrantRemovedMessage_Code) EnumDescriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{8, 0}
}

type LobbySessionCreateMessage_LobbyType int32

const (
	// A public lobby which is visible to all players.
	LobbySessionCreateMessage_PUBLIC LobbySessionCreateMessage_LobbyType = 0
	// A private lobby which is only visible to invited players.
	LobbySessionCreateMessage_PRIVATE LobbySessionCreateMessage_LobbyType = 1
)

// Enum value maps for LobbySessionCreateMessage_LobbyType.
var (
	LobbySessionCreateMessage_LobbyType_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
	}
	LobbySessionCreateMessage_LobbyType_value = map[string]int32{
		"PUBLIC":  0,
		"PRIVATE": 1,
	}
)

func (x LobbySessionCreateMessage_LobbyType) Enum() *LobbySessionCreateMessage_LobbyType {
	p := new(LobbySessionCreateMessage_LobbyType)
	*p = x
	return p
}

func (x LobbySessionCreateMessage_LobbyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbySessionCreateMessage_LobbyType) Descriptor() protoreflect.EnumDescriptor {
	return file_rtapi_proto_enumTypes[4].Descriptor()
}

func (LobbySessionCreateMessage_LobbyType) Type() protoreflect.EnumType {
	return &file_rtapi_proto_enumTypes[4]
}

func (x LobbySessionCreateMessage_LobbyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbySessionCreateMessage_LobbyType.Descriptor instead.
func (LobbySessionCreateMessage_LobbyType) EnumDescriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{9, 0}
}

type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Types that are assignable to Message:
	//
	//	*Envelope_Error
	//	*Envelope_SessionUpdate
	//	*Envelope_ConnectivityStatistics
	//	*Envelope_GameServerRegistrationRequest
	//	*Envelope_GameServerRegistrationSuccess
	//	*Envelope_LobbySessionCreate
	//	*Envelope_LobbySessionEvent
	//	*Envelope_LobbyEntrantConnected
	//	*Envelope_LobbyEntrantsAccept
	//	*Envelope_LobbyEntrantsReject
	//	*Envelope_LobbyEntrantRemoved
	Message isEnvelope_Message `protobuf_oneof:"message"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (m *Envelope) GetMessage() isEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Envelope) GetError() *Error {
	if x, ok := x.GetMessage().(*Envelope_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Envelope) GetSessionUpdate() *SessionUpdateMessage {
	if x, ok := x.GetMessage().(*Envelope_SessionUpdate); ok {
		return x.SessionUpdate
	}
	return nil
}

func (x *Envelope) GetConnectivityStatistics() *ConnectivityStatisticsMessage {
	if x, ok := x.GetMessage().(*Envelope_ConnectivityStatistics); ok {
		return x.ConnectivityStatistics
	}
	return nil
}

func (x *Envelope) GetGameServerRegistrationRequest() *GameServerRegistrationMessage {
	if x, ok := x.GetMessage().(*Envelope_GameServerRegistrationRequest); ok {
		return x.GameServerRegistrationRequest
	}
	return nil
}

func (x *Envelope) GetGameServerRegistrationSuccess() *GameServerRegistrationSuccess {
	if x, ok := x.GetMessage().(*Envelope_GameServerRegistrationSuccess); ok {
		return x.GameServerRegistrationSuccess
	}
	return nil
}

func (x *Envelope) GetLobbySessionCreate() *LobbySessionCreateMessage {
	if x, ok := x.GetMessage().(*Envelope_LobbySessionCreate); ok {
		return x.LobbySessionCreate
	}
	return nil
}

func (x *Envelope) GetLobbySessionEvent() *LobbySessionEventMessage {
	if x, ok := x.GetMessage().(*Envelope_LobbySessionEvent); ok {
		return x.LobbySessionEvent
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantConnected() *LobbyEntrantsConnectedMessage {
	if x, ok := x.GetMessage().(*Envelope_LobbyEntrantConnected); ok {
		return x.LobbyEntrantConnected
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantsAccept() *LobbyEntrantsAcceptMessage {
	if x, ok := x.GetMessage().(*Envelope_LobbyEntrantsAccept); ok {
		return x.LobbyEntrantsAccept
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantsReject() *LobbyEntrantsRejectMessage {
	if x, ok := x.GetMessage().(*Envelope_LobbyEntrantsReject); ok {
		return x.LobbyEntrantsReject
	}
	return nil
}

func (x *Envelope) GetLobbyEntrantRemoved() *LobbyEntrantRemovedMessage {
	if x, ok := x.GetMessage().(*Envelope_LobbyEntrantRemoved); ok {
		return x.LobbyEntrantRemoved
	}
	return nil
}

type isEnvelope_Message interface {
	isEnvelope_Message()
}

type Envelope_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type Envelope_SessionUpdate struct {
	SessionUpdate *SessionUpdateMessage `protobuf:"bytes,3,opt,name=sessionUpdate,proto3,oneof"`
}

type Envelope_ConnectivityStatistics struct {
	ConnectivityStatistics *ConnectivityStatisticsMessage `protobuf:"bytes,4,opt,name=connectivityStatistics,proto3,oneof"`
}

type Envelope_GameServerRegistrationRequest struct {
	GameServerRegistrationRequest *GameServerRegistrationMessage `protobuf:"bytes,5,opt,name=gameServerRegistrationRequest,proto3,oneof"`
}

type Envelope_GameServerRegistrationSuccess struct {
	GameServerRegistrationSuccess *GameServerRegistrationSuccess `protobuf:"bytes,6,opt,name=gameServerRegistrationSuccess,proto3,oneof"`
}

type Envelope_LobbySessionCreate struct {
	LobbySessionCreate *LobbySessionCreateMessage `protobuf:"bytes,7,opt,name=lobbySessionCreate,proto3,oneof"`
}

type Envelope_LobbySessionEvent struct {
	LobbySessionEvent *LobbySessionEventMessage `protobuf:"bytes,8,opt,name=lobbySessionEvent,proto3,oneof"`
}

type Envelope_LobbyEntrantConnected struct {
	LobbyEntrantConnected *LobbyEntrantsConnectedMessage `protobuf:"bytes,9,opt,name=lobbyEntrantConnected,proto3,oneof"`
}

type Envelope_LobbyEntrantsAccept struct {
	LobbyEntrantsAccept *LobbyEntrantsAcceptMessage `protobuf:"bytes,10,opt,name=lobbyEntrantsAccept,proto3,oneof"`
}

type Envelope_LobbyEntrantsReject struct {
	LobbyEntrantsReject *LobbyEntrantsRejectMessage `protobuf:"bytes,11,opt,name=lobbyEntrantsReject,proto3,oneof"`
}

type Envelope_LobbyEntrantRemoved struct {
	LobbyEntrantRemoved *LobbyEntrantRemovedMessage `protobuf:"bytes,12,opt,name=lobbyEntrantRemoved,proto3,oneof"`
}

func (*Envelope_Error) isEnvelope_Message() {}

func (*Envelope_SessionUpdate) isEnvelope_Message() {}

func (*Envelope_ConnectivityStatistics) isEnvelope_Message() {}

func (*Envelope_GameServerRegistrationRequest) isEnvelope_Message() {}

func (*Envelope_GameServerRegistrationSuccess) isEnvelope_Message() {}

func (*Envelope_LobbySessionCreate) isEnvelope_Message() {}

func (*Envelope_LobbySessionEvent) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantConnected) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantsAccept) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantsReject) isEnvelope_Message() {}

func (*Envelope_LobbyEntrantRemoved) isEnvelope_Message() {}

// A logical error which may occur on the server.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code which should be one of "Error.Code" enums.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message in English to help developers debug the response.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Additional error details which may be different for each response.
	Context map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

// LobbySessionEntrantJoinMessage is sent from the server to the service.
type LobbySessionEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbySessionId string `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	Code           int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *LobbySessionEventMessage) Reset() {
	*x = LobbySessionEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbySessionEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionEventMessage) ProtoMessage() {}

func (x *LobbySessionEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionEventMessage.ProtoReflect.Descriptor instead.
func (*LobbySessionEventMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{2}
}

func (x *LobbySessionEventMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbySessionEventMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Registration request sent from the server to the service.
type GameServerRegistrationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginSessionId    string `protobuf:"bytes,1,opt,name=login_session_id,json=loginSessionId,proto3" json:"login_session_id,omitempty"`
	ServerId          uint64 `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	InternalIpAddress string `protobuf:"bytes,3,opt,name=internal_ip_address,json=internalIpAddress,proto3" json:"internal_ip_address,omitempty"`
	Port              uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Region            uint64 `protobuf:"varint,5,opt,name=region,proto3" json:"region,omitempty"`
	VersionLock       uint64 `protobuf:"varint,6,opt,name=version_lock,json=versionLock,proto3" json:"version_lock,omitempty"`
	TimeStepUsecs     uint32 `protobuf:"varint,7,opt,name=time_step_usecs,json=timeStepUsecs,proto3" json:"time_step_usecs,omitempty"`
	Version           string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GameServerRegistrationMessage) Reset() {
	*x = GameServerRegistrationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerRegistrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerRegistrationMessage) ProtoMessage() {}

func (x *GameServerRegistrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerRegistrationMessage.ProtoReflect.Descriptor instead.
func (*GameServerRegistrationMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{3}
}

func (x *GameServerRegistrationMessage) GetLoginSessionId() string {
	if x != nil {
		return x.LoginSessionId
	}
	return ""
}

func (x *GameServerRegistrationMessage) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetInternalIpAddress() string {
	if x != nil {
		return x.InternalIpAddress
	}
	return ""
}

func (x *GameServerRegistrationMessage) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetRegion() uint64 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetVersionLock() uint64 {
	if x != nil {
		return x.VersionLock
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetTimeStepUsecs() uint32 {
	if x != nil {
		return x.TimeStepUsecs
	}
	return 0
}

func (x *GameServerRegistrationMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Registration success message is sent from the service to the server.
type GameServerRegistrationSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId          uint64 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`                             // The server ID assigned by the server
	ExternalIpAddress string `protobuf:"bytes,2,opt,name=external_ip_address,json=externalIpAddress,proto3" json:"external_ip_address,omitempty"` // The external address of the server (ip)
}

func (x *GameServerRegistrationSuccess) Reset() {
	*x = GameServerRegistrationSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerRegistrationSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerRegistrationSuccess) ProtoMessage() {}

func (x *GameServerRegistrationSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerRegistrationSuccess.ProtoReflect.Descriptor instead.
func (*GameServerRegistrationSuccess) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{4}
}

func (x *GameServerRegistrationSuccess) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GameServerRegistrationSuccess) GetExternalIpAddress() string {
	if x != nil {
		return x.ExternalIpAddress
	}
	return ""
}

// Entrant connect message is sent from the server to the service.
type LobbyEntrantsConnectedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbySessionId string   `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	EntrantIds     []string `protobuf:"bytes,2,rep,name=entrant_ids,json=entrantIds,proto3" json:"entrant_ids,omitempty"`
}

func (x *LobbyEntrantsConnectedMessage) Reset() {
	*x = LobbyEntrantsConnectedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyEntrantsConnectedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantsConnectedMessage) ProtoMessage() {}

func (x *LobbyEntrantsConnectedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantsConnectedMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantsConnectedMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{5}
}

func (x *LobbyEntrantsConnectedMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbyEntrantsConnectedMessage) GetEntrantIds() []string {
	if x != nil {
		return x.EntrantIds
	}
	return nil
}

// Entrant accept message is sent from the service to the server.
type LobbyEntrantsAcceptMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntrantIds []string `protobuf:"bytes,1,rep,name=entrant_ids,json=entrantIds,proto3" json:"entrant_ids,omitempty"`
}

func (x *LobbyEntrantsAcceptMessage) Reset() {
	*x = LobbyEntrantsAcceptMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyEntrantsAcceptMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantsAcceptMessage) ProtoMessage() {}

func (x *LobbyEntrantsAcceptMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantsAcceptMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantsAcceptMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{6}
}

func (x *LobbyEntrantsAcceptMessage) GetEntrantIds() []string {
	if x != nil {
		return x.EntrantIds
	}
	return nil
}

// Entrant rejection message is sent from the server to the service.
type LobbyEntrantsRejectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntrantIds []string `protobuf:"bytes,1,rep,name=entrant_ids,json=entrantIds,proto3" json:"entrant_ids,omitempty"`
	Code       int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"` // Optional reason for rejection
}

func (x *LobbyEntrantsRejectMessage) Reset() {
	*x = LobbyEntrantsRejectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyEntrantsRejectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantsRejectMessage) ProtoMessage() {}

func (x *LobbyEntrantsRejectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantsRejectMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantsRejectMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{7}
}

func (x *LobbyEntrantsRejectMessage) GetEntrantIds() []string {
	if x != nil {
		return x.EntrantIds
	}
	return nil
}

func (x *LobbyEntrantsRejectMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Entrant rejection message is sent from the server to the service.
type LobbyEntrantRemovedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbySessionId string `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	EntrantId      string `protobuf:"bytes,2,opt,name=entrant_id,json=entrantId,proto3" json:"entrant_id,omitempty"`
	Code           int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"` // Optional reason for rejection
}

func (x *LobbyEntrantRemovedMessage) Reset() {
	*x = LobbyEntrantRemovedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyEntrantRemovedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEntrantRemovedMessage) ProtoMessage() {}

func (x *LobbyEntrantRemovedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEntrantRemovedMessage.ProtoReflect.Descriptor instead.
func (*LobbyEntrantRemovedMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{8}
}

func (x *LobbyEntrantRemovedMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbyEntrantRemovedMessage) GetEntrantId() string {
	if x != nil {
		return x.EntrantId
	}
	return ""
}

func (x *LobbyEntrantRemovedMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type LobbySessionCreateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbySessionId string   `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	LobbyType      int32    `protobuf:"varint,2,opt,name=lobby_type,json=lobbyType,proto3" json:"lobby_type,omitempty"`
	GroupId        string   `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MaxEntrants    int32    `protobuf:"varint,4,opt,name=max_entrants,json=maxEntrants,proto3" json:"max_entrants,omitempty"`
	SettingsJson   string   `protobuf:"bytes,5,opt,name=settings_json,json=settingsJson,proto3" json:"settings_json,omitempty"`
	Features       []string `protobuf:"bytes,6,rep,name=features,proto3" json:"features,omitempty"`
	TimeStepUsecs  uint32   `protobuf:"varint,7,opt,name=time_step_usecs,json=timeStepUsecs,proto3" json:"time_step_usecs,omitempty"`
}

func (x *LobbySessionCreateMessage) Reset() {
	*x = LobbySessionCreateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbySessionCreateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionCreateMessage) ProtoMessage() {}

func (x *LobbySessionCreateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionCreateMessage.ProtoReflect.Descriptor instead.
func (*LobbySessionCreateMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{9}
}

func (x *LobbySessionCreateMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *LobbySessionCreateMessage) GetLobbyType() int32 {
	if x != nil {
		return x.LobbyType
	}
	return 0
}

func (x *LobbySessionCreateMessage) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *LobbySessionCreateMessage) GetMaxEntrants() int32 {
	if x != nil {
		return x.MaxEntrants
	}
	return 0
}

func (x *LobbySessionCreateMessage) GetSettingsJson() string {
	if x != nil {
		return x.SettingsJson
	}
	return ""
}

func (x *LobbySessionCreateMessage) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *LobbySessionCreateMessage) GetTimeStepUsecs() uint32 {
	if x != nil {
		return x.TimeStepUsecs
	}
	return 0
}

// SessionUpdateMessage is sent from the server to the game service.
type SessionUpdateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbySessionId string                     `protobuf:"bytes,1,opt,name=lobby_session_id,json=lobbySessionId,proto3" json:"lobby_session_id,omitempty"`
	TimeStepUsecs  uint32                     `protobuf:"varint,2,opt,name=time_step_usecs,json=timeStepUsecs,proto3" json:"time_step_usecs,omitempty"`
	TickCount      uint64                     `protobuf:"varint,3,opt,name=tick_count,json=tickCount,proto3" json:"tick_count,omitempty"`
	EntrantCount   uint64                     `protobuf:"varint,4,opt,name=entrant_count,json=entrantCount,proto3" json:"entrant_count,omitempty"`
	Timestamp      *timestamppb.Timestamp     `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Session        *gameapi.SessionResponse   `protobuf:"bytes,6,opt,name=session,json=session_data,proto3" json:"session,omitempty"`
	UserBones      *gameapi.UserBonesResponse `protobuf:"bytes,7,opt,name=user_bones,proto3" json:"user_bones,omitempty"`
}

func (x *SessionUpdateMessage) Reset() {
	*x = SessionUpdateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateMessage) ProtoMessage() {}

func (x *SessionUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateMessage.ProtoReflect.Descriptor instead.
func (*SessionUpdateMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{10}
}

func (x *SessionUpdateMessage) GetLobbySessionId() string {
	if x != nil {
		return x.LobbySessionId
	}
	return ""
}

func (x *SessionUpdateMessage) GetTimeStepUsecs() uint32 {
	if x != nil {
		return x.TimeStepUsecs
	}
	return 0
}

func (x *SessionUpdateMessage) GetTickCount() uint64 {
	if x != nil {
		return x.TickCount
	}
	return 0
}

func (x *SessionUpdateMessage) GetEntrantCount() uint64 {
	if x != nil {
		return x.EntrantCount
	}
	return 0
}

func (x *SessionUpdateMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SessionUpdateMessage) GetSession() *gameapi.SessionResponse {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SessionUpdateMessage) GetUserBones() *gameapi.UserBonesResponse {
	if x != nil {
		return x.UserBones
	}
	return nil
}

// ConnectivityStatsMessage is a structure normally only seen in the r14logs
type ConnectivityStatisticsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketLossRatio    float32 `protobuf:"fixed32,1,opt,name=packet_loss_ratio,json=packetLossRatio,proto3" json:"packet_loss_ratio,omitempty"`
	PredictionOffset   uint64  `protobuf:"varint,2,opt,name=prediction_offset,json=predictionOffset,proto3" json:"prediction_offset,omitempty"`
	Target             uint64  `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	LocalTime          uint64  `protobuf:"varint,4,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	ServerTime         uint64  `protobuf:"varint,5,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	PendingServerDelta int64   `protobuf:"varint,6,opt,name=pending_server_delta,json=pendingServerDelta,proto3" json:"pending_server_delta,omitempty"`
	DiscardedFramePct  float32 `protobuf:"fixed32,7,opt,name=discarded_frame_pct,json=discardedFramePct,proto3" json:"discarded_frame_pct,omitempty"`
}

func (x *ConnectivityStatisticsMessage) Reset() {
	*x = ConnectivityStatisticsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectivityStatisticsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectivityStatisticsMessage) ProtoMessage() {}

func (x *ConnectivityStatisticsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectivityStatisticsMessage.ProtoReflect.Descriptor instead.
func (*ConnectivityStatisticsMessage) Descriptor() ([]byte, []int) {
	return file_rtapi_proto_rawDescGZIP(), []int{11}
}

func (x *ConnectivityStatisticsMessage) GetPacketLossRatio() float32 {
	if x != nil {
		return x.PacketLossRatio
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetPredictionOffset() uint64 {
	if x != nil {
		return x.PredictionOffset
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetLocalTime() uint64 {
	if x != nil {
		return x.LocalTime
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetServerTime() uint64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetPendingServerDelta() int64 {
	if x != nil {
		return x.PendingServerDelta
	}
	return 0
}

func (x *ConnectivityStatisticsMessage) GetDiscardedFramePct() float32 {
	if x != nil {
		return x.DiscardedFramePct
	}
	return 0
}

var File_rtapi_proto protoreflect.FileDescriptor

var file_rtapi_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e,
	0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x1a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x08, 0x0a, 0x08, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72,
	0x74, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x76,
	0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x71, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x76, 0x72,
	0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e,
	0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x54, 0x0a, 0x11, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e,
	0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x15, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72, 0x74,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72,
	0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x52, 0x45, 0x43,
	0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x22, 0x92, 0x01, 0x0a, 0x18,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03,
	0x22, 0xa7, 0x02, 0x0a, 0x1d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x55, 0x73, 0x65, 0x63, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x1d, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x1d, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x1a, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x1a, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x09, 0x22, 0xa5, 0x02, 0x0a, 0x1a, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x4f, 0x42, 0x42, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09, 0x22, 0xb1, 0x02, 0x0a, 0x19,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x75,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x55, 0x73, 0x65, 0x63, 0x73, 0x22, 0x24, 0x0a, 0x09, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x22,
	0xe5, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x55, 0x73, 0x65, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x76, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x76,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x63, 0x74, 0x42, 0x62, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x6e, 0x65,
	0x76, 0x72, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x42, 0x0c, 0x4e, 0x65, 0x76, 0x72, 0x52, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6e,
	0x65, 0x76, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x74, 0x61, 0x70, 0x69,
	0xaa, 0x02, 0x0d, 0x4e, 0x65, 0x76, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rtapi_proto_rawDescOnce sync.Once
	file_rtapi_proto_rawDescData = file_rtapi_proto_rawDesc
)

func file_rtapi_proto_rawDescGZIP() []byte {
	file_rtapi_proto_rawDescOnce.Do(func() {
		file_rtapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtapi_proto_rawDescData)
	})
	return file_rtapi_proto_rawDescData
}

var file_rtapi_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_rtapi_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_rtapi_proto_goTypes = []interface{}{
	(Error_Code)(0),                          // 0: nevr.rtapi.Error.Code
	(LobbySessionEventMessage_Code)(0),       // 1: nevr.rtapi.LobbySessionEventMessage.Code
	(LobbyEntrantsRejectMessage_Code)(0),     // 2: nevr.rtapi.LobbyEntrantsRejectMessage.Code
	(LobbyEntrantRemovedMessage_Code)(0),     // 3: nevr.rtapi.LobbyEntrantRemovedMessage.Code
	(LobbySessionCreateMessage_LobbyType)(0), // 4: nevr.rtapi.LobbySessionCreateMessage.LobbyType
	(*Envelope)(nil),                         // 5: nevr.rtapi.Envelope
	(*Error)(nil),                            // 6: nevr.rtapi.Error
	(*LobbySessionEventMessage)(nil),         // 7: nevr.rtapi.LobbySessionEventMessage
	(*GameServerRegistrationMessage)(nil),    // 8: nevr.rtapi.GameServerRegistrationMessage
	(*GameServerRegistrationSuccess)(nil),    // 9: nevr.rtapi.GameServerRegistrationSuccess
	(*LobbyEntrantsConnectedMessage)(nil),    // 10: nevr.rtapi.LobbyEntrantsConnectedMessage
	(*LobbyEntrantsAcceptMessage)(nil),       // 11: nevr.rtapi.LobbyEntrantsAcceptMessage
	(*LobbyEntrantsRejectMessage)(nil),       // 12: nevr.rtapi.LobbyEntrantsRejectMessage
	(*LobbyEntrantRemovedMessage)(nil),       // 13: nevr.rtapi.LobbyEntrantRemovedMessage
	(*LobbySessionCreateMessage)(nil),        // 14: nevr.rtapi.LobbySessionCreateMessage
	(*SessionUpdateMessage)(nil),             // 15: nevr.rtapi.SessionUpdateMessage
	(*ConnectivityStatisticsMessage)(nil),    // 16: nevr.rtapi.ConnectivityStatisticsMessage
	nil,                                      // 17: nevr.rtapi.Error.ContextEntry
	(*timestamppb.Timestamp)(nil),            // 18: google.protobuf.Timestamp
	(*gameapi.SessionResponse)(nil),          // 19: nevr.gameapi.SessionResponse
	(*gameapi.UserBonesResponse)(nil),        // 20: nevr.gameapi.UserBonesResponse
}
var file_rtapi_proto_depIdxs = []int32{
	6,  // 0: nevr.rtapi.Envelope.error:type_name -> nevr.rtapi.Error
	15, // 1: nevr.rtapi.Envelope.sessionUpdate:type_name -> nevr.rtapi.SessionUpdateMessage
	16, // 2: nevr.rtapi.Envelope.connectivityStatistics:type_name -> nevr.rtapi.ConnectivityStatisticsMessage
	8,  // 3: nevr.rtapi.Envelope.gameServerRegistrationRequest:type_name -> nevr.rtapi.GameServerRegistrationMessage
	9,  // 4: nevr.rtapi.Envelope.gameServerRegistrationSuccess:type_name -> nevr.rtapi.GameServerRegistrationSuccess
	14, // 5: nevr.rtapi.Envelope.lobbySessionCreate:type_name -> nevr.rtapi.LobbySessionCreateMessage
	7,  // 6: nevr.rtapi.Envelope.lobbySessionEvent:type_name -> nevr.rtapi.LobbySessionEventMessage
	10, // 7: nevr.rtapi.Envelope.lobbyEntrantConnected:type_name -> nevr.rtapi.LobbyEntrantsConnectedMessage
	11, // 8: nevr.rtapi.Envelope.lobbyEntrantsAccept:type_name -> nevr.rtapi.LobbyEntrantsAcceptMessage
	12, // 9: nevr.rtapi.Envelope.lobbyEntrantsReject:type_name -> nevr.rtapi.LobbyEntrantsRejectMessage
	13, // 10: nevr.rtapi.Envelope.lobbyEntrantRemoved:type_name -> nevr.rtapi.LobbyEntrantRemovedMessage
	17, // 11: nevr.rtapi.Error.context:type_name -> nevr.rtapi.Error.ContextEntry
	18, // 12: nevr.rtapi.SessionUpdateMessage.timestamp:type_name -> google.protobuf.Timestamp
	19, // 13: nevr.rtapi.SessionUpdateMessage.session:type_name -> nevr.gameapi.SessionResponse
	20, // 14: nevr.rtapi.SessionUpdateMessage.user_bones:type_name -> nevr.gameapi.UserBonesResponse
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_rtapi_proto_init() }
func file_rtapi_proto_init() {
	if File_rtapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rtapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbySessionEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerRegistrationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerRegistrationSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyEntrantsConnectedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyEntrantsAcceptMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyEntrantsRejectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyEntrantRemovedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbySessionCreateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectivityStatisticsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rtapi_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Envelope_Error)(nil),
		(*Envelope_SessionUpdate)(nil),
		(*Envelope_ConnectivityStatistics)(nil),
		(*Envelope_GameServerRegistrationRequest)(nil),
		(*Envelope_GameServerRegistrationSuccess)(nil),
		(*Envelope_LobbySessionCreate)(nil),
		(*Envelope_LobbySessionEvent)(nil),
		(*Envelope_LobbyEntrantConnected)(nil),
		(*Envelope_LobbyEntrantsAccept)(nil),
		(*Envelope_LobbyEntrantsReject)(nil),
		(*Envelope_LobbyEntrantRemoved)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtapi_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rtapi_proto_goTypes,
		DependencyIndexes: file_rtapi_proto_depIdxs,
		EnumInfos:         file_rtapi_proto_enumTypes,
		MessageInfos:      file_rtapi_proto_msgTypes,
	}.Build()
	File_rtapi_proto = out.File
	file_rtapi_proto_rawDesc = nil
	file_rtapi_proto_goTypes = nil
	file_rtapi_proto_depIdxs = nil
}
