// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nevr_api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nevr.Protobuf {

  /// <summary>Holder for reflection information generated from nevr_api.proto</summary>
  public static partial class NevrApiReflection {

    #region Descriptor
    /// <summary>File descriptor for nevr_api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NevrApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5uZXZyX2FwaS5wcm90bxIIbmV2ci5hcGkaH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90",
            "byKVAwoTUHJlcGFyZU1hdGNoUmVxdWVzdBIMCgRtb2RlGAEgASgJEg4KBnJl",
            "Z2lvbhgCIAEoCRINCgVsZXZlbBgDIAEoCRIuCgl0ZWFtX3NpemUYBCABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIvCgtleHBpcnlfdGltZRgF",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEAoIb3duZXJfaWQY",
            "BiABKAkSEAoIZ3JvdXBfaWQYByABKAkSGQoRcmVxdWlyZWRfZmVhdHVyZXMY",
            "CCADKAkSSgoPdGVhbV9hbGlnbm1lbnRzGAkgAygLMjEubmV2ci5hcGkuUHJl",
            "cGFyZU1hdGNoUmVxdWVzdC5UZWFtQWxpZ25tZW50c0VudHJ5Ei4KCXRpY2tf",
            "cmF0ZRgKIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlGjUKE1Rl",
            "YW1BbGlnbm1lbnRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4AUJjCh1jb20uZ2l0aHViLmVjaG90b29scy5uZXZyLmFwaUIHTmV2ckFw",
            "aVABWidnaXRodWIuY29tL2VjaG90b29scy9uZXZyLWNvbW1vbi92My9hcGmq",
            "Ag1OZXZyLlByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.PrepareMatchRequest), global::Nevr.Protobuf.PrepareMatchRequest.Parser, new[]{ "Mode", "Region", "Level", "TeamSize", "ExpiryTime", "OwnerId", "GroupId", "RequiredFeatures", "TeamAlignments", "TickRate" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A request to prepare a match for users to join.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PrepareMatchRequest : pb::IMessage<PrepareMatchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PrepareMatchRequest> _parser = new pb::MessageParser<PrepareMatchRequest>(() => new PrepareMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PrepareMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrepareMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrepareMatchRequest(PrepareMatchRequest other) : this() {
      mode_ = other.mode_;
      region_ = other.region_;
      level_ = other.level_;
      TeamSize = other.TeamSize;
      expiryTime_ = other.expiryTime_ != null ? other.expiryTime_.Clone() : null;
      ownerId_ = other.ownerId_;
      groupId_ = other.groupId_;
      requiredFeatures_ = other.requiredFeatures_.Clone();
      teamAlignments_ = other.teamAlignments_.Clone();
      TickRate = other.TickRate;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrepareMatchRequest Clone() {
      return new PrepareMatchRequest(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private string mode_ = "";
    /// <summary>
    /// The match mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 2;
    private string region_ = "";
    /// <summary>
    /// The region where the match will be prepared (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private string level_ = "";
    /// <summary>
    /// The level for the match (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Level {
      get { return level_; }
      set {
        level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_size" field.</summary>
    public const int TeamSizeFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_teamSize_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? teamSize_;
    /// <summary>
    /// The size of each team in the match (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int? TeamSize {
      get { return teamSize_; }
      set {
        teamSize_ = value;
      }
    }


    /// <summary>Field number for the "expiry_time" field.</summary>
    public const int ExpiryTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryTime_;
    /// <summary>
    /// The time the match is scheduled to start (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = value;
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 6;
    private string ownerId_ = "";
    /// <summary>
    /// The user ID of the user who will own the match (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 7;
    private string groupId_ = "";
    /// <summary>
    /// The group ID of the guild where the match will be spawned (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "required_features" field.</summary>
    public const int RequiredFeaturesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_requiredFeatures_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> requiredFeatures_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The features required for the match (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> RequiredFeatures {
      get { return requiredFeatures_; }
    }

    /// <summary>Field number for the "team_alignments" field.</summary>
    public const int TeamAlignmentsFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_teamAlignments_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 74);
    private readonly pbc::MapField<string, string> teamAlignments_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Mapping user IDs to blue or orange (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> TeamAlignments {
      get { return teamAlignments_; }
    }

    /// <summary>Field number for the "tick_rate" field.</summary>
    public const int TickRateFieldNumber = 10;
    private static readonly pb::FieldCodec<int?> _single_tickRate_codec = pb::FieldCodec.ForStructWrapper<int>(82);
    private int? tickRate_;
    /// <summary>
    /// Tick Rate of the match in Hz (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int? TickRate {
      get { return tickRate_; }
      set {
        tickRate_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PrepareMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PrepareMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Region != other.Region) return false;
      if (Level != other.Level) return false;
      if (TeamSize != other.TeamSize) return false;
      if (!object.Equals(ExpiryTime, other.ExpiryTime)) return false;
      if (OwnerId != other.OwnerId) return false;
      if (GroupId != other.GroupId) return false;
      if(!requiredFeatures_.Equals(other.requiredFeatures_)) return false;
      if (!TeamAlignments.Equals(other.TeamAlignments)) return false;
      if (TickRate != other.TickRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Level.Length != 0) hash ^= Level.GetHashCode();
      if (teamSize_ != null) hash ^= TeamSize.GetHashCode();
      if (expiryTime_ != null) hash ^= ExpiryTime.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= requiredFeatures_.GetHashCode();
      hash ^= TeamAlignments.GetHashCode();
      if (tickRate_ != null) hash ^= TickRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mode);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Region);
      }
      if (Level.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Level);
      }
      if (teamSize_ != null) {
        _single_teamSize_codec.WriteTagAndValue(output, TeamSize);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExpiryTime);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OwnerId);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GroupId);
      }
      requiredFeatures_.WriteTo(output, _repeated_requiredFeatures_codec);
      teamAlignments_.WriteTo(output, _map_teamAlignments_codec);
      if (tickRate_ != null) {
        _single_tickRate_codec.WriteTagAndValue(output, TickRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mode);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Region);
      }
      if (Level.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Level);
      }
      if (teamSize_ != null) {
        _single_teamSize_codec.WriteTagAndValue(ref output, TeamSize);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExpiryTime);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OwnerId);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GroupId);
      }
      requiredFeatures_.WriteTo(ref output, _repeated_requiredFeatures_codec);
      teamAlignments_.WriteTo(ref output, _map_teamAlignments_codec);
      if (tickRate_ != null) {
        _single_tickRate_codec.WriteTagAndValue(ref output, TickRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Level.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
      }
      if (teamSize_ != null) {
        size += _single_teamSize_codec.CalculateSizeWithTag(TeamSize);
      }
      if (expiryTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryTime);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += requiredFeatures_.CalculateSize(_repeated_requiredFeatures_codec);
      size += teamAlignments_.CalculateSize(_map_teamAlignments_codec);
      if (tickRate_ != null) {
        size += _single_tickRate_codec.CalculateSizeWithTag(TickRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PrepareMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Level.Length != 0) {
        Level = other.Level;
      }
      if (other.teamSize_ != null) {
        if (teamSize_ == null || other.TeamSize != 0) {
          TeamSize = other.TeamSize;
        }
      }
      if (other.expiryTime_ != null) {
        if (expiryTime_ == null) {
          ExpiryTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryTime.MergeFrom(other.ExpiryTime);
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      requiredFeatures_.Add(other.requiredFeatures_);
      teamAlignments_.MergeFrom(other.teamAlignments_);
      if (other.tickRate_ != null) {
        if (tickRate_ == null || other.TickRate != 0) {
          TickRate = other.TickRate;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Mode = input.ReadString();
            break;
          }
          case 18: {
            Region = input.ReadString();
            break;
          }
          case 26: {
            Level = input.ReadString();
            break;
          }
          case 34: {
            int? value = _single_teamSize_codec.Read(input);
            if (teamSize_ == null || value != 0) {
              TeamSize = value;
            }
            break;
          }
          case 42: {
            if (expiryTime_ == null) {
              ExpiryTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryTime);
            break;
          }
          case 50: {
            OwnerId = input.ReadString();
            break;
          }
          case 58: {
            GroupId = input.ReadString();
            break;
          }
          case 66: {
            requiredFeatures_.AddEntriesFrom(input, _repeated_requiredFeatures_codec);
            break;
          }
          case 74: {
            teamAlignments_.AddEntriesFrom(input, _map_teamAlignments_codec);
            break;
          }
          case 82: {
            int? value = _single_tickRate_codec.Read(input);
            if (tickRate_ == null || value != 0) {
              TickRate = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Mode = input.ReadString();
            break;
          }
          case 18: {
            Region = input.ReadString();
            break;
          }
          case 26: {
            Level = input.ReadString();
            break;
          }
          case 34: {
            int? value = _single_teamSize_codec.Read(ref input);
            if (teamSize_ == null || value != 0) {
              TeamSize = value;
            }
            break;
          }
          case 42: {
            if (expiryTime_ == null) {
              ExpiryTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryTime);
            break;
          }
          case 50: {
            OwnerId = input.ReadString();
            break;
          }
          case 58: {
            GroupId = input.ReadString();
            break;
          }
          case 66: {
            requiredFeatures_.AddEntriesFrom(ref input, _repeated_requiredFeatures_codec);
            break;
          }
          case 74: {
            teamAlignments_.AddEntriesFrom(ref input, _map_teamAlignments_codec);
            break;
          }
          case 82: {
            int? value = _single_tickRate_codec.Read(ref input);
            if (tickRate_ == null || value != 0) {
              TickRate = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
