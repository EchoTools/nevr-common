//*
// The NEVR service RPC protocol for the client, servers, and apps.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: nevr_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request to prepare a match for users to join.
type PrepareMatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The match mode.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// The region where the match will be prepared (optional).
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// The level for the match (optional).
	Level string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	// The size of each team in the match (optional).
	TeamSize *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=team_size,json=teamSize,proto3" json:"team_size,omitempty"`
	// The time the match is scheduled to start (optional)
	ExpiryTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// The user ID of the user who will own the match (optional).
	OwnerId string `protobuf:"bytes,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// The group ID of the guild where the match will be spawned (optional).
	GroupId string `protobuf:"bytes,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The features required for the match (optional).
	RequiredFeatures []string `protobuf:"bytes,8,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
	// Mapping user IDs to blue or orange (optional)
	TeamAlignments map[string]string `protobuf:"bytes,9,rep,name=team_alignments,json=teamAlignments,proto3" json:"team_alignments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tick Rate of the match in Hz (optional)
	TickRate      *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=tick_rate,json=tickRate,proto3" json:"tick_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareMatchRequest) Reset() {
	*x = PrepareMatchRequest{}
	mi := &file_nevr_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMatchRequest) ProtoMessage() {}

func (x *PrepareMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMatchRequest.ProtoReflect.Descriptor instead.
func (*PrepareMatchRequest) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareMatchRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PrepareMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PrepareMatchRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *PrepareMatchRequest) GetTeamSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.TeamSize
	}
	return nil
}

func (x *PrepareMatchRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *PrepareMatchRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *PrepareMatchRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *PrepareMatchRequest) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *PrepareMatchRequest) GetTeamAlignments() map[string]string {
	if x != nil {
		return x.TeamAlignments
	}
	return nil
}

func (x *PrepareMatchRequest) GetTickRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.TickRate
	}
	return nil
}

// AccountLookupRequest is a request to look up user accounts by various
// identifiers.
type GetPlayersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Nakama username or Discord username.
	Usernames []string `protobuf:"bytes,1,rep,name=usernames,proto3" json:"usernames,omitempty"`
	// The Nakama user UUIDs.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// The Discord IDs (snowflakes).
	DiscordIds []string `protobuf:"bytes,3,rep,name=discord_ids,json=discordIds,proto3" json:"discord_ids,omitempty"`
	// The OVR-ORG-123412341234 XPIDs.
	XpIds []string `protobuf:"bytes,4,rep,name=xp_ids,json=xpIds,proto3" json:"xp_ids,omitempty"`
	// The active display names (may be unreliable).
	DisplayNames  []string `protobuf:"bytes,5,rep,name=display_names,json=displayNames,proto3" json:"display_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayersRequest) Reset() {
	*x = GetPlayersRequest{}
	mi := &file_nevr_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayersRequest) ProtoMessage() {}

func (x *GetPlayersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayersRequest.ProtoReflect.Descriptor instead.
func (*GetPlayersRequest) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetPlayersRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *GetPlayersRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetPlayersRequest) GetDiscordIds() []string {
	if x != nil {
		return x.DiscordIds
	}
	return nil
}

func (x *GetPlayersRequest) GetXpIds() []string {
	if x != nil {
		return x.XpIds
	}
	return nil
}

func (x *GetPlayersRequest) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

// LobbySessionRedirect specifies how to redirect a player to a specific session in the lobby.
type LobbySessionRedirect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Target:
	//
	//	*LobbySessionRedirect_User
	//	*LobbySessionRedirect_GuildMember
	//	*LobbySessionRedirect_DiscordUser
	//	*LobbySessionRedirect_Match
	Target        isLobbySessionRedirect_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbySessionRedirect) Reset() {
	*x = LobbySessionRedirect{}
	mi := &file_nevr_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionRedirect) ProtoMessage() {}

func (x *LobbySessionRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionRedirect.ProtoReflect.Descriptor instead.
func (*LobbySessionRedirect) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{2}
}

func (x *LobbySessionRedirect) GetTarget() isLobbySessionRedirect_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *LobbySessionRedirect) GetUser() *LobbySessionRedirectUserID {
	if x != nil {
		if x, ok := x.Target.(*LobbySessionRedirect_User); ok {
			return x.User
		}
	}
	return nil
}

func (x *LobbySessionRedirect) GetGuildMember() *LobbySessionRedirectGuildMember {
	if x != nil {
		if x, ok := x.Target.(*LobbySessionRedirect_GuildMember); ok {
			return x.GuildMember
		}
	}
	return nil
}

func (x *LobbySessionRedirect) GetDiscordUser() *LobbySessionRedirectDiscordUser {
	if x != nil {
		if x, ok := x.Target.(*LobbySessionRedirect_DiscordUser); ok {
			return x.DiscordUser
		}
	}
	return nil
}

func (x *LobbySessionRedirect) GetMatch() *LobbySessionRedirectMatch {
	if x != nil {
		if x, ok := x.Target.(*LobbySessionRedirect_Match); ok {
			return x.Match
		}
	}
	return nil
}

type isLobbySessionRedirect_Target interface {
	isLobbySessionRedirect_Target()
}

type LobbySessionRedirect_User struct {
	// Redirect to a user by NEVR user ID.
	User *LobbySessionRedirectUserID `protobuf:"bytes,1,opt,name=user,proto3,oneof"`
}

type LobbySessionRedirect_GuildMember struct {
	// Redirect to a guild member by guild and Discord ID.
	GuildMember *LobbySessionRedirectGuildMember `protobuf:"bytes,2,opt,name=guild_member,json=guildMember,proto3,oneof"`
}

type LobbySessionRedirect_DiscordUser struct {
	// Redirect to a Discord user by Discord ID.
	DiscordUser *LobbySessionRedirectDiscordUser `protobuf:"bytes,3,opt,name=discord_user,json=discordUser,proto3,oneof"`
}

type LobbySessionRedirect_Match struct {
	// Redirect to a match by match ID.
	Match *LobbySessionRedirectMatch `protobuf:"bytes,4,opt,name=match,proto3,oneof"`
}

func (*LobbySessionRedirect_User) isLobbySessionRedirect_Target() {}

func (*LobbySessionRedirect_GuildMember) isLobbySessionRedirect_Target() {}

func (*LobbySessionRedirect_DiscordUser) isLobbySessionRedirect_Target() {}

func (*LobbySessionRedirect_Match) isLobbySessionRedirect_Target() {}

// Redirect to a user by NEVR user ID.
type LobbySessionRedirectUserID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbySessionRedirectUserID) Reset() {
	*x = LobbySessionRedirectUserID{}
	mi := &file_nevr_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionRedirectUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionRedirectUserID) ProtoMessage() {}

func (x *LobbySessionRedirectUserID) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionRedirectUserID.ProtoReflect.Descriptor instead.
func (*LobbySessionRedirectUserID) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{3}
}

func (x *LobbySessionRedirectUserID) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Redirect to a guild member by guild and Discord ID.
type LobbySessionRedirectGuildMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuildId       string                 `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	DiscordId     string                 `protobuf:"bytes,2,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbySessionRedirectGuildMember) Reset() {
	*x = LobbySessionRedirectGuildMember{}
	mi := &file_nevr_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionRedirectGuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionRedirectGuildMember) ProtoMessage() {}

func (x *LobbySessionRedirectGuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionRedirectGuildMember.ProtoReflect.Descriptor instead.
func (*LobbySessionRedirectGuildMember) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{4}
}

func (x *LobbySessionRedirectGuildMember) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *LobbySessionRedirectGuildMember) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

// Redirect to a Discord user by Discord ID.
type LobbySessionRedirectDiscordUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DiscordId     string                 `protobuf:"bytes,1,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbySessionRedirectDiscordUser) Reset() {
	*x = LobbySessionRedirectDiscordUser{}
	mi := &file_nevr_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionRedirectDiscordUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionRedirectDiscordUser) ProtoMessage() {}

func (x *LobbySessionRedirectDiscordUser) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionRedirectDiscordUser.ProtoReflect.Descriptor instead.
func (*LobbySessionRedirectDiscordUser) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{5}
}

func (x *LobbySessionRedirectDiscordUser) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

// Redirect to a match by match ID.
type LobbySessionRedirectMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbySessionRedirectMatch) Reset() {
	*x = LobbySessionRedirectMatch{}
	mi := &file_nevr_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionRedirectMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionRedirectMatch) ProtoMessage() {}

func (x *LobbySessionRedirectMatch) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionRedirectMatch.ProtoReflect.Descriptor instead.
func (*LobbySessionRedirectMatch) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{6}
}

func (x *LobbySessionRedirectMatch) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

var File_nevr_api_proto protoreflect.FileDescriptor

const file_nevr_api_proto_rawDesc = "" +
	"\n" +
	"\x0enevr_api.proto\x12\bnevr.api\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\x8a\x04\n" +
	"\x13PrepareMatchRequest\x12\x12\n" +
	"\x04mode\x18\x01 \x01(\tR\x04mode\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\x12\x14\n" +
	"\x05level\x18\x03 \x01(\tR\x05level\x128\n" +
	"\tteam_size\x18\x04 \x01(\v2\x1b.google.protobuf.Int32ValueR\bteamSize\x12;\n" +
	"\vexpiry_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiryTime\x12\x19\n" +
	"\bowner_id\x18\x06 \x01(\tR\aownerId\x12\x19\n" +
	"\bgroup_id\x18\a \x01(\tR\agroupId\x12+\n" +
	"\x11required_features\x18\b \x03(\tR\x10requiredFeatures\x12Z\n" +
	"\x0fteam_alignments\x18\t \x03(\v21.nevr.api.PrepareMatchRequest.TeamAlignmentsEntryR\x0eteamAlignments\x128\n" +
	"\ttick_rate\x18\n" +
	" \x01(\v2\x1b.google.protobuf.Int32ValueR\btickRate\x1aA\n" +
	"\x13TeamAlignmentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa9\x01\n" +
	"\x11GetPlayersRequest\x12\x1c\n" +
	"\tusernames\x18\x01 \x03(\tR\tusernames\x12\x19\n" +
	"\buser_ids\x18\x02 \x03(\tR\auserIds\x12\x1f\n" +
	"\vdiscord_ids\x18\x03 \x03(\tR\n" +
	"discordIds\x12\x15\n" +
	"\x06xp_ids\x18\x04 \x03(\tR\x05xpIds\x12#\n" +
	"\rdisplay_names\x18\x05 \x03(\tR\fdisplayNames\"\xb9\x02\n" +
	"\x14LobbySessionRedirect\x12:\n" +
	"\x04user\x18\x01 \x01(\v2$.nevr.api.LobbySessionRedirectUserIDH\x00R\x04user\x12N\n" +
	"\fguild_member\x18\x02 \x01(\v2).nevr.api.LobbySessionRedirectGuildMemberH\x00R\vguildMember\x12N\n" +
	"\fdiscord_user\x18\x03 \x01(\v2).nevr.api.LobbySessionRedirectDiscordUserH\x00R\vdiscordUser\x12;\n" +
	"\x05match\x18\x04 \x01(\v2#.nevr.api.LobbySessionRedirectMatchH\x00R\x05matchB\b\n" +
	"\x06target\"5\n" +
	"\x1aLobbySessionRedirectUserID\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"[\n" +
	"\x1fLobbySessionRedirectGuildMember\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\tR\aguildId\x12\x1d\n" +
	"\n" +
	"discord_id\x18\x02 \x01(\tR\tdiscordId\"@\n" +
	"\x1fLobbySessionRedirectDiscordUser\x12\x1d\n" +
	"\n" +
	"discord_id\x18\x01 \x01(\tR\tdiscordId\"6\n" +
	"\x19LobbySessionRedirectMatch\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchIdBc\n" +
	"\x1dcom.github.echotools.nevr.apiB\aNevrApiP\x01Z'github.com/echotools/nevr-common/v3/api\xaa\x02\rNevr.Protobufb\x06proto3"

var (
	file_nevr_api_proto_rawDescOnce sync.Once
	file_nevr_api_proto_rawDescData []byte
)

func file_nevr_api_proto_rawDescGZIP() []byte {
	file_nevr_api_proto_rawDescOnce.Do(func() {
		file_nevr_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nevr_api_proto_rawDesc), len(file_nevr_api_proto_rawDesc)))
	})
	return file_nevr_api_proto_rawDescData
}

var file_nevr_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_nevr_api_proto_goTypes = []any{
	(*PrepareMatchRequest)(nil),             // 0: nevr.api.PrepareMatchRequest
	(*GetPlayersRequest)(nil),               // 1: nevr.api.GetPlayersRequest
	(*LobbySessionRedirect)(nil),            // 2: nevr.api.LobbySessionRedirect
	(*LobbySessionRedirectUserID)(nil),      // 3: nevr.api.LobbySessionRedirectUserID
	(*LobbySessionRedirectGuildMember)(nil), // 4: nevr.api.LobbySessionRedirectGuildMember
	(*LobbySessionRedirectDiscordUser)(nil), // 5: nevr.api.LobbySessionRedirectDiscordUser
	(*LobbySessionRedirectMatch)(nil),       // 6: nevr.api.LobbySessionRedirectMatch
	nil,                                     // 7: nevr.api.PrepareMatchRequest.TeamAlignmentsEntry
	(*wrapperspb.Int32Value)(nil),           // 8: google.protobuf.Int32Value
	(*timestamppb.Timestamp)(nil),           // 9: google.protobuf.Timestamp
}
var file_nevr_api_proto_depIdxs = []int32{
	8, // 0: nevr.api.PrepareMatchRequest.team_size:type_name -> google.protobuf.Int32Value
	9, // 1: nevr.api.PrepareMatchRequest.expiry_time:type_name -> google.protobuf.Timestamp
	7, // 2: nevr.api.PrepareMatchRequest.team_alignments:type_name -> nevr.api.PrepareMatchRequest.TeamAlignmentsEntry
	8, // 3: nevr.api.PrepareMatchRequest.tick_rate:type_name -> google.protobuf.Int32Value
	3, // 4: nevr.api.LobbySessionRedirect.user:type_name -> nevr.api.LobbySessionRedirectUserID
	4, // 5: nevr.api.LobbySessionRedirect.guild_member:type_name -> nevr.api.LobbySessionRedirectGuildMember
	5, // 6: nevr.api.LobbySessionRedirect.discord_user:type_name -> nevr.api.LobbySessionRedirectDiscordUser
	6, // 7: nevr.api.LobbySessionRedirect.match:type_name -> nevr.api.LobbySessionRedirectMatch
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_nevr_api_proto_init() }
func file_nevr_api_proto_init() {
	if File_nevr_api_proto != nil {
		return
	}
	file_nevr_api_proto_msgTypes[2].OneofWrappers = []any{
		(*LobbySessionRedirect_User)(nil),
		(*LobbySessionRedirect_GuildMember)(nil),
		(*LobbySessionRedirect_DiscordUser)(nil),
		(*LobbySessionRedirect_Match)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nevr_api_proto_rawDesc), len(file_nevr_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nevr_api_proto_goTypes,
		DependencyIndexes: file_nevr_api_proto_depIdxs,
		MessageInfos:      file_nevr_api_proto_msgTypes,
	}.Build()
	File_nevr_api_proto = out.File
	file_nevr_api_proto_goTypes = nil
	file_nevr_api_proto_depIdxs = nil
}
