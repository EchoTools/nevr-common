//*
// The NEVR service RPC protocol for the client, servers, and apps.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v6.30.2
// source: nevr_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request to prepare a match for users to join.
type PrepareMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The match mode.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// The region where the match will be prepared (optional).
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// The level for the match (optional).
	Level string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	// The size of each team in the match (optional).
	TeamSize *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=team_size,json=teamSize,proto3" json:"team_size,omitempty"`
	// The time the match is scheduled to start (optional)
	ExpiryTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// The user ID of the user who will own the match (optional).
	OwnerId string `protobuf:"bytes,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// The group ID of the guild where the match will be spawned (optional).
	GroupId string `protobuf:"bytes,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The features required for the match (optional).
	RequiredFeatures []string `protobuf:"bytes,8,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
	// Mapping user IDs to blue or orange (optional)
	TeamAlignments map[string]string `protobuf:"bytes,9,rep,name=team_alignments,json=teamAlignments,proto3" json:"team_alignments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Tick Rate of the match in Hz (optional)
	TickRate *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=tick_rate,json=tickRate,proto3" json:"tick_rate,omitempty"`
}

func (x *PrepareMatchRequest) Reset() {
	*x = PrepareMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nevr_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMatchRequest) ProtoMessage() {}

func (x *PrepareMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMatchRequest.ProtoReflect.Descriptor instead.
func (*PrepareMatchRequest) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareMatchRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PrepareMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PrepareMatchRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *PrepareMatchRequest) GetTeamSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.TeamSize
	}
	return nil
}

func (x *PrepareMatchRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *PrepareMatchRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *PrepareMatchRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *PrepareMatchRequest) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *PrepareMatchRequest) GetTeamAlignments() map[string]string {
	if x != nil {
		return x.TeamAlignments
	}
	return nil
}

func (x *PrepareMatchRequest) GetTickRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.TickRate
	}
	return nil
}

// AccountLookupRequest is a request to look up user accounts by various identifiers.
type GetPlayersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Nakama username or Discord username.
	Usernames []string `protobuf:"bytes,1,rep,name=usernames,proto3" json:"usernames,omitempty"`
	// The Nakama user UUIDs.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// The Discord IDs (snowflakes).
	DiscordIds []string `protobuf:"bytes,3,rep,name=discord_ids,json=discordIds,proto3" json:"discord_ids,omitempty"`
	// The OVR-ORG-123412341234 XPIDs.
	XpIds []string `protobuf:"bytes,4,rep,name=xp_ids,json=xpIds,proto3" json:"xp_ids,omitempty"`
	// The active display names (may be unreliable).
	DisplayNames []string `protobuf:"bytes,5,rep,name=display_names,json=displayNames,proto3" json:"display_names,omitempty"`
}

func (x *GetPlayersRequest) Reset() {
	*x = GetPlayersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nevr_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayersRequest) ProtoMessage() {}

func (x *GetPlayersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayersRequest.ProtoReflect.Descriptor instead.
func (*GetPlayersRequest) Descriptor() ([]byte, []int) {
	return file_nevr_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetPlayersRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *GetPlayersRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetPlayersRequest) GetDiscordIds() []string {
	if x != nil {
		return x.DiscordIds
	}
	return nil
}

func (x *GetPlayersRequest) GetXpIds() []string {
	if x != nil {
		return x.XpIds
	}
	return nil
}

func (x *GetPlayersRequest) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

var File_nevr_api_proto protoreflect.FileDescriptor

var file_nevr_api_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6e, 0x65, 0x76, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6e, 0x65, 0x76, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x04, 0x0a, 0x13,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x5a, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x65, 0x76, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x65, 0x61,
	0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x78, 0x70, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x78, 0x70, 0x49, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x42, 0x63, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x6e, 0x65, 0x76,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x07, 0x4e, 0x65, 0x76, 0x72, 0x41, 0x70, 0x69, 0x50, 0x01,
	0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x63, 0x68,
	0x6f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6e, 0x65, 0x76, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0d, 0x4e, 0x65, 0x76, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_nevr_api_proto_rawDescOnce sync.Once
	file_nevr_api_proto_rawDescData = file_nevr_api_proto_rawDesc
)

func file_nevr_api_proto_rawDescGZIP() []byte {
	file_nevr_api_proto_rawDescOnce.Do(func() {
		file_nevr_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_nevr_api_proto_rawDescData)
	})
	return file_nevr_api_proto_rawDescData
}

var file_nevr_api_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_nevr_api_proto_goTypes = []interface{}{
	(*PrepareMatchRequest)(nil),   // 0: nevr.api.PrepareMatchRequest
	(*GetPlayersRequest)(nil),     // 1: nevr.api.GetPlayersRequest
	nil,                           // 2: nevr.api.PrepareMatchRequest.TeamAlignmentsEntry
	(*wrapperspb.Int32Value)(nil), // 3: google.protobuf.Int32Value
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_nevr_api_proto_depIdxs = []int32{
	3, // 0: nevr.api.PrepareMatchRequest.team_size:type_name -> google.protobuf.Int32Value
	4, // 1: nevr.api.PrepareMatchRequest.expiry_time:type_name -> google.protobuf.Timestamp
	2, // 2: nevr.api.PrepareMatchRequest.team_alignments:type_name -> nevr.api.PrepareMatchRequest.TeamAlignmentsEntry
	3, // 3: nevr.api.PrepareMatchRequest.tick_rate:type_name -> google.protobuf.Int32Value
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_nevr_api_proto_init() }
func file_nevr_api_proto_init() {
	if File_nevr_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nevr_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nevr_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nevr_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nevr_api_proto_goTypes,
		DependencyIndexes: file_nevr_api_proto_depIdxs,
		MessageInfos:      file_nevr_api_proto_msgTypes,
	}.Build()
	File_nevr_api_proto = out.File
	file_nevr_api_proto_rawDesc = nil
	file_nevr_api_proto_goTypes = nil
	file_nevr_api_proto_depIdxs = nil
}
