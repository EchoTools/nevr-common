/**
 * The EchoTools NEVR Lobby Session Telemetry.
 *
 * This format is designed for streaming. A capture file should consist of:
 * 1. A single, length-delimited Header message.
 * 2. A sequence of one or more length-delimited Frame messages.
 */
syntax = "proto3";

package nevr.telemetry;

import "google/protobuf/timestamp.proto";
import "gameapi/nevr_gameapi.proto";

// --- Language-specific options ---
option go_package           = "github.com/echotools/nevr-common/v3/telemetry";
option java_multiple_files  = true;
option java_outer_classname = "NEVRTelemetry";
option java_package         = "com.echotools.nevr.telemetry";
option csharp_namespace     = "Nevr.Telemetry.Protobuf";

/**
 * Header contains the metadata for the entire session capture.
 * This message should be written once at the beginning of the file.
 */
message TelemetryHeader {
  // A unique identifier for the capture, e.g., a UUID.
  string capture_id = 1;

  // The timestamp indicating when the capture was initiated.
  google.protobuf.Timestamp created_at = 2;

  // An arbitrary key-value store for additional metadata, such as game
  // version, server IP, or map name.
  map<string, string> metadata = 3;
}

/**
 * Frame represents a single snapshot of game state data.
 * A sequence of these messages follows the Header in the data stream.
 */
message LobbySessionStateFrame {
  // The sequential index of the frame, starting from 0.
  uint32 frame_index = 1;

  // The precise timestamp when this frame's data was captured.
  google.protobuf.Timestamp timestamp = 2;

  // A list of discrete events that occurred during this frame.
  repeated LobbySessionEvent events = 3;

  // The session data for this frame, including player locations.
  nevr.gameapi.SessionResponse session = 4;

  // The user bones data for this frame.
  nevr.gameapi.UserBonesResponse user_bones = 5;
}

// Defines the possible roles or teams a player can be assigned to.
enum Role {
  ROLE_UNSPECIFIED   = 0;
  BLUE_TEAM          = 1;
  ORANGE_TEAM        = 2;
  SPECTATOR          = 3;
  SOCIAL_PARTICIPANT = 4;
  MODERATOR          = 5;
}

// A wrapper for any event that can occur during a session.
message LobbySessionEvent {
  // The specific event payload.
  oneof payload {
    // Game State Events
    RoundStarted      round_started      = 10;
    RoundPaused       round_paused       = 11;
    RoundUnpaused     round_unpaused     = 12;
    RoundEnded        round_ended        = 13;
    MatchEnded        match_ended        = 14;
    ScoreboardUpdated scoreboard_updated = 15;

    // Player Events
    PlayerJoined       player_joined        = 20;
    PlayerLeft         player_left          = 21;
    PlayerSwitchedTeam player_switched_team = 22;
    EmotePlayed        emote_played         = 23;

    // Disc Events
    DiscPossessionChanged disc_possession_changed = 30;
    DiscThrown            disc_thrown             = 31;
    DiscCaught            disc_caught             = 32;

    // Scoring Events
    GoalScored goal_scored = 40;

    // Stat-based Events
    PlayerSave         player_save         = 50;
    PlayerStun         player_stun         = 51;
    PlayerPass         player_pass         = 52;
    PlayerSteal        player_steal        = 53;
    PlayerBlock        player_block        = 54;
    PlayerInterception player_interception = 55;
    PlayerAssist       player_assist       = 56;
    PlayerShotTaken    player_shot_taken   = 57;
  }
}

// ------------------------------------------------------------------
// Game State Events
// ------------------------------------------------------------------

// Fired when the round starts.
message RoundStarted {
  int32 round_number = 1;
}

// Fired when the game is paused.
message RoundPaused {
  nevr.gameapi.PauseState pause_state = 1;
}

// Fired when the game is unpaused.
message RoundUnpaused {
  nevr.gameapi.PauseState pause_state = 1;
}

// Fired when a round finishes.
message RoundEnded {
  int32 round_number = 1;
  Role  winning_team = 2;
}

// Fired when the match is over.
message MatchEnded {
  Role winning_team = 1;
}

// Fired on any change to score or round count.
message ScoreboardUpdated {
  int32  blue_points        = 1;
  int32  orange_points      = 2;
  int32  blue_round_score   = 3;
  int32  orange_round_score = 4;
  string game_clock_display = 5;
}

// ------------------------------------------------------------------
// Player Events
// ------------------------------------------------------------------

// Fired when a new player is detected in the session.
message PlayerJoined {
  // Contains the full initial state of the player.
  nevr.gameapi.TeamMember player = 1;
  Role                    role   = 2;
}

// Fired when a player is no longer detected in the session.
message PlayerLeft {
  int32  player_slot  = 1;
  string display_name = 2;
}

// Fired when a player changes teams or roles.
message PlayerSwitchedTeam {
  int32 player_slot = 1;
  Role  new_role    = 2;
  Role  prev_role   = 3;
}

// Fired when a player starts playing an emote.
message EmotePlayed {
  enum EmoteType {
    PRIMARY   = 0;
    SECONDARY = 1;
  }
  int32 player_slot = 1;
}

// ------------------------------------------------------------------
// Disc Events
// ------------------------------------------------------------------

// Fired when possession of the disc changes.
message DiscPossessionChanged {
  // The account number of the player who now has possession.
  int32 player_slot   = 1;  // This will be -1 if the disc is free.
  int32 previous_slot = 2;  // This will be -1 if the disc was previously free.
}

// Fired when a player throws the disc.
message DiscThrown {
  int32 player_slot = 1;
  // Contains the detailed physics of the throw.
  nevr.gameapi.LastThrowInfo throw_details = 2;
}

// Fired when a player catches the disc.
message DiscCaught {
  int32 player_slot = 1;
}

// ------------------------------------------------------------------
// Scoring Events
// ------------------------------------------------------------------

// Fired when a goal is scored.
message GoalScored {
  // Contains all details about the score.
  nevr.gameapi.LastScore score_details = 1;
}

// ------------------------------------------------------------------
// Stat-based Events
// ------------------------------------------------------------------

// Fired when a player's 'saves' stat increments.
message PlayerSave {
  int32 player_slot = 1;
  int32 total_saves = 2;
}

// Fired when a player's 'stuns' stat increments.
message PlayerStun {
  int32 player_slot = 1;
  int32 total_stuns = 2;
}

// Fired when a player's 'passes' stat increments.
message PlayerPass {
  int32 player_slot  = 1;
  int32 total_passes = 2;
}

// Fired when a player's 'steals' stat increments.
message PlayerSteal {
  int32 player_slot  = 1;
  int32 total_steals = 2;
}

// Fired when a player's 'blocks' stat increments.
message PlayerBlock {
  int32 player_slot  = 1;
  int32 total_blocks = 2;
}

// Fired when a player's 'interceptions' stat increments.
message PlayerInterception {
  int32 player_slot         = 1;
  int32 total_interceptions = 2;
}

// Fired when a player's 'assists' stat increments.
message PlayerAssist {
  int32 player_slot   = 1;
  int32 total_assists = 2;
}

// Fired when a player's 'shots_taken' stat increments.
message PlayerShotTaken {
  int32 player_slot = 1;
  int32 total_shots = 2;
}