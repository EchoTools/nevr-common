//*
// The EchoTools NEVR Lobby Session Telemetry.
//
// This format is designed for streaming. A capture file should consist of:
// 1. A single, length-delimited Header message.
// 2. A sequence of one or more length-delimited Frame messages.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: telemetry.proto

package telemetry

import (
	gameapi "github.com/echotools/nevr-common/v3/gameapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the possible roles or teams a player can be assigned to.
type Role int32

const (
	Role_ROLE_UNSPECIFIED   Role = 0
	Role_BLUE_TEAM          Role = 1
	Role_ORANGE_TEAM        Role = 2
	Role_SPECTATOR          Role = 3
	Role_SOCIAL_PARTICIPANT Role = 4
	Role_MODERATOR          Role = 5
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "BLUE_TEAM",
		2: "ORANGE_TEAM",
		3: "SPECTATOR",
		4: "SOCIAL_PARTICIPANT",
		5: "MODERATOR",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED":   0,
		"BLUE_TEAM":          1,
		"ORANGE_TEAM":        2,
		"SPECTATOR":          3,
		"SOCIAL_PARTICIPANT": 4,
		"MODERATOR":          5,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

type EmotePlayed_EmoteType int32

const (
	EmotePlayed_PRIMARY   EmotePlayed_EmoteType = 0
	EmotePlayed_SECONDARY EmotePlayed_EmoteType = 1
)

// Enum value maps for EmotePlayed_EmoteType.
var (
	EmotePlayed_EmoteType_name = map[int32]string{
		0: "PRIMARY",
		1: "SECONDARY",
	}
	EmotePlayed_EmoteType_value = map[string]int32{
		"PRIMARY":   0,
		"SECONDARY": 1,
	}
)

func (x EmotePlayed_EmoteType) Enum() *EmotePlayed_EmoteType {
	p := new(EmotePlayed_EmoteType)
	*p = x
	return p
}

func (x EmotePlayed_EmoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmotePlayed_EmoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[1].Descriptor()
}

func (EmotePlayed_EmoteType) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[1]
}

func (x EmotePlayed_EmoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmotePlayed_EmoteType.Descriptor instead.
func (EmotePlayed_EmoteType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{12, 0}
}

//*
// Header contains the metadata for the entire session capture.
// This message should be written once at the beginning of the file.
type TelemetryHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier for the capture, e.g., a UUID.
	CaptureId string `protobuf:"bytes,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// The timestamp indicating when the capture was initiated.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// An arbitrary key-value store for additional metadata, such as game
	// version, server IP, or map name.
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryHeader) Reset() {
	*x = TelemetryHeader{}
	mi := &file_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryHeader) ProtoMessage() {}

func (x *TelemetryHeader) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryHeader.ProtoReflect.Descriptor instead.
func (*TelemetryHeader) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryHeader) GetCaptureId() string {
	if x != nil {
		return x.CaptureId
	}
	return ""
}

func (x *TelemetryHeader) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TelemetryHeader) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//*
// Frame represents a single snapshot of game state data.
// A sequence of these messages follows the Header in the data stream.
type LobbySessionStateFrame struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The sequential index of the frame, starting from 0.
	FrameIndex uint32 `protobuf:"varint,1,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
	// The precise timestamp when this frame's data was captured.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A list of discrete events that occurred during this frame.
	Events []*LobbySessionEvent `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	// The session data for this frame, including player locations.
	Session *gameapi.SessionResponse `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	// The user bones data for this frame.
	UserBones     *gameapi.UserBonesResponse `protobuf:"bytes,5,opt,name=user_bones,json=userBones,proto3" json:"user_bones,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbySessionStateFrame) Reset() {
	*x = LobbySessionStateFrame{}
	mi := &file_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionStateFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionStateFrame) ProtoMessage() {}

func (x *LobbySessionStateFrame) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionStateFrame.ProtoReflect.Descriptor instead.
func (*LobbySessionStateFrame) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *LobbySessionStateFrame) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *LobbySessionStateFrame) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LobbySessionStateFrame) GetEvents() []*LobbySessionEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *LobbySessionStateFrame) GetSession() *gameapi.SessionResponse {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *LobbySessionStateFrame) GetUserBones() *gameapi.UserBonesResponse {
	if x != nil {
		return x.UserBones
	}
	return nil
}

// A wrapper for any event that can occur during a session.
type LobbySessionEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specific event payload.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*LobbySessionEvent_RoundStarted
	//	*LobbySessionEvent_RoundPaused
	//	*LobbySessionEvent_RoundUnpaused
	//	*LobbySessionEvent_RoundEnded
	//	*LobbySessionEvent_MatchEnded
	//	*LobbySessionEvent_ScoreboardUpdated
	//	*LobbySessionEvent_PlayerJoined
	//	*LobbySessionEvent_PlayerLeft
	//	*LobbySessionEvent_PlayerSwitchedTeam
	//	*LobbySessionEvent_EmotePlayed
	//	*LobbySessionEvent_DiscPossessionChanged
	//	*LobbySessionEvent_DiscThrown
	//	*LobbySessionEvent_DiscCaught
	//	*LobbySessionEvent_GoalScored
	//	*LobbySessionEvent_PlayerSave
	//	*LobbySessionEvent_PlayerStun
	//	*LobbySessionEvent_PlayerPass
	//	*LobbySessionEvent_PlayerSteal
	//	*LobbySessionEvent_PlayerBlock
	//	*LobbySessionEvent_PlayerInterception
	//	*LobbySessionEvent_PlayerAssist
	//	*LobbySessionEvent_PlayerShotTaken
	Payload       isLobbySessionEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LobbySessionEvent) Reset() {
	*x = LobbySessionEvent{}
	mi := &file_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbySessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionEvent) ProtoMessage() {}

func (x *LobbySessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionEvent.ProtoReflect.Descriptor instead.
func (*LobbySessionEvent) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *LobbySessionEvent) GetPayload() isLobbySessionEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *LobbySessionEvent) GetRoundStarted() *RoundStarted {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_RoundStarted); ok {
			return x.RoundStarted
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetRoundPaused() *RoundPaused {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_RoundPaused); ok {
			return x.RoundPaused
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetRoundUnpaused() *RoundUnpaused {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_RoundUnpaused); ok {
			return x.RoundUnpaused
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetRoundEnded() *RoundEnded {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_RoundEnded); ok {
			return x.RoundEnded
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetMatchEnded() *MatchEnded {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_MatchEnded); ok {
			return x.MatchEnded
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetScoreboardUpdated() *ScoreboardUpdated {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_ScoreboardUpdated); ok {
			return x.ScoreboardUpdated
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerJoined() *PlayerJoined {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerJoined); ok {
			return x.PlayerJoined
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerLeft() *PlayerLeft {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerLeft); ok {
			return x.PlayerLeft
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerSwitchedTeam() *PlayerSwitchedTeam {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerSwitchedTeam); ok {
			return x.PlayerSwitchedTeam
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetEmotePlayed() *EmotePlayed {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_EmotePlayed); ok {
			return x.EmotePlayed
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetDiscPossessionChanged() *DiscPossessionChanged {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_DiscPossessionChanged); ok {
			return x.DiscPossessionChanged
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetDiscThrown() *DiscThrown {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_DiscThrown); ok {
			return x.DiscThrown
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetDiscCaught() *DiscCaught {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_DiscCaught); ok {
			return x.DiscCaught
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetGoalScored() *GoalScored {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_GoalScored); ok {
			return x.GoalScored
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerSave() *PlayerSave {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerSave); ok {
			return x.PlayerSave
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerStun() *PlayerStun {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerStun); ok {
			return x.PlayerStun
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerPass() *PlayerPass {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerPass); ok {
			return x.PlayerPass
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerSteal() *PlayerSteal {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerSteal); ok {
			return x.PlayerSteal
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerBlock() *PlayerBlock {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerBlock); ok {
			return x.PlayerBlock
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerInterception() *PlayerInterception {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerInterception); ok {
			return x.PlayerInterception
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerAssist() *PlayerAssist {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerAssist); ok {
			return x.PlayerAssist
		}
	}
	return nil
}

func (x *LobbySessionEvent) GetPlayerShotTaken() *PlayerShotTaken {
	if x != nil {
		if x, ok := x.Payload.(*LobbySessionEvent_PlayerShotTaken); ok {
			return x.PlayerShotTaken
		}
	}
	return nil
}

type isLobbySessionEvent_Payload interface {
	isLobbySessionEvent_Payload()
}

type LobbySessionEvent_RoundStarted struct {
	// Game State Events
	RoundStarted *RoundStarted `protobuf:"bytes,10,opt,name=round_started,json=roundStarted,proto3,oneof"`
}

type LobbySessionEvent_RoundPaused struct {
	RoundPaused *RoundPaused `protobuf:"bytes,11,opt,name=round_paused,json=roundPaused,proto3,oneof"`
}

type LobbySessionEvent_RoundUnpaused struct {
	RoundUnpaused *RoundUnpaused `protobuf:"bytes,12,opt,name=round_unpaused,json=roundUnpaused,proto3,oneof"`
}

type LobbySessionEvent_RoundEnded struct {
	RoundEnded *RoundEnded `protobuf:"bytes,13,opt,name=round_ended,json=roundEnded,proto3,oneof"`
}

type LobbySessionEvent_MatchEnded struct {
	MatchEnded *MatchEnded `protobuf:"bytes,14,opt,name=match_ended,json=matchEnded,proto3,oneof"`
}

type LobbySessionEvent_ScoreboardUpdated struct {
	ScoreboardUpdated *ScoreboardUpdated `protobuf:"bytes,15,opt,name=scoreboard_updated,json=scoreboardUpdated,proto3,oneof"`
}

type LobbySessionEvent_PlayerJoined struct {
	// Player Events
	PlayerJoined *PlayerJoined `protobuf:"bytes,20,opt,name=player_joined,json=playerJoined,proto3,oneof"`
}

type LobbySessionEvent_PlayerLeft struct {
	PlayerLeft *PlayerLeft `protobuf:"bytes,21,opt,name=player_left,json=playerLeft,proto3,oneof"`
}

type LobbySessionEvent_PlayerSwitchedTeam struct {
	PlayerSwitchedTeam *PlayerSwitchedTeam `protobuf:"bytes,22,opt,name=player_switched_team,json=playerSwitchedTeam,proto3,oneof"`
}

type LobbySessionEvent_EmotePlayed struct {
	EmotePlayed *EmotePlayed `protobuf:"bytes,23,opt,name=emote_played,json=emotePlayed,proto3,oneof"`
}

type LobbySessionEvent_DiscPossessionChanged struct {
	// Disc Events
	DiscPossessionChanged *DiscPossessionChanged `protobuf:"bytes,30,opt,name=disc_possession_changed,json=discPossessionChanged,proto3,oneof"`
}

type LobbySessionEvent_DiscThrown struct {
	DiscThrown *DiscThrown `protobuf:"bytes,31,opt,name=disc_thrown,json=discThrown,proto3,oneof"`
}

type LobbySessionEvent_DiscCaught struct {
	DiscCaught *DiscCaught `protobuf:"bytes,32,opt,name=disc_caught,json=discCaught,proto3,oneof"`
}

type LobbySessionEvent_GoalScored struct {
	// Scoring Events
	GoalScored *GoalScored `protobuf:"bytes,40,opt,name=goal_scored,json=goalScored,proto3,oneof"`
}

type LobbySessionEvent_PlayerSave struct {
	// Stat-based Events
	PlayerSave *PlayerSave `protobuf:"bytes,50,opt,name=player_save,json=playerSave,proto3,oneof"`
}

type LobbySessionEvent_PlayerStun struct {
	PlayerStun *PlayerStun `protobuf:"bytes,51,opt,name=player_stun,json=playerStun,proto3,oneof"`
}

type LobbySessionEvent_PlayerPass struct {
	PlayerPass *PlayerPass `protobuf:"bytes,52,opt,name=player_pass,json=playerPass,proto3,oneof"`
}

type LobbySessionEvent_PlayerSteal struct {
	PlayerSteal *PlayerSteal `protobuf:"bytes,53,opt,name=player_steal,json=playerSteal,proto3,oneof"`
}

type LobbySessionEvent_PlayerBlock struct {
	PlayerBlock *PlayerBlock `protobuf:"bytes,54,opt,name=player_block,json=playerBlock,proto3,oneof"`
}

type LobbySessionEvent_PlayerInterception struct {
	PlayerInterception *PlayerInterception `protobuf:"bytes,55,opt,name=player_interception,json=playerInterception,proto3,oneof"`
}

type LobbySessionEvent_PlayerAssist struct {
	PlayerAssist *PlayerAssist `protobuf:"bytes,56,opt,name=player_assist,json=playerAssist,proto3,oneof"`
}

type LobbySessionEvent_PlayerShotTaken struct {
	PlayerShotTaken *PlayerShotTaken `protobuf:"bytes,57,opt,name=player_shot_taken,json=playerShotTaken,proto3,oneof"`
}

func (*LobbySessionEvent_RoundStarted) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_RoundPaused) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_RoundUnpaused) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_RoundEnded) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_MatchEnded) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_ScoreboardUpdated) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerJoined) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerLeft) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerSwitchedTeam) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_EmotePlayed) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_DiscPossessionChanged) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_DiscThrown) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_DiscCaught) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_GoalScored) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerSave) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerStun) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerPass) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerSteal) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerBlock) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerInterception) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerAssist) isLobbySessionEvent_Payload() {}

func (*LobbySessionEvent_PlayerShotTaken) isLobbySessionEvent_Payload() {}

// Fired when the round starts.
type RoundStarted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundNumber   int32                  `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundStarted) Reset() {
	*x = RoundStarted{}
	mi := &file_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStarted) ProtoMessage() {}

func (x *RoundStarted) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStarted.ProtoReflect.Descriptor instead.
func (*RoundStarted) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *RoundStarted) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

// Fired when the game is paused.
type RoundPaused struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PauseState    *gameapi.PauseState    `protobuf:"bytes,1,opt,name=pause_state,json=pauseState,proto3" json:"pause_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundPaused) Reset() {
	*x = RoundPaused{}
	mi := &file_telemetry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundPaused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundPaused) ProtoMessage() {}

func (x *RoundPaused) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundPaused.ProtoReflect.Descriptor instead.
func (*RoundPaused) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *RoundPaused) GetPauseState() *gameapi.PauseState {
	if x != nil {
		return x.PauseState
	}
	return nil
}

// Fired when the game is unpaused.
type RoundUnpaused struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PauseState    *gameapi.PauseState    `protobuf:"bytes,1,opt,name=pause_state,json=pauseState,proto3" json:"pause_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundUnpaused) Reset() {
	*x = RoundUnpaused{}
	mi := &file_telemetry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundUnpaused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundUnpaused) ProtoMessage() {}

func (x *RoundUnpaused) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundUnpaused.ProtoReflect.Descriptor instead.
func (*RoundUnpaused) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *RoundUnpaused) GetPauseState() *gameapi.PauseState {
	if x != nil {
		return x.PauseState
	}
	return nil
}

// Fired when a round finishes.
type RoundEnded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundNumber   int32                  `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	WinningTeam   Role                   `protobuf:"varint,2,opt,name=winning_team,json=winningTeam,proto3,enum=nevr.telemetry.Role" json:"winning_team,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundEnded) Reset() {
	*x = RoundEnded{}
	mi := &file_telemetry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundEnded) ProtoMessage() {}

func (x *RoundEnded) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundEnded.ProtoReflect.Descriptor instead.
func (*RoundEnded) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *RoundEnded) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *RoundEnded) GetWinningTeam() Role {
	if x != nil {
		return x.WinningTeam
	}
	return Role_ROLE_UNSPECIFIED
}

// Fired when the match is over.
type MatchEnded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WinningTeam   Role                   `protobuf:"varint,1,opt,name=winning_team,json=winningTeam,proto3,enum=nevr.telemetry.Role" json:"winning_team,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchEnded) Reset() {
	*x = MatchEnded{}
	mi := &file_telemetry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEnded) ProtoMessage() {}

func (x *MatchEnded) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEnded.ProtoReflect.Descriptor instead.
func (*MatchEnded) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *MatchEnded) GetWinningTeam() Role {
	if x != nil {
		return x.WinningTeam
	}
	return Role_ROLE_UNSPECIFIED
}

// Fired on any change to score or round count.
type ScoreboardUpdated struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BluePoints       int32                  `protobuf:"varint,1,opt,name=blue_points,json=bluePoints,proto3" json:"blue_points,omitempty"`
	OrangePoints     int32                  `protobuf:"varint,2,opt,name=orange_points,json=orangePoints,proto3" json:"orange_points,omitempty"`
	BlueRoundScore   int32                  `protobuf:"varint,3,opt,name=blue_round_score,json=blueRoundScore,proto3" json:"blue_round_score,omitempty"`
	OrangeRoundScore int32                  `protobuf:"varint,4,opt,name=orange_round_score,json=orangeRoundScore,proto3" json:"orange_round_score,omitempty"`
	GameClockDisplay string                 `protobuf:"bytes,5,opt,name=game_clock_display,json=gameClockDisplay,proto3" json:"game_clock_display,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ScoreboardUpdated) Reset() {
	*x = ScoreboardUpdated{}
	mi := &file_telemetry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreboardUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreboardUpdated) ProtoMessage() {}

func (x *ScoreboardUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreboardUpdated.ProtoReflect.Descriptor instead.
func (*ScoreboardUpdated) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *ScoreboardUpdated) GetBluePoints() int32 {
	if x != nil {
		return x.BluePoints
	}
	return 0
}

func (x *ScoreboardUpdated) GetOrangePoints() int32 {
	if x != nil {
		return x.OrangePoints
	}
	return 0
}

func (x *ScoreboardUpdated) GetBlueRoundScore() int32 {
	if x != nil {
		return x.BlueRoundScore
	}
	return 0
}

func (x *ScoreboardUpdated) GetOrangeRoundScore() int32 {
	if x != nil {
		return x.OrangeRoundScore
	}
	return 0
}

func (x *ScoreboardUpdated) GetGameClockDisplay() string {
	if x != nil {
		return x.GameClockDisplay
	}
	return ""
}

// Fired when a new player is detected in the session.
type PlayerJoined struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contains the full initial state of the player.
	Player        *gameapi.TeamMember `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Role          Role                `protobuf:"varint,2,opt,name=role,proto3,enum=nevr.telemetry.Role" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerJoined) Reset() {
	*x = PlayerJoined{}
	mi := &file_telemetry_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerJoined) ProtoMessage() {}

func (x *PlayerJoined) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerJoined.ProtoReflect.Descriptor instead.
func (*PlayerJoined) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerJoined) GetPlayer() *gameapi.TeamMember {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *PlayerJoined) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

// Fired when a player is no longer detected in the session.
type PlayerLeft struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerLeft) Reset() {
	*x = PlayerLeft{}
	mi := &file_telemetry_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLeft) ProtoMessage() {}

func (x *PlayerLeft) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLeft.ProtoReflect.Descriptor instead.
func (*PlayerLeft) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerLeft) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerLeft) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Fired when a player changes teams or roles.
type PlayerSwitchedTeam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	NewRole       Role                   `protobuf:"varint,2,opt,name=new_role,json=newRole,proto3,enum=nevr.telemetry.Role" json:"new_role,omitempty"`
	PrevRole      Role                   `protobuf:"varint,3,opt,name=prev_role,json=prevRole,proto3,enum=nevr.telemetry.Role" json:"prev_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerSwitchedTeam) Reset() {
	*x = PlayerSwitchedTeam{}
	mi := &file_telemetry_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerSwitchedTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSwitchedTeam) ProtoMessage() {}

func (x *PlayerSwitchedTeam) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSwitchedTeam.ProtoReflect.Descriptor instead.
func (*PlayerSwitchedTeam) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerSwitchedTeam) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerSwitchedTeam) GetNewRole() Role {
	if x != nil {
		return x.NewRole
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *PlayerSwitchedTeam) GetPrevRole() Role {
	if x != nil {
		return x.PrevRole
	}
	return Role_ROLE_UNSPECIFIED
}

// Fired when a player starts playing an emote.
type EmotePlayed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmotePlayed) Reset() {
	*x = EmotePlayed{}
	mi := &file_telemetry_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotePlayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotePlayed) ProtoMessage() {}

func (x *EmotePlayed) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotePlayed.ProtoReflect.Descriptor instead.
func (*EmotePlayed) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{12}
}

func (x *EmotePlayed) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

// Fired when possession of the disc changes.
type DiscPossessionChanged struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The account number of the player who now has possession.
	PlayerSlot    int32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`       // This will be -1 if the disc is free.
	PreviousSlot  int32 `protobuf:"varint,2,opt,name=previous_slot,json=previousSlot,proto3" json:"previous_slot,omitempty"` // This will be -1 if the disc was previously free.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscPossessionChanged) Reset() {
	*x = DiscPossessionChanged{}
	mi := &file_telemetry_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscPossessionChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscPossessionChanged) ProtoMessage() {}

func (x *DiscPossessionChanged) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscPossessionChanged.ProtoReflect.Descriptor instead.
func (*DiscPossessionChanged) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{13}
}

func (x *DiscPossessionChanged) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *DiscPossessionChanged) GetPreviousSlot() int32 {
	if x != nil {
		return x.PreviousSlot
	}
	return 0
}

// Fired when a player throws the disc.
type DiscThrown struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	// Contains the detailed physics of the throw.
	ThrowDetails  *gameapi.LastThrowInfo `protobuf:"bytes,2,opt,name=throw_details,json=throwDetails,proto3" json:"throw_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscThrown) Reset() {
	*x = DiscThrown{}
	mi := &file_telemetry_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscThrown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscThrown) ProtoMessage() {}

func (x *DiscThrown) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscThrown.ProtoReflect.Descriptor instead.
func (*DiscThrown) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{14}
}

func (x *DiscThrown) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *DiscThrown) GetThrowDetails() *gameapi.LastThrowInfo {
	if x != nil {
		return x.ThrowDetails
	}
	return nil
}

// Fired when a player catches the disc.
type DiscCaught struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscCaught) Reset() {
	*x = DiscCaught{}
	mi := &file_telemetry_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscCaught) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscCaught) ProtoMessage() {}

func (x *DiscCaught) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscCaught.ProtoReflect.Descriptor instead.
func (*DiscCaught) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{15}
}

func (x *DiscCaught) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

// Fired when a goal is scored.
type GoalScored struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contains all details about the score.
	ScoreDetails  *gameapi.LastScore `protobuf:"bytes,1,opt,name=score_details,json=scoreDetails,proto3" json:"score_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoalScored) Reset() {
	*x = GoalScored{}
	mi := &file_telemetry_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoalScored) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalScored) ProtoMessage() {}

func (x *GoalScored) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalScored.ProtoReflect.Descriptor instead.
func (*GoalScored) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{16}
}

func (x *GoalScored) GetScoreDetails() *gameapi.LastScore {
	if x != nil {
		return x.ScoreDetails
	}
	return nil
}

// Fired when a player's 'saves' stat increments.
type PlayerSave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalSaves    int32                  `protobuf:"varint,2,opt,name=total_saves,json=totalSaves,proto3" json:"total_saves,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerSave) Reset() {
	*x = PlayerSave{}
	mi := &file_telemetry_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSave) ProtoMessage() {}

func (x *PlayerSave) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSave.ProtoReflect.Descriptor instead.
func (*PlayerSave) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerSave) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerSave) GetTotalSaves() int32 {
	if x != nil {
		return x.TotalSaves
	}
	return 0
}

// Fired when a player's 'stuns' stat increments.
type PlayerStun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalStuns    int32                  `protobuf:"varint,2,opt,name=total_stuns,json=totalStuns,proto3" json:"total_stuns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStun) Reset() {
	*x = PlayerStun{}
	mi := &file_telemetry_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStun) ProtoMessage() {}

func (x *PlayerStun) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStun.ProtoReflect.Descriptor instead.
func (*PlayerStun) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{18}
}

func (x *PlayerStun) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerStun) GetTotalStuns() int32 {
	if x != nil {
		return x.TotalStuns
	}
	return 0
}

// Fired when a player's 'passes' stat increments.
type PlayerPass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalPasses   int32                  `protobuf:"varint,2,opt,name=total_passes,json=totalPasses,proto3" json:"total_passes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerPass) Reset() {
	*x = PlayerPass{}
	mi := &file_telemetry_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPass) ProtoMessage() {}

func (x *PlayerPass) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPass.ProtoReflect.Descriptor instead.
func (*PlayerPass) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{19}
}

func (x *PlayerPass) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerPass) GetTotalPasses() int32 {
	if x != nil {
		return x.TotalPasses
	}
	return 0
}

// Fired when a player's 'steals' stat increments.
type PlayerSteal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalSteals   int32                  `protobuf:"varint,2,opt,name=total_steals,json=totalSteals,proto3" json:"total_steals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerSteal) Reset() {
	*x = PlayerSteal{}
	mi := &file_telemetry_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerSteal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSteal) ProtoMessage() {}

func (x *PlayerSteal) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSteal.ProtoReflect.Descriptor instead.
func (*PlayerSteal) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{20}
}

func (x *PlayerSteal) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerSteal) GetTotalSteals() int32 {
	if x != nil {
		return x.TotalSteals
	}
	return 0
}

// Fired when a player's 'blocks' stat increments.
type PlayerBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalBlocks   int32                  `protobuf:"varint,2,opt,name=total_blocks,json=totalBlocks,proto3" json:"total_blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerBlock) Reset() {
	*x = PlayerBlock{}
	mi := &file_telemetry_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBlock) ProtoMessage() {}

func (x *PlayerBlock) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBlock.ProtoReflect.Descriptor instead.
func (*PlayerBlock) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{21}
}

func (x *PlayerBlock) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerBlock) GetTotalBlocks() int32 {
	if x != nil {
		return x.TotalBlocks
	}
	return 0
}

// Fired when a player's 'interceptions' stat increments.
type PlayerInterception struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot         int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalInterceptions int32                  `protobuf:"varint,2,opt,name=total_interceptions,json=totalInterceptions,proto3" json:"total_interceptions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlayerInterception) Reset() {
	*x = PlayerInterception{}
	mi := &file_telemetry_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInterception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInterception) ProtoMessage() {}

func (x *PlayerInterception) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInterception.ProtoReflect.Descriptor instead.
func (*PlayerInterception) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerInterception) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerInterception) GetTotalInterceptions() int32 {
	if x != nil {
		return x.TotalInterceptions
	}
	return 0
}

// Fired when a player's 'assists' stat increments.
type PlayerAssist struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalAssists  int32                  `protobuf:"varint,2,opt,name=total_assists,json=totalAssists,proto3" json:"total_assists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerAssist) Reset() {
	*x = PlayerAssist{}
	mi := &file_telemetry_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerAssist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAssist) ProtoMessage() {}

func (x *PlayerAssist) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAssist.ProtoReflect.Descriptor instead.
func (*PlayerAssist) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{23}
}

func (x *PlayerAssist) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerAssist) GetTotalAssists() int32 {
	if x != nil {
		return x.TotalAssists
	}
	return 0
}

// Fired when a player's 'shots_taken' stat increments.
type PlayerShotTaken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerSlot    int32                  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	TotalShots    int32                  `protobuf:"varint,2,opt,name=total_shots,json=totalShots,proto3" json:"total_shots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerShotTaken) Reset() {
	*x = PlayerShotTaken{}
	mi := &file_telemetry_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerShotTaken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerShotTaken) ProtoMessage() {}

func (x *PlayerShotTaken) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerShotTaken.ProtoReflect.Descriptor instead.
func (*PlayerShotTaken) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{24}
}

func (x *PlayerShotTaken) GetPlayerSlot() int32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *PlayerShotTaken) GetTotalShots() int32 {
	if x != nil {
		return x.TotalShots
	}
	return 0
}

var File_telemetry_proto protoreflect.FileDescriptor

const file_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x0ftelemetry.proto\x12\x0enevr.telemetry\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1agameapi/nevr_gameapi.proto\"\xf3\x01\n" +
	"\x0fTelemetryHeader\x12\x1d\n" +
	"\n" +
	"capture_id\x18\x01 \x01(\tR\tcaptureId\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12I\n" +
	"\bmetadata\x18\x03 \x03(\v2-.nevr.telemetry.TelemetryHeader.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa7\x02\n" +
	"\x16LobbySessionStateFrame\x12\x1f\n" +
	"\vframe_index\x18\x01 \x01(\rR\n" +
	"frameIndex\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x129\n" +
	"\x06events\x18\x03 \x03(\v2!.nevr.telemetry.LobbySessionEventR\x06events\x127\n" +
	"\asession\x18\x04 \x01(\v2\x1d.nevr.gameapi.SessionResponseR\asession\x12>\n" +
	"\n" +
	"user_bones\x18\x05 \x01(\v2\x1f.nevr.gameapi.UserBonesResponseR\tuserBones\"\xa7\f\n" +
	"\x11LobbySessionEvent\x12C\n" +
	"\rround_started\x18\n" +
	" \x01(\v2\x1c.nevr.telemetry.RoundStartedH\x00R\froundStarted\x12@\n" +
	"\fround_paused\x18\v \x01(\v2\x1b.nevr.telemetry.RoundPausedH\x00R\vroundPaused\x12F\n" +
	"\x0eround_unpaused\x18\f \x01(\v2\x1d.nevr.telemetry.RoundUnpausedH\x00R\rroundUnpaused\x12=\n" +
	"\vround_ended\x18\r \x01(\v2\x1a.nevr.telemetry.RoundEndedH\x00R\n" +
	"roundEnded\x12=\n" +
	"\vmatch_ended\x18\x0e \x01(\v2\x1a.nevr.telemetry.MatchEndedH\x00R\n" +
	"matchEnded\x12R\n" +
	"\x12scoreboard_updated\x18\x0f \x01(\v2!.nevr.telemetry.ScoreboardUpdatedH\x00R\x11scoreboardUpdated\x12C\n" +
	"\rplayer_joined\x18\x14 \x01(\v2\x1c.nevr.telemetry.PlayerJoinedH\x00R\fplayerJoined\x12=\n" +
	"\vplayer_left\x18\x15 \x01(\v2\x1a.nevr.telemetry.PlayerLeftH\x00R\n" +
	"playerLeft\x12V\n" +
	"\x14player_switched_team\x18\x16 \x01(\v2\".nevr.telemetry.PlayerSwitchedTeamH\x00R\x12playerSwitchedTeam\x12@\n" +
	"\femote_played\x18\x17 \x01(\v2\x1b.nevr.telemetry.EmotePlayedH\x00R\vemotePlayed\x12_\n" +
	"\x17disc_possession_changed\x18\x1e \x01(\v2%.nevr.telemetry.DiscPossessionChangedH\x00R\x15discPossessionChanged\x12=\n" +
	"\vdisc_thrown\x18\x1f \x01(\v2\x1a.nevr.telemetry.DiscThrownH\x00R\n" +
	"discThrown\x12=\n" +
	"\vdisc_caught\x18  \x01(\v2\x1a.nevr.telemetry.DiscCaughtH\x00R\n" +
	"discCaught\x12=\n" +
	"\vgoal_scored\x18( \x01(\v2\x1a.nevr.telemetry.GoalScoredH\x00R\n" +
	"goalScored\x12=\n" +
	"\vplayer_save\x182 \x01(\v2\x1a.nevr.telemetry.PlayerSaveH\x00R\n" +
	"playerSave\x12=\n" +
	"\vplayer_stun\x183 \x01(\v2\x1a.nevr.telemetry.PlayerStunH\x00R\n" +
	"playerStun\x12=\n" +
	"\vplayer_pass\x184 \x01(\v2\x1a.nevr.telemetry.PlayerPassH\x00R\n" +
	"playerPass\x12@\n" +
	"\fplayer_steal\x185 \x01(\v2\x1b.nevr.telemetry.PlayerStealH\x00R\vplayerSteal\x12@\n" +
	"\fplayer_block\x186 \x01(\v2\x1b.nevr.telemetry.PlayerBlockH\x00R\vplayerBlock\x12U\n" +
	"\x13player_interception\x187 \x01(\v2\".nevr.telemetry.PlayerInterceptionH\x00R\x12playerInterception\x12C\n" +
	"\rplayer_assist\x188 \x01(\v2\x1c.nevr.telemetry.PlayerAssistH\x00R\fplayerAssist\x12M\n" +
	"\x11player_shot_taken\x189 \x01(\v2\x1f.nevr.telemetry.PlayerShotTakenH\x00R\x0fplayerShotTakenB\t\n" +
	"\apayload\"1\n" +
	"\fRoundStarted\x12!\n" +
	"\fround_number\x18\x01 \x01(\x05R\vroundNumber\"H\n" +
	"\vRoundPaused\x129\n" +
	"\vpause_state\x18\x01 \x01(\v2\x18.nevr.gameapi.PauseStateR\n" +
	"pauseState\"J\n" +
	"\rRoundUnpaused\x129\n" +
	"\vpause_state\x18\x01 \x01(\v2\x18.nevr.gameapi.PauseStateR\n" +
	"pauseState\"h\n" +
	"\n" +
	"RoundEnded\x12!\n" +
	"\fround_number\x18\x01 \x01(\x05R\vroundNumber\x127\n" +
	"\fwinning_team\x18\x02 \x01(\x0e2\x14.nevr.telemetry.RoleR\vwinningTeam\"E\n" +
	"\n" +
	"MatchEnded\x127\n" +
	"\fwinning_team\x18\x01 \x01(\x0e2\x14.nevr.telemetry.RoleR\vwinningTeam\"\xdf\x01\n" +
	"\x11ScoreboardUpdated\x12\x1f\n" +
	"\vblue_points\x18\x01 \x01(\x05R\n" +
	"bluePoints\x12#\n" +
	"\rorange_points\x18\x02 \x01(\x05R\forangePoints\x12(\n" +
	"\x10blue_round_score\x18\x03 \x01(\x05R\x0eblueRoundScore\x12,\n" +
	"\x12orange_round_score\x18\x04 \x01(\x05R\x10orangeRoundScore\x12,\n" +
	"\x12game_clock_display\x18\x05 \x01(\tR\x10gameClockDisplay\"j\n" +
	"\fPlayerJoined\x120\n" +
	"\x06player\x18\x01 \x01(\v2\x18.nevr.gameapi.TeamMemberR\x06player\x12(\n" +
	"\x04role\x18\x02 \x01(\x0e2\x14.nevr.telemetry.RoleR\x04role\"P\n" +
	"\n" +
	"PlayerLeft\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\"\x99\x01\n" +
	"\x12PlayerSwitchedTeam\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12/\n" +
	"\bnew_role\x18\x02 \x01(\x0e2\x14.nevr.telemetry.RoleR\anewRole\x121\n" +
	"\tprev_role\x18\x03 \x01(\x0e2\x14.nevr.telemetry.RoleR\bprevRole\"W\n" +
	"\vEmotePlayed\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\"'\n" +
	"\tEmoteType\x12\v\n" +
	"\aPRIMARY\x10\x00\x12\r\n" +
	"\tSECONDARY\x10\x01\"]\n" +
	"\x15DiscPossessionChanged\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12#\n" +
	"\rprevious_slot\x18\x02 \x01(\x05R\fpreviousSlot\"o\n" +
	"\n" +
	"DiscThrown\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12@\n" +
	"\rthrow_details\x18\x02 \x01(\v2\x1b.nevr.gameapi.LastThrowInfoR\fthrowDetails\"-\n" +
	"\n" +
	"DiscCaught\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\"J\n" +
	"\n" +
	"GoalScored\x12<\n" +
	"\rscore_details\x18\x01 \x01(\v2\x17.nevr.gameapi.LastScoreR\fscoreDetails\"N\n" +
	"\n" +
	"PlayerSave\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12\x1f\n" +
	"\vtotal_saves\x18\x02 \x01(\x05R\n" +
	"totalSaves\"N\n" +
	"\n" +
	"PlayerStun\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12\x1f\n" +
	"\vtotal_stuns\x18\x02 \x01(\x05R\n" +
	"totalStuns\"P\n" +
	"\n" +
	"PlayerPass\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12!\n" +
	"\ftotal_passes\x18\x02 \x01(\x05R\vtotalPasses\"Q\n" +
	"\vPlayerSteal\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12!\n" +
	"\ftotal_steals\x18\x02 \x01(\x05R\vtotalSteals\"Q\n" +
	"\vPlayerBlock\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12!\n" +
	"\ftotal_blocks\x18\x02 \x01(\x05R\vtotalBlocks\"f\n" +
	"\x12PlayerInterception\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12/\n" +
	"\x13total_interceptions\x18\x02 \x01(\x05R\x12totalInterceptions\"T\n" +
	"\fPlayerAssist\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12#\n" +
	"\rtotal_assists\x18\x02 \x01(\x05R\ftotalAssists\"S\n" +
	"\x0fPlayerShotTaken\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\x05R\n" +
	"playerSlot\x12\x1f\n" +
	"\vtotal_shots\x18\x02 \x01(\x05R\n" +
	"totalShots*r\n" +
	"\x04Role\x12\x14\n" +
	"\x10ROLE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tBLUE_TEAM\x10\x01\x12\x0f\n" +
	"\vORANGE_TEAM\x10\x02\x12\r\n" +
	"\tSPECTATOR\x10\x03\x12\x16\n" +
	"\x12SOCIAL_PARTICIPANT\x10\x04\x12\r\n" +
	"\tMODERATOR\x10\x05Bx\n" +
	"\x1ccom.echotools.nevr.telemetryB\rNEVRTelemetryP\x01Z-github.com/echotools/nevr-common/v3/telemetry\xaa\x02\x17Nevr.Telemetry.Protobufb\x06proto3"

var (
	file_telemetry_proto_rawDescOnce sync.Once
	file_telemetry_proto_rawDescData []byte
)

func file_telemetry_proto_rawDescGZIP() []byte {
	file_telemetry_proto_rawDescOnce.Do(func() {
		file_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_telemetry_proto_rawDesc), len(file_telemetry_proto_rawDesc)))
	})
	return file_telemetry_proto_rawDescData
}

var file_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_telemetry_proto_goTypes = []any{
	(Role)(0),                         // 0: nevr.telemetry.Role
	(EmotePlayed_EmoteType)(0),        // 1: nevr.telemetry.EmotePlayed.EmoteType
	(*TelemetryHeader)(nil),           // 2: nevr.telemetry.TelemetryHeader
	(*LobbySessionStateFrame)(nil),    // 3: nevr.telemetry.LobbySessionStateFrame
	(*LobbySessionEvent)(nil),         // 4: nevr.telemetry.LobbySessionEvent
	(*RoundStarted)(nil),              // 5: nevr.telemetry.RoundStarted
	(*RoundPaused)(nil),               // 6: nevr.telemetry.RoundPaused
	(*RoundUnpaused)(nil),             // 7: nevr.telemetry.RoundUnpaused
	(*RoundEnded)(nil),                // 8: nevr.telemetry.RoundEnded
	(*MatchEnded)(nil),                // 9: nevr.telemetry.MatchEnded
	(*ScoreboardUpdated)(nil),         // 10: nevr.telemetry.ScoreboardUpdated
	(*PlayerJoined)(nil),              // 11: nevr.telemetry.PlayerJoined
	(*PlayerLeft)(nil),                // 12: nevr.telemetry.PlayerLeft
	(*PlayerSwitchedTeam)(nil),        // 13: nevr.telemetry.PlayerSwitchedTeam
	(*EmotePlayed)(nil),               // 14: nevr.telemetry.EmotePlayed
	(*DiscPossessionChanged)(nil),     // 15: nevr.telemetry.DiscPossessionChanged
	(*DiscThrown)(nil),                // 16: nevr.telemetry.DiscThrown
	(*DiscCaught)(nil),                // 17: nevr.telemetry.DiscCaught
	(*GoalScored)(nil),                // 18: nevr.telemetry.GoalScored
	(*PlayerSave)(nil),                // 19: nevr.telemetry.PlayerSave
	(*PlayerStun)(nil),                // 20: nevr.telemetry.PlayerStun
	(*PlayerPass)(nil),                // 21: nevr.telemetry.PlayerPass
	(*PlayerSteal)(nil),               // 22: nevr.telemetry.PlayerSteal
	(*PlayerBlock)(nil),               // 23: nevr.telemetry.PlayerBlock
	(*PlayerInterception)(nil),        // 24: nevr.telemetry.PlayerInterception
	(*PlayerAssist)(nil),              // 25: nevr.telemetry.PlayerAssist
	(*PlayerShotTaken)(nil),           // 26: nevr.telemetry.PlayerShotTaken
	nil,                               // 27: nevr.telemetry.TelemetryHeader.MetadataEntry
	(*timestamppb.Timestamp)(nil),     // 28: google.protobuf.Timestamp
	(*gameapi.SessionResponse)(nil),   // 29: nevr.gameapi.SessionResponse
	(*gameapi.UserBonesResponse)(nil), // 30: nevr.gameapi.UserBonesResponse
	(*gameapi.PauseState)(nil),        // 31: nevr.gameapi.PauseState
	(*gameapi.TeamMember)(nil),        // 32: nevr.gameapi.TeamMember
	(*gameapi.LastThrowInfo)(nil),     // 33: nevr.gameapi.LastThrowInfo
	(*gameapi.LastScore)(nil),         // 34: nevr.gameapi.LastScore
}
var file_telemetry_proto_depIdxs = []int32{
	28, // 0: nevr.telemetry.TelemetryHeader.created_at:type_name -> google.protobuf.Timestamp
	27, // 1: nevr.telemetry.TelemetryHeader.metadata:type_name -> nevr.telemetry.TelemetryHeader.MetadataEntry
	28, // 2: nevr.telemetry.LobbySessionStateFrame.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 3: nevr.telemetry.LobbySessionStateFrame.events:type_name -> nevr.telemetry.LobbySessionEvent
	29, // 4: nevr.telemetry.LobbySessionStateFrame.session:type_name -> nevr.gameapi.SessionResponse
	30, // 5: nevr.telemetry.LobbySessionStateFrame.user_bones:type_name -> nevr.gameapi.UserBonesResponse
	5,  // 6: nevr.telemetry.LobbySessionEvent.round_started:type_name -> nevr.telemetry.RoundStarted
	6,  // 7: nevr.telemetry.LobbySessionEvent.round_paused:type_name -> nevr.telemetry.RoundPaused
	7,  // 8: nevr.telemetry.LobbySessionEvent.round_unpaused:type_name -> nevr.telemetry.RoundUnpaused
	8,  // 9: nevr.telemetry.LobbySessionEvent.round_ended:type_name -> nevr.telemetry.RoundEnded
	9,  // 10: nevr.telemetry.LobbySessionEvent.match_ended:type_name -> nevr.telemetry.MatchEnded
	10, // 11: nevr.telemetry.LobbySessionEvent.scoreboard_updated:type_name -> nevr.telemetry.ScoreboardUpdated
	11, // 12: nevr.telemetry.LobbySessionEvent.player_joined:type_name -> nevr.telemetry.PlayerJoined
	12, // 13: nevr.telemetry.LobbySessionEvent.player_left:type_name -> nevr.telemetry.PlayerLeft
	13, // 14: nevr.telemetry.LobbySessionEvent.player_switched_team:type_name -> nevr.telemetry.PlayerSwitchedTeam
	14, // 15: nevr.telemetry.LobbySessionEvent.emote_played:type_name -> nevr.telemetry.EmotePlayed
	15, // 16: nevr.telemetry.LobbySessionEvent.disc_possession_changed:type_name -> nevr.telemetry.DiscPossessionChanged
	16, // 17: nevr.telemetry.LobbySessionEvent.disc_thrown:type_name -> nevr.telemetry.DiscThrown
	17, // 18: nevr.telemetry.LobbySessionEvent.disc_caught:type_name -> nevr.telemetry.DiscCaught
	18, // 19: nevr.telemetry.LobbySessionEvent.goal_scored:type_name -> nevr.telemetry.GoalScored
	19, // 20: nevr.telemetry.LobbySessionEvent.player_save:type_name -> nevr.telemetry.PlayerSave
	20, // 21: nevr.telemetry.LobbySessionEvent.player_stun:type_name -> nevr.telemetry.PlayerStun
	21, // 22: nevr.telemetry.LobbySessionEvent.player_pass:type_name -> nevr.telemetry.PlayerPass
	22, // 23: nevr.telemetry.LobbySessionEvent.player_steal:type_name -> nevr.telemetry.PlayerSteal
	23, // 24: nevr.telemetry.LobbySessionEvent.player_block:type_name -> nevr.telemetry.PlayerBlock
	24, // 25: nevr.telemetry.LobbySessionEvent.player_interception:type_name -> nevr.telemetry.PlayerInterception
	25, // 26: nevr.telemetry.LobbySessionEvent.player_assist:type_name -> nevr.telemetry.PlayerAssist
	26, // 27: nevr.telemetry.LobbySessionEvent.player_shot_taken:type_name -> nevr.telemetry.PlayerShotTaken
	31, // 28: nevr.telemetry.RoundPaused.pause_state:type_name -> nevr.gameapi.PauseState
	31, // 29: nevr.telemetry.RoundUnpaused.pause_state:type_name -> nevr.gameapi.PauseState
	0,  // 30: nevr.telemetry.RoundEnded.winning_team:type_name -> nevr.telemetry.Role
	0,  // 31: nevr.telemetry.MatchEnded.winning_team:type_name -> nevr.telemetry.Role
	32, // 32: nevr.telemetry.PlayerJoined.player:type_name -> nevr.gameapi.TeamMember
	0,  // 33: nevr.telemetry.PlayerJoined.role:type_name -> nevr.telemetry.Role
	0,  // 34: nevr.telemetry.PlayerSwitchedTeam.new_role:type_name -> nevr.telemetry.Role
	0,  // 35: nevr.telemetry.PlayerSwitchedTeam.prev_role:type_name -> nevr.telemetry.Role
	33, // 36: nevr.telemetry.DiscThrown.throw_details:type_name -> nevr.gameapi.LastThrowInfo
	34, // 37: nevr.telemetry.GoalScored.score_details:type_name -> nevr.gameapi.LastScore
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_telemetry_proto_init() }
func file_telemetry_proto_init() {
	if File_telemetry_proto != nil {
		return
	}
	file_telemetry_proto_msgTypes[2].OneofWrappers = []any{
		(*LobbySessionEvent_RoundStarted)(nil),
		(*LobbySessionEvent_RoundPaused)(nil),
		(*LobbySessionEvent_RoundUnpaused)(nil),
		(*LobbySessionEvent_RoundEnded)(nil),
		(*LobbySessionEvent_MatchEnded)(nil),
		(*LobbySessionEvent_ScoreboardUpdated)(nil),
		(*LobbySessionEvent_PlayerJoined)(nil),
		(*LobbySessionEvent_PlayerLeft)(nil),
		(*LobbySessionEvent_PlayerSwitchedTeam)(nil),
		(*LobbySessionEvent_EmotePlayed)(nil),
		(*LobbySessionEvent_DiscPossessionChanged)(nil),
		(*LobbySessionEvent_DiscThrown)(nil),
		(*LobbySessionEvent_DiscCaught)(nil),
		(*LobbySessionEvent_GoalScored)(nil),
		(*LobbySessionEvent_PlayerSave)(nil),
		(*LobbySessionEvent_PlayerStun)(nil),
		(*LobbySessionEvent_PlayerPass)(nil),
		(*LobbySessionEvent_PlayerSteal)(nil),
		(*LobbySessionEvent_PlayerBlock)(nil),
		(*LobbySessionEvent_PlayerInterception)(nil),
		(*LobbySessionEvent_PlayerAssist)(nil),
		(*LobbySessionEvent_PlayerShotTaken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_telemetry_proto_rawDesc), len(file_telemetry_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telemetry_proto_goTypes,
		DependencyIndexes: file_telemetry_proto_depIdxs,
		EnumInfos:         file_telemetry_proto_enumTypes,
		MessageInfos:      file_telemetry_proto_msgTypes,
	}.Build()
	File_telemetry_proto = out.File
	file_telemetry_proto_goTypes = nil
	file_telemetry_proto_depIdxs = nil
}
