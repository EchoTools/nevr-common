//*
// The EchoTools NEVR Game API state.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: nevr_gameapi.proto

package gameapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the disc's physics properties.
type Disc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      []float64              `protobuf:"fixed64,1,rep,packed,name=position,proto3" json:"position,omitempty"`
	Forward       []float64              `protobuf:"fixed64,2,rep,packed,name=forward,proto3" json:"forward,omitempty"`
	Left          []float64              `protobuf:"fixed64,3,rep,packed,name=left,proto3" json:"left,omitempty"`
	Up            []float64              `protobuf:"fixed64,4,rep,packed,name=up,proto3" json:"up,omitempty"`
	Velocity      []float64              `protobuf:"fixed64,5,rep,packed,name=velocity,proto3" json:"velocity,omitempty"`
	BounceCount   int32                  `protobuf:"varint,6,opt,name=bounce_count,proto3" json:"bounce_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disc) Reset() {
	*x = Disc{}
	mi := &file_nevr_gameapi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disc) ProtoMessage() {}

func (x *Disc) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disc.ProtoReflect.Descriptor instead.
func (*Disc) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{0}
}

func (x *Disc) GetPosition() []float64 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Disc) GetForward() []float64 {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *Disc) GetLeft() []float64 {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *Disc) GetUp() []float64 {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *Disc) GetVelocity() []float64 {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *Disc) GetBounceCount() int32 {
	if x != nil {
		return x.BounceCount
	}
	return 0
}

// Represents an object's head, body, or hand properties.
type BodyPart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           []float64              `protobuf:"fixed64,1,rep,packed,name=pos,proto3" json:"pos,omitempty"`
	Position      []float64              `protobuf:"fixed64,2,rep,packed,name=position,proto3" json:"position,omitempty"`
	Forward       []float64              `protobuf:"fixed64,3,rep,packed,name=forward,proto3" json:"forward,omitempty"`
	Left          []float64              `protobuf:"fixed64,4,rep,packed,name=left,proto3" json:"left,omitempty"`
	Up            []float64              `protobuf:"fixed64,5,rep,packed,name=up,proto3" json:"up,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BodyPart) Reset() {
	*x = BodyPart{}
	mi := &file_nevr_gameapi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BodyPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyPart) ProtoMessage() {}

func (x *BodyPart) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyPart.ProtoReflect.Descriptor instead.
func (*BodyPart) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{1}
}

func (x *BodyPart) GetPos() []float64 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *BodyPart) GetPosition() []float64 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *BodyPart) GetForward() []float64 {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *BodyPart) GetLeft() []float64 {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *BodyPart) GetUp() []float64 {
	if x != nil {
		return x.Up
	}
	return nil
}

// Represents player statistics.
type PlayerStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PossessionTime float64                `protobuf:"fixed64,1,opt,name=possession_time,proto3" json:"possession_time,omitempty"`
	Points         int32                  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Saves          int32                  `protobuf:"varint,3,opt,name=saves,proto3" json:"saves,omitempty"`
	Goals          int32                  `protobuf:"varint,4,opt,name=goals,proto3" json:"goals,omitempty"`
	Stuns          int32                  `protobuf:"varint,5,opt,name=stuns,proto3" json:"stuns,omitempty"`
	Passes         int32                  `protobuf:"varint,6,opt,name=passes,proto3" json:"passes,omitempty"`
	Catches        int32                  `protobuf:"varint,7,opt,name=catches,proto3" json:"catches,omitempty"`
	Steals         int32                  `protobuf:"varint,8,opt,name=steals,proto3" json:"steals,omitempty"`
	Blocks         int32                  `protobuf:"varint,9,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Interceptions  int32                  `protobuf:"varint,10,opt,name=interceptions,proto3" json:"interceptions,omitempty"`
	Assists        int32                  `protobuf:"varint,11,opt,name=assists,proto3" json:"assists,omitempty"`
	ShotsTaken     int32                  `protobuf:"varint,12,opt,name=shots_taken,proto3" json:"shots_taken,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerStats) Reset() {
	*x = PlayerStats{}
	mi := &file_nevr_gameapi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStats) ProtoMessage() {}

func (x *PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStats.ProtoReflect.Descriptor instead.
func (*PlayerStats) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerStats) GetPossessionTime() float64 {
	if x != nil {
		return x.PossessionTime
	}
	return 0
}

func (x *PlayerStats) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *PlayerStats) GetSaves() int32 {
	if x != nil {
		return x.Saves
	}
	return 0
}

func (x *PlayerStats) GetGoals() int32 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *PlayerStats) GetStuns() int32 {
	if x != nil {
		return x.Stuns
	}
	return 0
}

func (x *PlayerStats) GetPasses() int32 {
	if x != nil {
		return x.Passes
	}
	return 0
}

func (x *PlayerStats) GetCatches() int32 {
	if x != nil {
		return x.Catches
	}
	return 0
}

func (x *PlayerStats) GetSteals() int32 {
	if x != nil {
		return x.Steals
	}
	return 0
}

func (x *PlayerStats) GetBlocks() int32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *PlayerStats) GetInterceptions() int32 {
	if x != nil {
		return x.Interceptions
	}
	return 0
}

func (x *PlayerStats) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *PlayerStats) GetShotsTaken() int32 {
	if x != nil {
		return x.ShotsTaken
	}
	return 0
}

// Represents individual player data.
type TeamMember struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Weapon           string                 `protobuf:"bytes,1,opt,name=weapon,json=Weapon,proto3" json:"weapon,omitempty"`
	Ordnance         string                 `protobuf:"bytes,2,opt,name=ordnance,json=Ordnance,proto3" json:"ordnance,omitempty"`
	TacMod           string                 `protobuf:"bytes,3,opt,name=tac_mod,json=TacMod,proto3" json:"tac_mod,omitempty"`
	Arm              string                 `protobuf:"bytes,4,opt,name=arm,json=Arm,proto3" json:"arm,omitempty"`
	Head             *BodyPart              `protobuf:"bytes,5,opt,name=head,proto3" json:"head,omitempty"`
	Body             *BodyPart              `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	AccountNumber    uint64                 `protobuf:"varint,7,opt,name=account_number,json=userid,proto3" json:"account_number,omitempty"`
	DisplayName      string                 `protobuf:"bytes,8,opt,name=display_name,json=name,proto3" json:"display_name,omitempty"`
	SlotNumber       int32                  `protobuf:"varint,9,opt,name=slot_number,json=playerid,proto3" json:"slot_number,omitempty"`
	JerseyNumber     int32                  `protobuf:"varint,10,opt,name=jersey_number,json=number,proto3" json:"jersey_number,omitempty"`
	Level            int32                  `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
	Ping             int32                  `protobuf:"varint,12,opt,name=ping,proto3" json:"ping,omitempty"`
	PacketLossRatio  float64                `protobuf:"fixed64,13,opt,name=packet_loss_ratio,json=packetlossratio,proto3" json:"packet_loss_ratio,omitempty"`
	IsStunned        bool                   `protobuf:"varint,14,opt,name=is_stunned,json=stunned,proto3" json:"is_stunned,omitempty"`
	IsInvulnerable   bool                   `protobuf:"varint,15,opt,name=is_invulnerable,json=invulnerable,proto3" json:"is_invulnerable,omitempty"`
	LeftHoldingOnto  string                 `protobuf:"bytes,16,opt,name=left_holding_onto,json=holding_left,proto3" json:"left_holding_onto,omitempty"`
	RightHoldingOnto string                 `protobuf:"bytes,17,opt,name=right_holding_onto,json=holding_right,proto3" json:"right_holding_onto,omitempty"`
	IsBlocking       bool                   `protobuf:"varint,18,opt,name=is_blocking,json=blocking,proto3" json:"is_blocking,omitempty"`
	IsEmotePlaying   bool                   `protobuf:"varint,19,opt,name=is_emote_playing,proto3" json:"is_emote_playing,omitempty"`
	HasPossession    bool                   `protobuf:"varint,20,opt,name=has_possession,json=possession,proto3" json:"has_possession,omitempty"`
	LeftHand         *BodyPart              `protobuf:"bytes,21,opt,name=left_hand,json=lhand,proto3" json:"left_hand,omitempty"`
	RightHand        *BodyPart              `protobuf:"bytes,22,opt,name=right_hand,json=rhand,proto3" json:"right_hand,omitempty"`
	Velocity         []float64              `protobuf:"fixed64,23,rep,packed,name=velocity,proto3" json:"velocity,omitempty"`
	Stats            *PlayerStats           `protobuf:"bytes,24,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TeamMember) Reset() {
	*x = TeamMember{}
	mi := &file_nevr_gameapi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMember) ProtoMessage() {}

func (x *TeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMember.ProtoReflect.Descriptor instead.
func (*TeamMember) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{3}
}

func (x *TeamMember) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

func (x *TeamMember) GetOrdnance() string {
	if x != nil {
		return x.Ordnance
	}
	return ""
}

func (x *TeamMember) GetTacMod() string {
	if x != nil {
		return x.TacMod
	}
	return ""
}

func (x *TeamMember) GetArm() string {
	if x != nil {
		return x.Arm
	}
	return ""
}

func (x *TeamMember) GetHead() *BodyPart {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TeamMember) GetBody() *BodyPart {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *TeamMember) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *TeamMember) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TeamMember) GetSlotNumber() int32 {
	if x != nil {
		return x.SlotNumber
	}
	return 0
}

func (x *TeamMember) GetJerseyNumber() int32 {
	if x != nil {
		return x.JerseyNumber
	}
	return 0
}

func (x *TeamMember) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TeamMember) GetPing() int32 {
	if x != nil {
		return x.Ping
	}
	return 0
}

func (x *TeamMember) GetPacketLossRatio() float64 {
	if x != nil {
		return x.PacketLossRatio
	}
	return 0
}

func (x *TeamMember) GetIsStunned() bool {
	if x != nil {
		return x.IsStunned
	}
	return false
}

func (x *TeamMember) GetIsInvulnerable() bool {
	if x != nil {
		return x.IsInvulnerable
	}
	return false
}

func (x *TeamMember) GetLeftHoldingOnto() string {
	if x != nil {
		return x.LeftHoldingOnto
	}
	return ""
}

func (x *TeamMember) GetRightHoldingOnto() string {
	if x != nil {
		return x.RightHoldingOnto
	}
	return ""
}

func (x *TeamMember) GetIsBlocking() bool {
	if x != nil {
		return x.IsBlocking
	}
	return false
}

func (x *TeamMember) GetIsEmotePlaying() bool {
	if x != nil {
		return x.IsEmotePlaying
	}
	return false
}

func (x *TeamMember) GetHasPossession() bool {
	if x != nil {
		return x.HasPossession
	}
	return false
}

func (x *TeamMember) GetLeftHand() *BodyPart {
	if x != nil {
		return x.LeftHand
	}
	return nil
}

func (x *TeamMember) GetRightHand() *BodyPart {
	if x != nil {
		return x.RightHand
	}
	return nil
}

func (x *TeamMember) GetVelocity() []float64 {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *TeamMember) GetStats() *PlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Represents team statistics.
type TeamStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PossessionTime float64                `protobuf:"fixed64,1,opt,name=possession_time,proto3" json:"possession_time,omitempty"`
	Points         int32                  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Saves          int32                  `protobuf:"varint,3,opt,name=saves,proto3" json:"saves,omitempty"`
	Goals          int32                  `protobuf:"varint,4,opt,name=goals,proto3" json:"goals,omitempty"`
	Stuns          int32                  `protobuf:"varint,5,opt,name=stuns,proto3" json:"stuns,omitempty"`
	Passes         int32                  `protobuf:"varint,6,opt,name=passes,proto3" json:"passes,omitempty"`
	Catches        int32                  `protobuf:"varint,7,opt,name=catches,proto3" json:"catches,omitempty"`
	Steals         int32                  `protobuf:"varint,8,opt,name=steals,proto3" json:"steals,omitempty"`
	Blocks         int32                  `protobuf:"varint,9,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Interceptions  int32                  `protobuf:"varint,10,opt,name=interceptions,proto3" json:"interceptions,omitempty"`
	Assists        int32                  `protobuf:"varint,11,opt,name=assists,proto3" json:"assists,omitempty"`
	ShotsTaken     int32                  `protobuf:"varint,12,opt,name=shots_taken,proto3" json:"shots_taken,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	mi := &file_nevr_gameapi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{4}
}

func (x *TeamStats) GetPossessionTime() float64 {
	if x != nil {
		return x.PossessionTime
	}
	return 0
}

func (x *TeamStats) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *TeamStats) GetSaves() int32 {
	if x != nil {
		return x.Saves
	}
	return 0
}

func (x *TeamStats) GetGoals() int32 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *TeamStats) GetStuns() int32 {
	if x != nil {
		return x.Stuns
	}
	return 0
}

func (x *TeamStats) GetPasses() int32 {
	if x != nil {
		return x.Passes
	}
	return 0
}

func (x *TeamStats) GetCatches() int32 {
	if x != nil {
		return x.Catches
	}
	return 0
}

func (x *TeamStats) GetSteals() int32 {
	if x != nil {
		return x.Steals
	}
	return 0
}

func (x *TeamStats) GetBlocks() int32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *TeamStats) GetInterceptions() int32 {
	if x != nil {
		return x.Interceptions
	}
	return 0
}

func (x *TeamStats) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *TeamStats) GetShotsTaken() int32 {
	if x != nil {
		return x.ShotsTaken
	}
	return 0
}

// Represents team data.
type Team struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*TeamMember          `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	TeamName      string                 `protobuf:"bytes,2,opt,name=team_name,json=team,proto3" json:"team_name,omitempty"`
	HasPossession bool                   `protobuf:"varint,3,opt,name=has_possession,json=possession,proto3" json:"has_possession,omitempty"`
	Stats         *TeamStats             `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Team) Reset() {
	*x = Team{}
	mi := &file_nevr_gameapi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{5}
}

func (x *Team) GetPlayers() []*TeamMember {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Team) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *Team) GetHasPossession() bool {
	if x != nil {
		return x.HasPossession
	}
	return false
}

func (x *Team) GetStats() *TeamStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Represents the last score event.
type LastScore struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DiscSpeed      float64                `protobuf:"fixed64,1,opt,name=disc_speed,proto3" json:"disc_speed,omitempty"`
	Team           string                 `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	GoalType       string                 `protobuf:"bytes,3,opt,name=goal_type,proto3" json:"goal_type,omitempty"`
	PointAmount    int32                  `protobuf:"varint,4,opt,name=point_amount,proto3" json:"point_amount,omitempty"`
	DistanceThrown float64                `protobuf:"fixed64,5,opt,name=distance_thrown,proto3" json:"distance_thrown,omitempty"`
	PersonScored   string                 `protobuf:"bytes,6,opt,name=person_scored,proto3" json:"person_scored,omitempty"`
	AssistScored   string                 `protobuf:"bytes,7,opt,name=assist_scored,proto3" json:"assist_scored,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LastScore) Reset() {
	*x = LastScore{}
	mi := &file_nevr_gameapi_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastScore) ProtoMessage() {}

func (x *LastScore) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastScore.ProtoReflect.Descriptor instead.
func (*LastScore) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{6}
}

func (x *LastScore) GetDiscSpeed() float64 {
	if x != nil {
		return x.DiscSpeed
	}
	return 0
}

func (x *LastScore) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *LastScore) GetGoalType() string {
	if x != nil {
		return x.GoalType
	}
	return ""
}

func (x *LastScore) GetPointAmount() int32 {
	if x != nil {
		return x.PointAmount
	}
	return 0
}

func (x *LastScore) GetDistanceThrown() float64 {
	if x != nil {
		return x.DistanceThrown
	}
	return 0
}

func (x *LastScore) GetPersonScored() string {
	if x != nil {
		return x.PersonScored
	}
	return ""
}

func (x *LastScore) GetAssistScored() string {
	if x != nil {
		return x.AssistScored
	}
	return ""
}

// Represents the last throw event.
type LastThrowInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ArmSpeed                float64                `protobuf:"fixed64,1,opt,name=arm_speed,proto3" json:"arm_speed,omitempty"`
	TotalSpeed              float64                `protobuf:"fixed64,2,opt,name=total_speed,proto3" json:"total_speed,omitempty"`
	OffAxisSpinDeg          float64                `protobuf:"fixed64,3,opt,name=off_axis_spin_deg,proto3" json:"off_axis_spin_deg,omitempty"`
	WristThrowPenalty       float64                `protobuf:"fixed64,4,opt,name=wrist_throw_penalty,proto3" json:"wrist_throw_penalty,omitempty"`
	RotPerSec               float64                `protobuf:"fixed64,5,opt,name=rot_per_sec,proto3" json:"rot_per_sec,omitempty"`
	PotSpeedFromRot         float64                `protobuf:"fixed64,6,opt,name=pot_speed_from_rot,proto3" json:"pot_speed_from_rot,omitempty"`
	SpeedFromArm            float64                `protobuf:"fixed64,7,opt,name=speed_from_arm,proto3" json:"speed_from_arm,omitempty"`
	SpeedFromMovement       float64                `protobuf:"fixed64,8,opt,name=speed_from_movement,proto3" json:"speed_from_movement,omitempty"`
	SpeedFromWrist          float64                `protobuf:"fixed64,9,opt,name=speed_from_wrist,proto3" json:"speed_from_wrist,omitempty"`
	WristAlignToThrowDeg    float64                `protobuf:"fixed64,10,opt,name=wrist_align_to_throw_deg,proto3" json:"wrist_align_to_throw_deg,omitempty"`
	ThrowAlignToMovementDeg float64                `protobuf:"fixed64,11,opt,name=throw_align_to_movement_deg,proto3" json:"throw_align_to_movement_deg,omitempty"`
	OffAxisPenalty          float64                `protobuf:"fixed64,12,opt,name=off_axis_penalty,proto3" json:"off_axis_penalty,omitempty"`
	ThrowMovePenalty        float64                `protobuf:"fixed64,13,opt,name=throw_move_penalty,proto3" json:"throw_move_penalty,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LastThrowInfo) Reset() {
	*x = LastThrowInfo{}
	mi := &file_nevr_gameapi_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastThrowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastThrowInfo) ProtoMessage() {}

func (x *LastThrowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastThrowInfo.ProtoReflect.Descriptor instead.
func (*LastThrowInfo) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{7}
}

func (x *LastThrowInfo) GetArmSpeed() float64 {
	if x != nil {
		return x.ArmSpeed
	}
	return 0
}

func (x *LastThrowInfo) GetTotalSpeed() float64 {
	if x != nil {
		return x.TotalSpeed
	}
	return 0
}

func (x *LastThrowInfo) GetOffAxisSpinDeg() float64 {
	if x != nil {
		return x.OffAxisSpinDeg
	}
	return 0
}

func (x *LastThrowInfo) GetWristThrowPenalty() float64 {
	if x != nil {
		return x.WristThrowPenalty
	}
	return 0
}

func (x *LastThrowInfo) GetRotPerSec() float64 {
	if x != nil {
		return x.RotPerSec
	}
	return 0
}

func (x *LastThrowInfo) GetPotSpeedFromRot() float64 {
	if x != nil {
		return x.PotSpeedFromRot
	}
	return 0
}

func (x *LastThrowInfo) GetSpeedFromArm() float64 {
	if x != nil {
		return x.SpeedFromArm
	}
	return 0
}

func (x *LastThrowInfo) GetSpeedFromMovement() float64 {
	if x != nil {
		return x.SpeedFromMovement
	}
	return 0
}

func (x *LastThrowInfo) GetSpeedFromWrist() float64 {
	if x != nil {
		return x.SpeedFromWrist
	}
	return 0
}

func (x *LastThrowInfo) GetWristAlignToThrowDeg() float64 {
	if x != nil {
		return x.WristAlignToThrowDeg
	}
	return 0
}

func (x *LastThrowInfo) GetThrowAlignToMovementDeg() float64 {
	if x != nil {
		return x.ThrowAlignToMovementDeg
	}
	return 0
}

func (x *LastThrowInfo) GetOffAxisPenalty() float64 {
	if x != nil {
		return x.OffAxisPenalty
	}
	return 0
}

func (x *LastThrowInfo) GetThrowMovePenalty() float64 {
	if x != nil {
		return x.ThrowMovePenalty
	}
	return 0
}

// *
// Represents the pause state of the game.
type PauseState struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PausedState         string                 `protobuf:"bytes,1,opt,name=paused_state,proto3" json:"paused_state,omitempty"`
	UnpausedTeam        string                 `protobuf:"bytes,2,opt,name=unpaused_team,proto3" json:"unpaused_team,omitempty"`
	PausedRequestedTeam string                 `protobuf:"bytes,3,opt,name=paused_requested_team,proto3" json:"paused_requested_team,omitempty"`
	UnpausedTimer       float64                `protobuf:"fixed64,4,opt,name=unpaused_timer,proto3" json:"unpaused_timer,omitempty"`
	PausedTimer         float64                `protobuf:"fixed64,5,opt,name=paused_timer,proto3" json:"paused_timer,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PauseState) Reset() {
	*x = PauseState{}
	mi := &file_nevr_gameapi_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseState) ProtoMessage() {}

func (x *PauseState) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseState.ProtoReflect.Descriptor instead.
func (*PauseState) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{8}
}

func (x *PauseState) GetPausedState() string {
	if x != nil {
		return x.PausedState
	}
	return ""
}

func (x *PauseState) GetUnpausedTeam() string {
	if x != nil {
		return x.UnpausedTeam
	}
	return ""
}

func (x *PauseState) GetPausedRequestedTeam() string {
	if x != nil {
		return x.PausedRequestedTeam
	}
	return ""
}

func (x *PauseState) GetUnpausedTimer() float64 {
	if x != nil {
		return x.UnpausedTimer
	}
	return 0
}

func (x *PauseState) GetPausedTimer() float64 {
	if x != nil {
		return x.PausedTimer
	}
	return 0
}

type PlayerRoot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VrLeft        []float64              `protobuf:"fixed64,1,rep,packed,name=vr_left,proto3" json:"vr_left,omitempty"`
	VrPosition    []float64              `protobuf:"fixed64,2,rep,packed,name=vr_position,proto3" json:"vr_position,omitempty"`
	VrForward     []float64              `protobuf:"fixed64,3,rep,packed,name=vr_forward,proto3" json:"vr_forward,omitempty"`
	VrUp          []float64              `protobuf:"fixed64,4,rep,packed,name=vr_up,proto3" json:"vr_up,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerRoot) Reset() {
	*x = PlayerRoot{}
	mi := &file_nevr_gameapi_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRoot) ProtoMessage() {}

func (x *PlayerRoot) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRoot.ProtoReflect.Descriptor instead.
func (*PlayerRoot) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerRoot) GetVrLeft() []float64 {
	if x != nil {
		return x.VrLeft
	}
	return nil
}

func (x *PlayerRoot) GetVrPosition() []float64 {
	if x != nil {
		return x.VrPosition
	}
	return nil
}

func (x *PlayerRoot) GetVrForward() []float64 {
	if x != nil {
		return x.VrForward
	}
	return nil
}

func (x *PlayerRoot) GetVrUp() []float64 {
	if x != nil {
		return x.VrUp
	}
	return nil
}

// Top-level message representing the entire JSON data.
// Endpoint: /session
type SessionResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	OrangeTeamRestartRequest int32                  `protobuf:"varint,1,opt,name=orange_team_restart_request,proto3" json:"orange_team_restart_request,omitempty"`
	SessionID                string                 `protobuf:"bytes,2,opt,name=sessionID,json=sessionid,proto3" json:"sessionID,omitempty"`
	GameClockDisplay         string                 `protobuf:"bytes,3,opt,name=game_clock_display,proto3" json:"game_clock_display,omitempty"`
	GameStatus               string                 `protobuf:"bytes,4,opt,name=game_status,proto3" json:"game_status,omitempty"`
	SessionIP                string                 `protobuf:"bytes,5,opt,name=sessionIP,json=sessionip,proto3" json:"sessionIP,omitempty"`
	MatchType                string                 `protobuf:"bytes,6,opt,name=match_type,proto3" json:"match_type,omitempty"`
	MapName                  string                 `protobuf:"bytes,7,opt,name=map_name,proto3" json:"map_name,omitempty"`
	Disc                     *Disc                  `protobuf:"bytes,8,opt,name=disc,proto3" json:"disc,omitempty"`
	BlueRoundScore           int32                  `protobuf:"varint,11,opt,name=blue_round_score,proto3" json:"blue_round_score,omitempty"`
	OrangePoints             int32                  `protobuf:"varint,12,opt,name=orange_points,proto3" json:"orange_points,omitempty"`
	PrivateMatch             bool                   `protobuf:"varint,14,opt,name=private_match,proto3" json:"private_match,omitempty"`
	BlueTeamRestartRequest   int32                  `protobuf:"varint,15,opt,name=blue_team_restart_request,proto3" json:"blue_team_restart_request,omitempty"`
	TournamentMatch          bool                   `protobuf:"varint,16,opt,name=tournament_match,proto3" json:"tournament_match,omitempty"`
	OrangeRoundScore         int32                  `protobuf:"varint,17,opt,name=orange_round_score,proto3" json:"orange_round_score,omitempty"`
	TotalRoundCount          int32                  `protobuf:"varint,18,opt,name=total_round_count,proto3" json:"total_round_count,omitempty"`
	BluePoints               int32                  `protobuf:"varint,19,opt,name=blue_points,proto3" json:"blue_points,omitempty"`
	LastThrow                *LastThrowInfo         `protobuf:"bytes,20,opt,name=last_throw,proto3" json:"last_throw,omitempty"`
	Player                   *PlayerRoot            `protobuf:"bytes,21,opt,name=player,proto3" json:"player,omitempty"`
	Pause                    *PauseState            `protobuf:"bytes,22,opt,name=pause,proto3" json:"pause,omitempty"`
	Possession               []int32                `protobuf:"varint,23,rep,packed,name=possession,proto3" json:"possession,omitempty"`
	LeftShoulderPressed      float64                `protobuf:"fixed64,24,opt,name=left_shoulder_pressed,proto3" json:"left_shoulder_pressed,omitempty"`
	RightShoulderPressed     float64                `protobuf:"fixed64,25,opt,name=right_shoulder_pressed,proto3" json:"right_shoulder_pressed,omitempty"`
	LeftShoulderPressed2     float64                `protobuf:"fixed64,26,opt,name=left_shoulder_pressed2,proto3" json:"left_shoulder_pressed2,omitempty"`
	RightShoulderPressed2    float64                `protobuf:"fixed64,27,opt,name=right_shoulder_pressed2,proto3" json:"right_shoulder_pressed2,omitempty"`
	RulesChangedBy           string                 `protobuf:"bytes,28,opt,name=rules_changed_by,proto3" json:"rules_changed_by,omitempty"`
	RulesChangedAt           uint64                 `protobuf:"varint,29,opt,name=rules_changed_at,proto3" json:"rules_changed_at,omitempty"`
	ClientName               string                 `protobuf:"bytes,30,opt,name=client_name,proto3" json:"client_name,omitempty"`
	LastScore                *LastScore             `protobuf:"bytes,31,opt,name=last_score,proto3" json:"last_score,omitempty"`
	Teams                    []*Team                `protobuf:"bytes,32,rep,name=teams,proto3" json:"teams,omitempty"`
	Contested                bool                   `protobuf:"varint,33,opt,name=contested,proto3" json:"contested,omitempty"`
	PayloadMultiplier        float64                `protobuf:"fixed64,34,opt,name=payload_multiplier,proto3" json:"payload_multiplier,omitempty"`
	PayloadCheckpoint        int32                  `protobuf:"varint,35,opt,name=payload_checkpoint,proto3" json:"payload_checkpoint,omitempty"`
	PayloadDistance          float64                `protobuf:"fixed64,36,opt,name=payload_distance,proto3" json:"payload_distance,omitempty"`
	PayloadDefenders         int32                  `protobuf:"varint,37,opt,name=payload_defenders,proto3" json:"payload_defenders,omitempty"`
	PayloadSpeed             float64                `protobuf:"fixed64,38,opt,name=payload_speed,proto3" json:"payload_speed,omitempty"`
	GameClock                float64                `protobuf:"fixed64,39,opt,name=game_clock,proto3" json:"game_clock,omitempty"`
	ErrCode                  int32                  `protobuf:"varint,40,opt,name=err_code,proto3" json:"err_code,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	mi := &file_nevr_gameapi_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{10}
}

func (x *SessionResponse) GetOrangeTeamRestartRequest() int32 {
	if x != nil {
		return x.OrangeTeamRestartRequest
	}
	return 0
}

func (x *SessionResponse) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *SessionResponse) GetGameClockDisplay() string {
	if x != nil {
		return x.GameClockDisplay
	}
	return ""
}

func (x *SessionResponse) GetGameStatus() string {
	if x != nil {
		return x.GameStatus
	}
	return ""
}

func (x *SessionResponse) GetSessionIP() string {
	if x != nil {
		return x.SessionIP
	}
	return ""
}

func (x *SessionResponse) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

func (x *SessionResponse) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *SessionResponse) GetDisc() *Disc {
	if x != nil {
		return x.Disc
	}
	return nil
}

func (x *SessionResponse) GetBlueRoundScore() int32 {
	if x != nil {
		return x.BlueRoundScore
	}
	return 0
}

func (x *SessionResponse) GetOrangePoints() int32 {
	if x != nil {
		return x.OrangePoints
	}
	return 0
}

func (x *SessionResponse) GetPrivateMatch() bool {
	if x != nil {
		return x.PrivateMatch
	}
	return false
}

func (x *SessionResponse) GetBlueTeamRestartRequest() int32 {
	if x != nil {
		return x.BlueTeamRestartRequest
	}
	return 0
}

func (x *SessionResponse) GetTournamentMatch() bool {
	if x != nil {
		return x.TournamentMatch
	}
	return false
}

func (x *SessionResponse) GetOrangeRoundScore() int32 {
	if x != nil {
		return x.OrangeRoundScore
	}
	return 0
}

func (x *SessionResponse) GetTotalRoundCount() int32 {
	if x != nil {
		return x.TotalRoundCount
	}
	return 0
}

func (x *SessionResponse) GetBluePoints() int32 {
	if x != nil {
		return x.BluePoints
	}
	return 0
}

func (x *SessionResponse) GetLastThrow() *LastThrowInfo {
	if x != nil {
		return x.LastThrow
	}
	return nil
}

func (x *SessionResponse) GetPlayer() *PlayerRoot {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *SessionResponse) GetPause() *PauseState {
	if x != nil {
		return x.Pause
	}
	return nil
}

func (x *SessionResponse) GetPossession() []int32 {
	if x != nil {
		return x.Possession
	}
	return nil
}

func (x *SessionResponse) GetLeftShoulderPressed() float64 {
	if x != nil {
		return x.LeftShoulderPressed
	}
	return 0
}

func (x *SessionResponse) GetRightShoulderPressed() float64 {
	if x != nil {
		return x.RightShoulderPressed
	}
	return 0
}

func (x *SessionResponse) GetLeftShoulderPressed2() float64 {
	if x != nil {
		return x.LeftShoulderPressed2
	}
	return 0
}

func (x *SessionResponse) GetRightShoulderPressed2() float64 {
	if x != nil {
		return x.RightShoulderPressed2
	}
	return 0
}

func (x *SessionResponse) GetRulesChangedBy() string {
	if x != nil {
		return x.RulesChangedBy
	}
	return ""
}

func (x *SessionResponse) GetRulesChangedAt() uint64 {
	if x != nil {
		return x.RulesChangedAt
	}
	return 0
}

func (x *SessionResponse) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *SessionResponse) GetLastScore() *LastScore {
	if x != nil {
		return x.LastScore
	}
	return nil
}

func (x *SessionResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *SessionResponse) GetContested() bool {
	if x != nil {
		return x.Contested
	}
	return false
}

func (x *SessionResponse) GetPayloadMultiplier() float64 {
	if x != nil {
		return x.PayloadMultiplier
	}
	return 0
}

func (x *SessionResponse) GetPayloadCheckpoint() int32 {
	if x != nil {
		return x.PayloadCheckpoint
	}
	return 0
}

func (x *SessionResponse) GetPayloadDistance() float64 {
	if x != nil {
		return x.PayloadDistance
	}
	return 0
}

func (x *SessionResponse) GetPayloadDefenders() int32 {
	if x != nil {
		return x.PayloadDefenders
	}
	return 0
}

func (x *SessionResponse) GetPayloadSpeed() float64 {
	if x != nil {
		return x.PayloadSpeed
	}
	return 0
}

func (x *SessionResponse) GetGameClock() float64 {
	if x != nil {
		return x.GameClock
	}
	return 0
}

func (x *SessionResponse) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

// Represents a 3D translation vector.
type BoneTranslation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	V             []float64              `protobuf:"fixed64,1,rep,packed,name=v,proto3" json:"v,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoneTranslation) Reset() {
	*x = BoneTranslation{}
	mi := &file_nevr_gameapi_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoneTranslation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoneTranslation) ProtoMessage() {}

func (x *BoneTranslation) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoneTranslation.ProtoReflect.Descriptor instead.
func (*BoneTranslation) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{11}
}

func (x *BoneTranslation) GetV() []float64 {
	if x != nil {
		return x.V
	}
	return nil
}

// Represents a 4D quaternion for rotation.
type BoneOrientation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	V             []float64              `protobuf:"fixed64,1,rep,packed,name=v,proto3" json:"v,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoneOrientation) Reset() {
	*x = BoneOrientation{}
	mi := &file_nevr_gameapi_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoneOrientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoneOrientation) ProtoMessage() {}

func (x *BoneOrientation) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoneOrientation.ProtoReflect.Descriptor instead.
func (*BoneOrientation) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{12}
}

func (x *BoneOrientation) GetV() []float64 {
	if x != nil {
		return x.V
	}
	return nil
}

// Represents bone data for a single player.
type PlayerBones struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoneT         *BoneTranslation       `protobuf:"bytes,1,opt,name=bone_t,proto3" json:"bone_t,omitempty"`
	XPID          int32                  `protobuf:"varint,2,opt,name=XPID,json=playerid,proto3" json:"XPID,omitempty"`
	BoneO         *BoneOrientation       `protobuf:"bytes,3,opt,name=bone_o,proto3" json:"bone_o,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerBones) Reset() {
	*x = PlayerBones{}
	mi := &file_nevr_gameapi_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBones) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBones) ProtoMessage() {}

func (x *PlayerBones) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBones.ProtoReflect.Descriptor instead.
func (*PlayerBones) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerBones) GetBoneT() *BoneTranslation {
	if x != nil {
		return x.BoneT
	}
	return nil
}

func (x *PlayerBones) GetXPID() int32 {
	if x != nil {
		return x.XPID
	}
	return 0
}

func (x *PlayerBones) GetBoneO() *BoneOrientation {
	if x != nil {
		return x.BoneO
	}
	return nil
}

// Top-level message representing the user_bones API response.
type UserBonesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserBones     []*PlayerBones         `protobuf:"bytes,1,rep,name=user_bones,proto3" json:"user_bones,omitempty"`
	ErrCode       int32                  `protobuf:"varint,2,opt,name=err_code,proto3" json:"err_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserBonesResponse) Reset() {
	*x = UserBonesResponse{}
	mi := &file_nevr_gameapi_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserBonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBonesResponse) ProtoMessage() {}

func (x *UserBonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nevr_gameapi_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBonesResponse.ProtoReflect.Descriptor instead.
func (*UserBonesResponse) Descriptor() ([]byte, []int) {
	return file_nevr_gameapi_proto_rawDescGZIP(), []int{14}
}

func (x *UserBonesResponse) GetUserBones() []*PlayerBones {
	if x != nil {
		return x.UserBones
	}
	return nil
}

func (x *UserBonesResponse) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

var File_nevr_gameapi_proto protoreflect.FileDescriptor

const file_nevr_gameapi_proto_rawDesc = "" +
	"\n" +
	"\x12nevr_gameapi.proto\x12\fnevr.gameapi\"\xa0\x01\n" +
	"\x04Disc\x12\x1a\n" +
	"\bposition\x18\x01 \x03(\x01R\bposition\x12\x18\n" +
	"\aforward\x18\x02 \x03(\x01R\aforward\x12\x12\n" +
	"\x04left\x18\x03 \x03(\x01R\x04left\x12\x0e\n" +
	"\x02up\x18\x04 \x03(\x01R\x02up\x12\x1a\n" +
	"\bvelocity\x18\x05 \x03(\x01R\bvelocity\x12\"\n" +
	"\fbounce_count\x18\x06 \x01(\x05R\fbounce_count\"v\n" +
	"\bBodyPart\x12\x10\n" +
	"\x03pos\x18\x01 \x03(\x01R\x03pos\x12\x1a\n" +
	"\bposition\x18\x02 \x03(\x01R\bposition\x12\x18\n" +
	"\aforward\x18\x03 \x03(\x01R\aforward\x12\x12\n" +
	"\x04left\x18\x04 \x03(\x01R\x04left\x12\x0e\n" +
	"\x02up\x18\x05 \x03(\x01R\x02up\"\xd5\x02\n" +
	"\vPlayerStats\x12(\n" +
	"\x0fpossession_time\x18\x01 \x01(\x01R\x0fpossession_time\x12\x16\n" +
	"\x06points\x18\x02 \x01(\x05R\x06points\x12\x14\n" +
	"\x05saves\x18\x03 \x01(\x05R\x05saves\x12\x14\n" +
	"\x05goals\x18\x04 \x01(\x05R\x05goals\x12\x14\n" +
	"\x05stuns\x18\x05 \x01(\x05R\x05stuns\x12\x16\n" +
	"\x06passes\x18\x06 \x01(\x05R\x06passes\x12\x18\n" +
	"\acatches\x18\a \x01(\x05R\acatches\x12\x16\n" +
	"\x06steals\x18\b \x01(\x05R\x06steals\x12\x16\n" +
	"\x06blocks\x18\t \x01(\x05R\x06blocks\x12$\n" +
	"\rinterceptions\x18\n" +
	" \x01(\x05R\rinterceptions\x12\x18\n" +
	"\aassists\x18\v \x01(\x05R\aassists\x12 \n" +
	"\vshots_taken\x18\f \x01(\x05R\vshots_taken\"\xcc\x06\n" +
	"\n" +
	"TeamMember\x12\x16\n" +
	"\x06weapon\x18\x01 \x01(\tR\x06Weapon\x12\x1a\n" +
	"\bordnance\x18\x02 \x01(\tR\bOrdnance\x12\x17\n" +
	"\atac_mod\x18\x03 \x01(\tR\x06TacMod\x12\x10\n" +
	"\x03arm\x18\x04 \x01(\tR\x03Arm\x12*\n" +
	"\x04head\x18\x05 \x01(\v2\x16.nevr.gameapi.BodyPartR\x04head\x12*\n" +
	"\x04body\x18\x06 \x01(\v2\x16.nevr.gameapi.BodyPartR\x04body\x12\x1e\n" +
	"\x0eaccount_number\x18\a \x01(\x04R\x06userid\x12\x1a\n" +
	"\fdisplay_name\x18\b \x01(\tR\x04name\x12\x1d\n" +
	"\vslot_number\x18\t \x01(\x05R\bplayerid\x12\x1d\n" +
	"\rjersey_number\x18\n" +
	" \x01(\x05R\x06number\x12\x14\n" +
	"\x05level\x18\v \x01(\x05R\x05level\x12\x12\n" +
	"\x04ping\x18\f \x01(\x05R\x04ping\x12*\n" +
	"\x11packet_loss_ratio\x18\r \x01(\x01R\x0fpacketlossratio\x12\x1b\n" +
	"\n" +
	"is_stunned\x18\x0e \x01(\bR\astunned\x12%\n" +
	"\x0fis_invulnerable\x18\x0f \x01(\bR\finvulnerable\x12'\n" +
	"\x11left_holding_onto\x18\x10 \x01(\tR\fholding_left\x12)\n" +
	"\x12right_holding_onto\x18\x11 \x01(\tR\rholding_right\x12\x1d\n" +
	"\vis_blocking\x18\x12 \x01(\bR\bblocking\x12*\n" +
	"\x10is_emote_playing\x18\x13 \x01(\bR\x10is_emote_playing\x12\"\n" +
	"\x0ehas_possession\x18\x14 \x01(\bR\n" +
	"possession\x120\n" +
	"\tleft_hand\x18\x15 \x01(\v2\x16.nevr.gameapi.BodyPartR\x05lhand\x121\n" +
	"\n" +
	"right_hand\x18\x16 \x01(\v2\x16.nevr.gameapi.BodyPartR\x05rhand\x12\x1a\n" +
	"\bvelocity\x18\x17 \x03(\x01R\bvelocity\x12/\n" +
	"\x05stats\x18\x18 \x01(\v2\x19.nevr.gameapi.PlayerStatsR\x05stats\"\xd3\x02\n" +
	"\tTeamStats\x12(\n" +
	"\x0fpossession_time\x18\x01 \x01(\x01R\x0fpossession_time\x12\x16\n" +
	"\x06points\x18\x02 \x01(\x05R\x06points\x12\x14\n" +
	"\x05saves\x18\x03 \x01(\x05R\x05saves\x12\x14\n" +
	"\x05goals\x18\x04 \x01(\x05R\x05goals\x12\x14\n" +
	"\x05stuns\x18\x05 \x01(\x05R\x05stuns\x12\x16\n" +
	"\x06passes\x18\x06 \x01(\x05R\x06passes\x12\x18\n" +
	"\acatches\x18\a \x01(\x05R\acatches\x12\x16\n" +
	"\x06steals\x18\b \x01(\x05R\x06steals\x12\x16\n" +
	"\x06blocks\x18\t \x01(\x05R\x06blocks\x12$\n" +
	"\rinterceptions\x18\n" +
	" \x01(\x05R\rinterceptions\x12\x18\n" +
	"\aassists\x18\v \x01(\x05R\aassists\x12 \n" +
	"\vshots_taken\x18\f \x01(\x05R\vshots_taken\"\xa6\x01\n" +
	"\x04Team\x122\n" +
	"\aplayers\x18\x01 \x03(\v2\x18.nevr.gameapi.TeamMemberR\aplayers\x12\x17\n" +
	"\tteam_name\x18\x02 \x01(\tR\x04team\x12\"\n" +
	"\x0ehas_possession\x18\x03 \x01(\bR\n" +
	"possession\x12-\n" +
	"\x05stats\x18\x04 \x01(\v2\x17.nevr.gameapi.TeamStatsR\x05stats\"\xf7\x01\n" +
	"\tLastScore\x12\x1e\n" +
	"\n" +
	"disc_speed\x18\x01 \x01(\x01R\n" +
	"disc_speed\x12\x12\n" +
	"\x04team\x18\x02 \x01(\tR\x04team\x12\x1c\n" +
	"\tgoal_type\x18\x03 \x01(\tR\tgoal_type\x12\"\n" +
	"\fpoint_amount\x18\x04 \x01(\x05R\fpoint_amount\x12(\n" +
	"\x0fdistance_thrown\x18\x05 \x01(\x01R\x0fdistance_thrown\x12$\n" +
	"\rperson_scored\x18\x06 \x01(\tR\rperson_scored\x12$\n" +
	"\rassist_scored\x18\a \x01(\tR\rassist_scored\"\xe1\x04\n" +
	"\rLastThrowInfo\x12\x1c\n" +
	"\tarm_speed\x18\x01 \x01(\x01R\tarm_speed\x12 \n" +
	"\vtotal_speed\x18\x02 \x01(\x01R\vtotal_speed\x12,\n" +
	"\x11off_axis_spin_deg\x18\x03 \x01(\x01R\x11off_axis_spin_deg\x120\n" +
	"\x13wrist_throw_penalty\x18\x04 \x01(\x01R\x13wrist_throw_penalty\x12 \n" +
	"\vrot_per_sec\x18\x05 \x01(\x01R\vrot_per_sec\x12.\n" +
	"\x12pot_speed_from_rot\x18\x06 \x01(\x01R\x12pot_speed_from_rot\x12&\n" +
	"\x0espeed_from_arm\x18\a \x01(\x01R\x0espeed_from_arm\x120\n" +
	"\x13speed_from_movement\x18\b \x01(\x01R\x13speed_from_movement\x12*\n" +
	"\x10speed_from_wrist\x18\t \x01(\x01R\x10speed_from_wrist\x12:\n" +
	"\x18wrist_align_to_throw_deg\x18\n" +
	" \x01(\x01R\x18wrist_align_to_throw_deg\x12@\n" +
	"\x1bthrow_align_to_movement_deg\x18\v \x01(\x01R\x1bthrow_align_to_movement_deg\x12*\n" +
	"\x10off_axis_penalty\x18\f \x01(\x01R\x10off_axis_penalty\x12.\n" +
	"\x12throw_move_penalty\x18\r \x01(\x01R\x12throw_move_penalty\"\xd8\x01\n" +
	"\n" +
	"PauseState\x12\"\n" +
	"\fpaused_state\x18\x01 \x01(\tR\fpaused_state\x12$\n" +
	"\runpaused_team\x18\x02 \x01(\tR\runpaused_team\x124\n" +
	"\x15paused_requested_team\x18\x03 \x01(\tR\x15paused_requested_team\x12&\n" +
	"\x0eunpaused_timer\x18\x04 \x01(\x01R\x0eunpaused_timer\x12\"\n" +
	"\fpaused_timer\x18\x05 \x01(\x01R\fpaused_timer\"~\n" +
	"\n" +
	"PlayerRoot\x12\x18\n" +
	"\avr_left\x18\x01 \x03(\x01R\avr_left\x12 \n" +
	"\vvr_position\x18\x02 \x03(\x01R\vvr_position\x12\x1e\n" +
	"\n" +
	"vr_forward\x18\x03 \x03(\x01R\n" +
	"vr_forward\x12\x14\n" +
	"\x05vr_up\x18\x04 \x03(\x01R\x05vr_up\"\xdd\f\n" +
	"\x0fSessionResponse\x12@\n" +
	"\x1borange_team_restart_request\x18\x01 \x01(\x05R\x1borange_team_restart_request\x12\x1c\n" +
	"\tsessionID\x18\x02 \x01(\tR\tsessionid\x12.\n" +
	"\x12game_clock_display\x18\x03 \x01(\tR\x12game_clock_display\x12 \n" +
	"\vgame_status\x18\x04 \x01(\tR\vgame_status\x12\x1c\n" +
	"\tsessionIP\x18\x05 \x01(\tR\tsessionip\x12\x1e\n" +
	"\n" +
	"match_type\x18\x06 \x01(\tR\n" +
	"match_type\x12\x1a\n" +
	"\bmap_name\x18\a \x01(\tR\bmap_name\x12&\n" +
	"\x04disc\x18\b \x01(\v2\x12.nevr.gameapi.DiscR\x04disc\x12*\n" +
	"\x10blue_round_score\x18\v \x01(\x05R\x10blue_round_score\x12$\n" +
	"\rorange_points\x18\f \x01(\x05R\rorange_points\x12$\n" +
	"\rprivate_match\x18\x0e \x01(\bR\rprivate_match\x12<\n" +
	"\x19blue_team_restart_request\x18\x0f \x01(\x05R\x19blue_team_restart_request\x12*\n" +
	"\x10tournament_match\x18\x10 \x01(\bR\x10tournament_match\x12.\n" +
	"\x12orange_round_score\x18\x11 \x01(\x05R\x12orange_round_score\x12,\n" +
	"\x11total_round_count\x18\x12 \x01(\x05R\x11total_round_count\x12 \n" +
	"\vblue_points\x18\x13 \x01(\x05R\vblue_points\x12;\n" +
	"\n" +
	"last_throw\x18\x14 \x01(\v2\x1b.nevr.gameapi.LastThrowInfoR\n" +
	"last_throw\x120\n" +
	"\x06player\x18\x15 \x01(\v2\x18.nevr.gameapi.PlayerRootR\x06player\x12.\n" +
	"\x05pause\x18\x16 \x01(\v2\x18.nevr.gameapi.PauseStateR\x05pause\x12\x1e\n" +
	"\n" +
	"possession\x18\x17 \x03(\x05R\n" +
	"possession\x124\n" +
	"\x15left_shoulder_pressed\x18\x18 \x01(\x01R\x15left_shoulder_pressed\x126\n" +
	"\x16right_shoulder_pressed\x18\x19 \x01(\x01R\x16right_shoulder_pressed\x126\n" +
	"\x16left_shoulder_pressed2\x18\x1a \x01(\x01R\x16left_shoulder_pressed2\x128\n" +
	"\x17right_shoulder_pressed2\x18\x1b \x01(\x01R\x17right_shoulder_pressed2\x12*\n" +
	"\x10rules_changed_by\x18\x1c \x01(\tR\x10rules_changed_by\x12*\n" +
	"\x10rules_changed_at\x18\x1d \x01(\x04R\x10rules_changed_at\x12 \n" +
	"\vclient_name\x18\x1e \x01(\tR\vclient_name\x127\n" +
	"\n" +
	"last_score\x18\x1f \x01(\v2\x17.nevr.gameapi.LastScoreR\n" +
	"last_score\x12(\n" +
	"\x05teams\x18  \x03(\v2\x12.nevr.gameapi.TeamR\x05teams\x12\x1c\n" +
	"\tcontested\x18! \x01(\bR\tcontested\x12.\n" +
	"\x12payload_multiplier\x18\" \x01(\x01R\x12payload_multiplier\x12.\n" +
	"\x12payload_checkpoint\x18# \x01(\x05R\x12payload_checkpoint\x12*\n" +
	"\x10payload_distance\x18$ \x01(\x01R\x10payload_distance\x12,\n" +
	"\x11payload_defenders\x18% \x01(\x05R\x11payload_defenders\x12$\n" +
	"\rpayload_speed\x18& \x01(\x01R\rpayload_speed\x12\x1e\n" +
	"\n" +
	"game_clock\x18' \x01(\x01R\n" +
	"game_clock\x12\x1a\n" +
	"\berr_code\x18( \x01(\x05R\berr_code\"\x1f\n" +
	"\x0fBoneTranslation\x12\f\n" +
	"\x01v\x18\x01 \x03(\x01R\x01v\"\x1f\n" +
	"\x0fBoneOrientation\x12\f\n" +
	"\x01v\x18\x01 \x03(\x01R\x01v\"\x93\x01\n" +
	"\vPlayerBones\x125\n" +
	"\x06bone_t\x18\x01 \x01(\v2\x1d.nevr.gameapi.BoneTranslationR\x06bone_t\x12\x16\n" +
	"\x04XPID\x18\x02 \x01(\x05R\bplayerid\x125\n" +
	"\x06bone_o\x18\x03 \x01(\v2\x1d.nevr.gameapi.BoneOrientationR\x06bone_o\"j\n" +
	"\x11UserBonesResponse\x129\n" +
	"\n" +
	"user_bones\x18\x01 \x03(\v2\x19.nevr.gameapi.PlayerBonesR\n" +
	"user_bones\x12\x1a\n" +
	"\berr_code\x18\x02 \x01(\x05R\berr_codeBi\n" +
	"\x1acom.echotools.nevr.gameapiB\fGameApiProtoP\x01Z+github.com/echotools/nevr-common/v3/gameapi\xaa\x02\rNevr.Protobufb\x06proto3"

var (
	file_nevr_gameapi_proto_rawDescOnce sync.Once
	file_nevr_gameapi_proto_rawDescData []byte
)

func file_nevr_gameapi_proto_rawDescGZIP() []byte {
	file_nevr_gameapi_proto_rawDescOnce.Do(func() {
		file_nevr_gameapi_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nevr_gameapi_proto_rawDesc), len(file_nevr_gameapi_proto_rawDesc)))
	})
	return file_nevr_gameapi_proto_rawDescData
}

var file_nevr_gameapi_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_nevr_gameapi_proto_goTypes = []any{
	(*Disc)(nil),              // 0: nevr.gameapi.Disc
	(*BodyPart)(nil),          // 1: nevr.gameapi.BodyPart
	(*PlayerStats)(nil),       // 2: nevr.gameapi.PlayerStats
	(*TeamMember)(nil),        // 3: nevr.gameapi.TeamMember
	(*TeamStats)(nil),         // 4: nevr.gameapi.TeamStats
	(*Team)(nil),              // 5: nevr.gameapi.Team
	(*LastScore)(nil),         // 6: nevr.gameapi.LastScore
	(*LastThrowInfo)(nil),     // 7: nevr.gameapi.LastThrowInfo
	(*PauseState)(nil),        // 8: nevr.gameapi.PauseState
	(*PlayerRoot)(nil),        // 9: nevr.gameapi.PlayerRoot
	(*SessionResponse)(nil),   // 10: nevr.gameapi.SessionResponse
	(*BoneTranslation)(nil),   // 11: nevr.gameapi.BoneTranslation
	(*BoneOrientation)(nil),   // 12: nevr.gameapi.BoneOrientation
	(*PlayerBones)(nil),       // 13: nevr.gameapi.PlayerBones
	(*UserBonesResponse)(nil), // 14: nevr.gameapi.UserBonesResponse
}
var file_nevr_gameapi_proto_depIdxs = []int32{
	1,  // 0: nevr.gameapi.TeamMember.head:type_name -> nevr.gameapi.BodyPart
	1,  // 1: nevr.gameapi.TeamMember.body:type_name -> nevr.gameapi.BodyPart
	1,  // 2: nevr.gameapi.TeamMember.left_hand:type_name -> nevr.gameapi.BodyPart
	1,  // 3: nevr.gameapi.TeamMember.right_hand:type_name -> nevr.gameapi.BodyPart
	2,  // 4: nevr.gameapi.TeamMember.stats:type_name -> nevr.gameapi.PlayerStats
	3,  // 5: nevr.gameapi.Team.players:type_name -> nevr.gameapi.TeamMember
	4,  // 6: nevr.gameapi.Team.stats:type_name -> nevr.gameapi.TeamStats
	0,  // 7: nevr.gameapi.SessionResponse.disc:type_name -> nevr.gameapi.Disc
	7,  // 8: nevr.gameapi.SessionResponse.last_throw:type_name -> nevr.gameapi.LastThrowInfo
	9,  // 9: nevr.gameapi.SessionResponse.player:type_name -> nevr.gameapi.PlayerRoot
	8,  // 10: nevr.gameapi.SessionResponse.pause:type_name -> nevr.gameapi.PauseState
	6,  // 11: nevr.gameapi.SessionResponse.last_score:type_name -> nevr.gameapi.LastScore
	5,  // 12: nevr.gameapi.SessionResponse.teams:type_name -> nevr.gameapi.Team
	11, // 13: nevr.gameapi.PlayerBones.bone_t:type_name -> nevr.gameapi.BoneTranslation
	12, // 14: nevr.gameapi.PlayerBones.bone_o:type_name -> nevr.gameapi.BoneOrientation
	13, // 15: nevr.gameapi.UserBonesResponse.user_bones:type_name -> nevr.gameapi.PlayerBones
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_nevr_gameapi_proto_init() }
func file_nevr_gameapi_proto_init() {
	if File_nevr_gameapi_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nevr_gameapi_proto_rawDesc), len(file_nevr_gameapi_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nevr_gameapi_proto_goTypes,
		DependencyIndexes: file_nevr_gameapi_proto_depIdxs,
		MessageInfos:      file_nevr_gameapi_proto_msgTypes,
	}.Build()
	File_nevr_gameapi_proto = out.File
	file_nevr_gameapi_proto_goTypes = nil
	file_nevr_gameapi_proto_depIdxs = nil
}
