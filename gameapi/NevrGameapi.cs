// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nevr_gameapi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nevr.Protobuf {

  /// <summary>Holder for reflection information generated from nevr_gameapi.proto</summary>
  public static partial class NevrGameapiReflection {

    #region Descriptor
    /// <summary>File descriptor for nevr_gameapi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NevrGameapiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJuZXZyX2dhbWVhcGkucHJvdG8SDG5ldnIuZ2FtZWFwaSKgAQoERGlzYxIa",
            "Cghwb3NpdGlvbhgBIAMoAVIIcG9zaXRpb24SGAoHZm9yd2FyZBgCIAMoAVIH",
            "Zm9yd2FyZBISCgRsZWZ0GAMgAygBUgRsZWZ0Eg4KAnVwGAQgAygBUgJ1cBIa",
            "Cgh2ZWxvY2l0eRgFIAMoAVIIdmVsb2NpdHkSIgoMYm91bmNlX2NvdW50GAYg",
            "ASgFUgxib3VuY2VfY291bnQidgoIQm9keVBhcnQSEAoDcG9zGAEgAygBUgNw",
            "b3MSGgoIcG9zaXRpb24YAiADKAFSCHBvc2l0aW9uEhgKB2ZvcndhcmQYAyAD",
            "KAFSB2ZvcndhcmQSEgoEbGVmdBgEIAMoAVIEbGVmdBIOCgJ1cBgFIAMoAVIC",
            "dXAi1QIKC1BsYXllclN0YXRzEigKD3Bvc3Nlc3Npb25fdGltZRgBIAEoAVIP",
            "cG9zc2Vzc2lvbl90aW1lEhYKBnBvaW50cxgCIAEoBVIGcG9pbnRzEhQKBXNh",
            "dmVzGAMgASgFUgVzYXZlcxIUCgVnb2FscxgEIAEoBVIFZ29hbHMSFAoFc3R1",
            "bnMYBSABKAVSBXN0dW5zEhYKBnBhc3NlcxgGIAEoBVIGcGFzc2VzEhgKB2Nh",
            "dGNoZXMYByABKAVSB2NhdGNoZXMSFgoGc3RlYWxzGAggASgFUgZzdGVhbHMS",
            "FgoGYmxvY2tzGAkgASgFUgZibG9ja3MSJAoNaW50ZXJjZXB0aW9ucxgKIAEo",
            "BVINaW50ZXJjZXB0aW9ucxIYCgdhc3Npc3RzGAsgASgFUgdhc3Npc3RzEiAK",
            "C3Nob3RzX3Rha2VuGAwgASgFUgtzaG90c190YWtlbiLMBgoKVGVhbU1lbWJl",
            "chIWCgZ3ZWFwb24YASABKAlSBldlYXBvbhIaCghvcmRuYW5jZRgCIAEoCVII",
            "T3JkbmFuY2USFwoHdGFjX21vZBgDIAEoCVIGVGFjTW9kEhAKA2FybRgEIAEo",
            "CVIDQXJtEioKBGhlYWQYBSABKAsyFi5uZXZyLmdhbWVhcGkuQm9keVBhcnRS",
            "BGhlYWQSKgoEYm9keRgGIAEoCzIWLm5ldnIuZ2FtZWFwaS5Cb2R5UGFydFIE",
            "Ym9keRIeCg5hY2NvdW50X251bWJlchgHIAEoBFIGdXNlcmlkEhoKDGRpc3Bs",
            "YXlfbmFtZRgIIAEoCVIEbmFtZRIdCgtzbG90X251bWJlchgJIAEoBVIIcGxh",
            "eWVyaWQSHQoNamVyc2V5X251bWJlchgKIAEoBVIGbnVtYmVyEhQKBWxldmVs",
            "GAsgASgFUgVsZXZlbBISCgRwaW5nGAwgASgFUgRwaW5nEioKEXBhY2tldF9s",
            "b3NzX3JhdGlvGA0gASgBUg9wYWNrZXRsb3NzcmF0aW8SGwoKaXNfc3R1bm5l",
            "ZBgOIAEoCFIHc3R1bm5lZBIlCg9pc19pbnZ1bG5lcmFibGUYDyABKAhSDGlu",
            "dnVsbmVyYWJsZRInChFsZWZ0X2hvbGRpbmdfb250bxgQIAEoCVIMaG9sZGlu",
            "Z19sZWZ0EikKEnJpZ2h0X2hvbGRpbmdfb250bxgRIAEoCVINaG9sZGluZ19y",
            "aWdodBIdCgtpc19ibG9ja2luZxgSIAEoCFIIYmxvY2tpbmcSKgoQaXNfZW1v",
            "dGVfcGxheWluZxgTIAEoCFIQaXNfZW1vdGVfcGxheWluZxIiCg5oYXNfcG9z",
            "c2Vzc2lvbhgUIAEoCFIKcG9zc2Vzc2lvbhIwCglsZWZ0X2hhbmQYFSABKAsy",
            "Fi5uZXZyLmdhbWVhcGkuQm9keVBhcnRSBWxoYW5kEjEKCnJpZ2h0X2hhbmQY",
            "FiABKAsyFi5uZXZyLmdhbWVhcGkuQm9keVBhcnRSBXJoYW5kEhoKCHZlbG9j",
            "aXR5GBcgAygBUgh2ZWxvY2l0eRIvCgVzdGF0cxgYIAEoCzIZLm5ldnIuZ2Ft",
            "ZWFwaS5QbGF5ZXJTdGF0c1IFc3RhdHMi0wIKCVRlYW1TdGF0cxIoCg9wb3Nz",
            "ZXNzaW9uX3RpbWUYASABKAFSD3Bvc3Nlc3Npb25fdGltZRIWCgZwb2ludHMY",
            "AiABKAVSBnBvaW50cxIUCgVzYXZlcxgDIAEoBVIFc2F2ZXMSFAoFZ29hbHMY",
            "BCABKAVSBWdvYWxzEhQKBXN0dW5zGAUgASgFUgVzdHVucxIWCgZwYXNzZXMY",
            "BiABKAVSBnBhc3NlcxIYCgdjYXRjaGVzGAcgASgFUgdjYXRjaGVzEhYKBnN0",
            "ZWFscxgIIAEoBVIGc3RlYWxzEhYKBmJsb2NrcxgJIAEoBVIGYmxvY2tzEiQK",
            "DWludGVyY2VwdGlvbnMYCiABKAVSDWludGVyY2VwdGlvbnMSGAoHYXNzaXN0",
            "cxgLIAEoBVIHYXNzaXN0cxIgCgtzaG90c190YWtlbhgMIAEoBVILc2hvdHNf",
            "dGFrZW4ipgEKBFRlYW0SMgoHcGxheWVycxgBIAMoCzIYLm5ldnIuZ2FtZWFw",
            "aS5UZWFtTWVtYmVyUgdwbGF5ZXJzEhcKCXRlYW1fbmFtZRgCIAEoCVIEdGVh",
            "bRIiCg5oYXNfcG9zc2Vzc2lvbhgDIAEoCFIKcG9zc2Vzc2lvbhItCgVzdGF0",
            "cxgEIAEoCzIXLm5ldnIuZ2FtZWFwaS5UZWFtU3RhdHNSBXN0YXRzIvcBCglM",
            "YXN0U2NvcmUSHgoKZGlzY19zcGVlZBgBIAEoAVIKZGlzY19zcGVlZBISCgR0",
            "ZWFtGAIgASgJUgR0ZWFtEhwKCWdvYWxfdHlwZRgDIAEoCVIJZ29hbF90eXBl",
            "EiIKDHBvaW50X2Ftb3VudBgEIAEoBVIMcG9pbnRfYW1vdW50EigKD2Rpc3Rh",
            "bmNlX3Rocm93bhgFIAEoAVIPZGlzdGFuY2VfdGhyb3duEiQKDXBlcnNvbl9z",
            "Y29yZWQYBiABKAlSDXBlcnNvbl9zY29yZWQSJAoNYXNzaXN0X3Njb3JlZBgH",
            "IAEoCVINYXNzaXN0X3Njb3JlZCLhBAoNTGFzdFRocm93SW5mbxIcCglhcm1f",
            "c3BlZWQYASABKAFSCWFybV9zcGVlZBIgCgt0b3RhbF9zcGVlZBgCIAEoAVIL",
            "dG90YWxfc3BlZWQSLAoRb2ZmX2F4aXNfc3Bpbl9kZWcYAyABKAFSEW9mZl9h",
            "eGlzX3NwaW5fZGVnEjAKE3dyaXN0X3Rocm93X3BlbmFsdHkYBCABKAFSE3dy",
            "aXN0X3Rocm93X3BlbmFsdHkSIAoLcm90X3Blcl9zZWMYBSABKAFSC3JvdF9w",
            "ZXJfc2VjEi4KEnBvdF9zcGVlZF9mcm9tX3JvdBgGIAEoAVIScG90X3NwZWVk",
            "X2Zyb21fcm90EiYKDnNwZWVkX2Zyb21fYXJtGAcgASgBUg5zcGVlZF9mcm9t",
            "X2FybRIwChNzcGVlZF9mcm9tX21vdmVtZW50GAggASgBUhNzcGVlZF9mcm9t",
            "X21vdmVtZW50EioKEHNwZWVkX2Zyb21fd3Jpc3QYCSABKAFSEHNwZWVkX2Zy",
            "b21fd3Jpc3QSOgoYd3Jpc3RfYWxpZ25fdG9fdGhyb3dfZGVnGAogASgBUhh3",
            "cmlzdF9hbGlnbl90b190aHJvd19kZWcSQAobdGhyb3dfYWxpZ25fdG9fbW92",
            "ZW1lbnRfZGVnGAsgASgBUht0aHJvd19hbGlnbl90b19tb3ZlbWVudF9kZWcS",
            "KgoQb2ZmX2F4aXNfcGVuYWx0eRgMIAEoAVIQb2ZmX2F4aXNfcGVuYWx0eRIu",
            "ChJ0aHJvd19tb3ZlX3BlbmFsdHkYDSABKAFSEnRocm93X21vdmVfcGVuYWx0",
            "eSLYAQoKUGF1c2VTdGF0ZRIiCgxwYXVzZWRfc3RhdGUYASABKAlSDHBhdXNl",
            "ZF9zdGF0ZRIkCg11bnBhdXNlZF90ZWFtGAIgASgJUg11bnBhdXNlZF90ZWFt",
            "EjQKFXBhdXNlZF9yZXF1ZXN0ZWRfdGVhbRgDIAEoCVIVcGF1c2VkX3JlcXVl",
            "c3RlZF90ZWFtEiYKDnVucGF1c2VkX3RpbWVyGAQgASgBUg51bnBhdXNlZF90",
            "aW1lchIiCgxwYXVzZWRfdGltZXIYBSABKAFSDHBhdXNlZF90aW1lciJ+CgpQ",
            "bGF5ZXJSb290EhgKB3ZyX2xlZnQYASADKAFSB3ZyX2xlZnQSIAoLdnJfcG9z",
            "aXRpb24YAiADKAFSC3ZyX3Bvc2l0aW9uEh4KCnZyX2ZvcndhcmQYAyADKAFS",
            "CnZyX2ZvcndhcmQSFAoFdnJfdXAYBCADKAFSBXZyX3VwIt0MCg9TZXNzaW9u",
            "UmVzcG9uc2USQAobb3JhbmdlX3RlYW1fcmVzdGFydF9yZXF1ZXN0GAEgASgF",
            "UhtvcmFuZ2VfdGVhbV9yZXN0YXJ0X3JlcXVlc3QSHAoJc2Vzc2lvbklEGAIg",
            "ASgJUglzZXNzaW9uaWQSLgoSZ2FtZV9jbG9ja19kaXNwbGF5GAMgASgJUhJn",
            "YW1lX2Nsb2NrX2Rpc3BsYXkSIAoLZ2FtZV9zdGF0dXMYBCABKAlSC2dhbWVf",
            "c3RhdHVzEhwKCXNlc3Npb25JUBgFIAEoCVIJc2Vzc2lvbmlwEh4KCm1hdGNo",
            "X3R5cGUYBiABKAlSCm1hdGNoX3R5cGUSGgoIbWFwX25hbWUYByABKAlSCG1h",
            "cF9uYW1lEiYKBGRpc2MYCCABKAsyEi5uZXZyLmdhbWVhcGkuRGlzY1IEZGlz",
            "YxIqChBibHVlX3JvdW5kX3Njb3JlGAsgASgFUhBibHVlX3JvdW5kX3Njb3Jl",
            "EiQKDW9yYW5nZV9wb2ludHMYDCABKAVSDW9yYW5nZV9wb2ludHMSJAoNcHJp",
            "dmF0ZV9tYXRjaBgOIAEoCFINcHJpdmF0ZV9tYXRjaBI8ChlibHVlX3RlYW1f",
            "cmVzdGFydF9yZXF1ZXN0GA8gASgFUhlibHVlX3RlYW1fcmVzdGFydF9yZXF1",
            "ZXN0EioKEHRvdXJuYW1lbnRfbWF0Y2gYECABKAhSEHRvdXJuYW1lbnRfbWF0",
            "Y2gSLgoSb3JhbmdlX3JvdW5kX3Njb3JlGBEgASgFUhJvcmFuZ2Vfcm91bmRf",
            "c2NvcmUSLAoRdG90YWxfcm91bmRfY291bnQYEiABKAVSEXRvdGFsX3JvdW5k",
            "X2NvdW50EiAKC2JsdWVfcG9pbnRzGBMgASgFUgtibHVlX3BvaW50cxI7Cgps",
            "YXN0X3Rocm93GBQgASgLMhsubmV2ci5nYW1lYXBpLkxhc3RUaHJvd0luZm9S",
            "Cmxhc3RfdGhyb3cSMAoGcGxheWVyGBUgASgLMhgubmV2ci5nYW1lYXBpLlBs",
            "YXllclJvb3RSBnBsYXllchIuCgVwYXVzZRgWIAEoCzIYLm5ldnIuZ2FtZWFw",
            "aS5QYXVzZVN0YXRlUgVwYXVzZRIeCgpwb3NzZXNzaW9uGBcgAygFUgpwb3Nz",
            "ZXNzaW9uEjQKFWxlZnRfc2hvdWxkZXJfcHJlc3NlZBgYIAEoAVIVbGVmdF9z",
            "aG91bGRlcl9wcmVzc2VkEjYKFnJpZ2h0X3Nob3VsZGVyX3ByZXNzZWQYGSAB",
            "KAFSFnJpZ2h0X3Nob3VsZGVyX3ByZXNzZWQSNgoWbGVmdF9zaG91bGRlcl9w",
            "cmVzc2VkMhgaIAEoAVIWbGVmdF9zaG91bGRlcl9wcmVzc2VkMhI4ChdyaWdo",
            "dF9zaG91bGRlcl9wcmVzc2VkMhgbIAEoAVIXcmlnaHRfc2hvdWxkZXJfcHJl",
            "c3NlZDISKgoQcnVsZXNfY2hhbmdlZF9ieRgcIAEoCVIQcnVsZXNfY2hhbmdl",
            "ZF9ieRIqChBydWxlc19jaGFuZ2VkX2F0GB0gASgEUhBydWxlc19jaGFuZ2Vk",
            "X2F0EiAKC2NsaWVudF9uYW1lGB4gASgJUgtjbGllbnRfbmFtZRI3CgpsYXN0",
            "X3Njb3JlGB8gASgLMhcubmV2ci5nYW1lYXBpLkxhc3RTY29yZVIKbGFzdF9z",
            "Y29yZRIoCgV0ZWFtcxggIAMoCzISLm5ldnIuZ2FtZWFwaS5UZWFtUgV0ZWFt",
            "cxIcCgljb250ZXN0ZWQYISABKAhSCWNvbnRlc3RlZBIuChJwYXlsb2FkX211",
            "bHRpcGxpZXIYIiABKAFSEnBheWxvYWRfbXVsdGlwbGllchIuChJwYXlsb2Fk",
            "X2NoZWNrcG9pbnQYIyABKAVSEnBheWxvYWRfY2hlY2twb2ludBIqChBwYXls",
            "b2FkX2Rpc3RhbmNlGCQgASgBUhBwYXlsb2FkX2Rpc3RhbmNlEiwKEXBheWxv",
            "YWRfZGVmZW5kZXJzGCUgASgFUhFwYXlsb2FkX2RlZmVuZGVycxIkCg1wYXls",
            "b2FkX3NwZWVkGCYgASgBUg1wYXlsb2FkX3NwZWVkEh4KCmdhbWVfY2xvY2sY",
            "JyABKAFSCmdhbWVfY2xvY2sSGgoIZXJyX2NvZGUYKCABKAVSCGVycl9jb2Rl",
            "Ih8KD0JvbmVUcmFuc2xhdGlvbhIMCgF2GAEgAygBUgF2Ih8KD0JvbmVPcmll",
            "bnRhdGlvbhIMCgF2GAEgAygBUgF2IpMBCgtQbGF5ZXJCb25lcxI1CgZib25l",
            "X3QYASABKAsyHS5uZXZyLmdhbWVhcGkuQm9uZVRyYW5zbGF0aW9uUgZib25l",
            "X3QSFgoEWFBJRBgCIAEoBVIIcGxheWVyaWQSNQoGYm9uZV9vGAMgASgLMh0u",
            "bmV2ci5nYW1lYXBpLkJvbmVPcmllbnRhdGlvblIGYm9uZV9vImoKEVVzZXJC",
            "b25lc1Jlc3BvbnNlEjkKCnVzZXJfYm9uZXMYASADKAsyGS5uZXZyLmdhbWVh",
            "cGkuUGxheWVyQm9uZXNSCnVzZXJfYm9uZXMSGgoIZXJyX2NvZGUYAiABKAVS",
            "CGVycl9jb2RlQmYKGmNvbS5lY2hvdG9vbHMubmV2ci5nYW1lYXBpQgxHYW1l",
            "QXBpUHJvdG9QAVooZ2l0aHViLmNvbS9lY2hvdG9vbHMvbmV2ci1jb21tb24v",
            "Z2FtZWFwaaoCDU5ldnIuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.Disc), global::Nevr.Protobuf.Disc.Parser, new[]{ "Position", "Forward", "Left", "Up", "Velocity", "BounceCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.BodyPart), global::Nevr.Protobuf.BodyPart.Parser, new[]{ "Pos", "Position", "Forward", "Left", "Up" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.PlayerStats), global::Nevr.Protobuf.PlayerStats.Parser, new[]{ "PossessionTime", "Points", "Saves", "Goals", "Stuns", "Passes", "Catches", "Steals", "Blocks", "Interceptions", "Assists", "ShotsTaken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.TeamMember), global::Nevr.Protobuf.TeamMember.Parser, new[]{ "Weapon", "Ordnance", "TacMod", "Arm", "Head", "Body", "AccountNumber", "DisplayName", "SlotNumber", "JerseyNumber", "Level", "Ping", "PacketLossRatio", "IsStunned", "IsInvulnerable", "LeftHoldingOnto", "RightHoldingOnto", "IsBlocking", "IsEmotePlaying", "HasPossession", "LeftHand", "RightHand", "Velocity", "Stats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.TeamStats), global::Nevr.Protobuf.TeamStats.Parser, new[]{ "PossessionTime", "Points", "Saves", "Goals", "Stuns", "Passes", "Catches", "Steals", "Blocks", "Interceptions", "Assists", "ShotsTaken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.Team), global::Nevr.Protobuf.Team.Parser, new[]{ "Players", "TeamName", "HasPossession", "Stats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.LastScore), global::Nevr.Protobuf.LastScore.Parser, new[]{ "DiscSpeed", "Team", "GoalType", "PointAmount", "DistanceThrown", "PersonScored", "AssistScored" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.LastThrowInfo), global::Nevr.Protobuf.LastThrowInfo.Parser, new[]{ "ArmSpeed", "TotalSpeed", "OffAxisSpinDeg", "WristThrowPenalty", "RotPerSec", "PotSpeedFromRot", "SpeedFromArm", "SpeedFromMovement", "SpeedFromWrist", "WristAlignToThrowDeg", "ThrowAlignToMovementDeg", "OffAxisPenalty", "ThrowMovePenalty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.PauseState), global::Nevr.Protobuf.PauseState.Parser, new[]{ "PausedState", "UnpausedTeam", "PausedRequestedTeam", "UnpausedTimer", "PausedTimer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.PlayerRoot), global::Nevr.Protobuf.PlayerRoot.Parser, new[]{ "VrLeft", "VrPosition", "VrForward", "VrUp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.SessionResponse), global::Nevr.Protobuf.SessionResponse.Parser, new[]{ "OrangeTeamRestartRequest", "SessionID", "GameClockDisplay", "GameStatus", "SessionIP", "MatchType", "MapName", "Disc", "BlueRoundScore", "OrangePoints", "PrivateMatch", "BlueTeamRestartRequest", "TournamentMatch", "OrangeRoundScore", "TotalRoundCount", "BluePoints", "LastThrow", "Player", "Pause", "Possession", "LeftShoulderPressed", "RightShoulderPressed", "LeftShoulderPressed2", "RightShoulderPressed2", "RulesChangedBy", "RulesChangedAt", "ClientName", "LastScore", "Teams", "Contested", "PayloadMultiplier", "PayloadCheckpoint", "PayloadDistance", "PayloadDefenders", "PayloadSpeed", "GameClock", "ErrCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.BoneTranslation), global::Nevr.Protobuf.BoneTranslation.Parser, new[]{ "V" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.BoneOrientation), global::Nevr.Protobuf.BoneOrientation.Parser, new[]{ "V" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.PlayerBones), global::Nevr.Protobuf.PlayerBones.Parser, new[]{ "BoneT", "XPID", "BoneO" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nevr.Protobuf.UserBonesResponse), global::Nevr.Protobuf.UserBonesResponse.Parser, new[]{ "UserBones", "ErrCode" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents the disc's physics properties.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Disc : pb::IMessage<Disc>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Disc> _parser = new pb::MessageParser<Disc>(() => new Disc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Disc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Disc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Disc(Disc other) : this() {
      position_ = other.position_.Clone();
      forward_ = other.forward_.Clone();
      left_ = other.left_.Clone();
      up_ = other.up_.Clone();
      velocity_ = other.velocity_.Clone();
      bounceCount_ = other.bounceCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Disc Clone() {
      return new Disc(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_position_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Position {
      get { return position_; }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_forward_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> forward_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Forward {
      get { return forward_; }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_left_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> left_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Left {
      get { return left_; }
    }

    /// <summary>Field number for the "up" field.</summary>
    public const int UpFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_up_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> up_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Up {
      get { return up_; }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_velocity_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> velocity_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Velocity {
      get { return velocity_; }
    }

    /// <summary>Field number for the "bounce_count" field.</summary>
    public const int BounceCountFieldNumber = 6;
    private int bounceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BounceCount {
      get { return bounceCount_; }
      set {
        bounceCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Disc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Disc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!position_.Equals(other.position_)) return false;
      if(!forward_.Equals(other.forward_)) return false;
      if(!left_.Equals(other.left_)) return false;
      if(!up_.Equals(other.up_)) return false;
      if(!velocity_.Equals(other.velocity_)) return false;
      if (BounceCount != other.BounceCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= position_.GetHashCode();
      hash ^= forward_.GetHashCode();
      hash ^= left_.GetHashCode();
      hash ^= up_.GetHashCode();
      hash ^= velocity_.GetHashCode();
      if (BounceCount != 0) hash ^= BounceCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      position_.WriteTo(output, _repeated_position_codec);
      forward_.WriteTo(output, _repeated_forward_codec);
      left_.WriteTo(output, _repeated_left_codec);
      up_.WriteTo(output, _repeated_up_codec);
      velocity_.WriteTo(output, _repeated_velocity_codec);
      if (BounceCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BounceCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      position_.WriteTo(ref output, _repeated_position_codec);
      forward_.WriteTo(ref output, _repeated_forward_codec);
      left_.WriteTo(ref output, _repeated_left_codec);
      up_.WriteTo(ref output, _repeated_up_codec);
      velocity_.WriteTo(ref output, _repeated_velocity_codec);
      if (BounceCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BounceCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += position_.CalculateSize(_repeated_position_codec);
      size += forward_.CalculateSize(_repeated_forward_codec);
      size += left_.CalculateSize(_repeated_left_codec);
      size += up_.CalculateSize(_repeated_up_codec);
      size += velocity_.CalculateSize(_repeated_velocity_codec);
      if (BounceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BounceCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Disc other) {
      if (other == null) {
        return;
      }
      position_.Add(other.position_);
      forward_.Add(other.forward_);
      left_.Add(other.left_);
      up_.Add(other.up_);
      velocity_.Add(other.velocity_);
      if (other.BounceCount != 0) {
        BounceCount = other.BounceCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
          case 18:
          case 17: {
            forward_.AddEntriesFrom(input, _repeated_forward_codec);
            break;
          }
          case 26:
          case 25: {
            left_.AddEntriesFrom(input, _repeated_left_codec);
            break;
          }
          case 34:
          case 33: {
            up_.AddEntriesFrom(input, _repeated_up_codec);
            break;
          }
          case 42:
          case 41: {
            velocity_.AddEntriesFrom(input, _repeated_velocity_codec);
            break;
          }
          case 48: {
            BounceCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            position_.AddEntriesFrom(ref input, _repeated_position_codec);
            break;
          }
          case 18:
          case 17: {
            forward_.AddEntriesFrom(ref input, _repeated_forward_codec);
            break;
          }
          case 26:
          case 25: {
            left_.AddEntriesFrom(ref input, _repeated_left_codec);
            break;
          }
          case 34:
          case 33: {
            up_.AddEntriesFrom(ref input, _repeated_up_codec);
            break;
          }
          case 42:
          case 41: {
            velocity_.AddEntriesFrom(ref input, _repeated_velocity_codec);
            break;
          }
          case 48: {
            BounceCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents an object's head, body, or hand properties.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BodyPart : pb::IMessage<BodyPart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BodyPart> _parser = new pb::MessageParser<BodyPart>(() => new BodyPart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BodyPart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BodyPart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BodyPart(BodyPart other) : this() {
      pos_ = other.pos_.Clone();
      position_ = other.position_.Clone();
      forward_ = other.forward_.Clone();
      left_ = other.left_.Clone();
      up_ = other.up_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BodyPart Clone() {
      return new BodyPart(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_pos_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> pos_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Pos {
      get { return pos_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_position_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> position_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Position {
      get { return position_; }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_forward_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> forward_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Forward {
      get { return forward_; }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_left_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> left_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Left {
      get { return left_; }
    }

    /// <summary>Field number for the "up" field.</summary>
    public const int UpFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_up_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> up_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Up {
      get { return up_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BodyPart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BodyPart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pos_.Equals(other.pos_)) return false;
      if(!position_.Equals(other.position_)) return false;
      if(!forward_.Equals(other.forward_)) return false;
      if(!left_.Equals(other.left_)) return false;
      if(!up_.Equals(other.up_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pos_.GetHashCode();
      hash ^= position_.GetHashCode();
      hash ^= forward_.GetHashCode();
      hash ^= left_.GetHashCode();
      hash ^= up_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pos_.WriteTo(output, _repeated_pos_codec);
      position_.WriteTo(output, _repeated_position_codec);
      forward_.WriteTo(output, _repeated_forward_codec);
      left_.WriteTo(output, _repeated_left_codec);
      up_.WriteTo(output, _repeated_up_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pos_.WriteTo(ref output, _repeated_pos_codec);
      position_.WriteTo(ref output, _repeated_position_codec);
      forward_.WriteTo(ref output, _repeated_forward_codec);
      left_.WriteTo(ref output, _repeated_left_codec);
      up_.WriteTo(ref output, _repeated_up_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += pos_.CalculateSize(_repeated_pos_codec);
      size += position_.CalculateSize(_repeated_position_codec);
      size += forward_.CalculateSize(_repeated_forward_codec);
      size += left_.CalculateSize(_repeated_left_codec);
      size += up_.CalculateSize(_repeated_up_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BodyPart other) {
      if (other == null) {
        return;
      }
      pos_.Add(other.pos_);
      position_.Add(other.position_);
      forward_.Add(other.forward_);
      left_.Add(other.left_);
      up_.Add(other.up_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
          case 18:
          case 17: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
          case 26:
          case 25: {
            forward_.AddEntriesFrom(input, _repeated_forward_codec);
            break;
          }
          case 34:
          case 33: {
            left_.AddEntriesFrom(input, _repeated_left_codec);
            break;
          }
          case 42:
          case 41: {
            up_.AddEntriesFrom(input, _repeated_up_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            pos_.AddEntriesFrom(ref input, _repeated_pos_codec);
            break;
          }
          case 18:
          case 17: {
            position_.AddEntriesFrom(ref input, _repeated_position_codec);
            break;
          }
          case 26:
          case 25: {
            forward_.AddEntriesFrom(ref input, _repeated_forward_codec);
            break;
          }
          case 34:
          case 33: {
            left_.AddEntriesFrom(ref input, _repeated_left_codec);
            break;
          }
          case 42:
          case 41: {
            up_.AddEntriesFrom(ref input, _repeated_up_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents player statistics.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlayerStats : pb::IMessage<PlayerStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerStats> _parser = new pb::MessageParser<PlayerStats>(() => new PlayerStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerStats(PlayerStats other) : this() {
      possessionTime_ = other.possessionTime_;
      points_ = other.points_;
      saves_ = other.saves_;
      goals_ = other.goals_;
      stuns_ = other.stuns_;
      passes_ = other.passes_;
      catches_ = other.catches_;
      steals_ = other.steals_;
      blocks_ = other.blocks_;
      interceptions_ = other.interceptions_;
      assists_ = other.assists_;
      shotsTaken_ = other.shotsTaken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerStats Clone() {
      return new PlayerStats(this);
    }

    /// <summary>Field number for the "possession_time" field.</summary>
    public const int PossessionTimeFieldNumber = 1;
    private double possessionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PossessionTime {
      get { return possessionTime_; }
      set {
        possessionTime_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private int points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    /// <summary>Field number for the "saves" field.</summary>
    public const int SavesFieldNumber = 3;
    private int saves_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Saves {
      get { return saves_; }
      set {
        saves_ = value;
      }
    }

    /// <summary>Field number for the "goals" field.</summary>
    public const int GoalsFieldNumber = 4;
    private int goals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Goals {
      get { return goals_; }
      set {
        goals_ = value;
      }
    }

    /// <summary>Field number for the "stuns" field.</summary>
    public const int StunsFieldNumber = 5;
    private int stuns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stuns {
      get { return stuns_; }
      set {
        stuns_ = value;
      }
    }

    /// <summary>Field number for the "passes" field.</summary>
    public const int PassesFieldNumber = 6;
    private int passes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Passes {
      get { return passes_; }
      set {
        passes_ = value;
      }
    }

    /// <summary>Field number for the "catches" field.</summary>
    public const int CatchesFieldNumber = 7;
    private int catches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Catches {
      get { return catches_; }
      set {
        catches_ = value;
      }
    }

    /// <summary>Field number for the "steals" field.</summary>
    public const int StealsFieldNumber = 8;
    private int steals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Steals {
      get { return steals_; }
      set {
        steals_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 9;
    private int blocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Blocks {
      get { return blocks_; }
      set {
        blocks_ = value;
      }
    }

    /// <summary>Field number for the "interceptions" field.</summary>
    public const int InterceptionsFieldNumber = 10;
    private int interceptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Interceptions {
      get { return interceptions_; }
      set {
        interceptions_ = value;
      }
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 11;
    private int assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Assists {
      get { return assists_; }
      set {
        assists_ = value;
      }
    }

    /// <summary>Field number for the "shots_taken" field.</summary>
    public const int ShotsTakenFieldNumber = 12;
    private int shotsTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShotsTaken {
      get { return shotsTaken_; }
      set {
        shotsTaken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PossessionTime, other.PossessionTime)) return false;
      if (Points != other.Points) return false;
      if (Saves != other.Saves) return false;
      if (Goals != other.Goals) return false;
      if (Stuns != other.Stuns) return false;
      if (Passes != other.Passes) return false;
      if (Catches != other.Catches) return false;
      if (Steals != other.Steals) return false;
      if (Blocks != other.Blocks) return false;
      if (Interceptions != other.Interceptions) return false;
      if (Assists != other.Assists) return false;
      if (ShotsTaken != other.ShotsTaken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PossessionTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PossessionTime);
      if (Points != 0) hash ^= Points.GetHashCode();
      if (Saves != 0) hash ^= Saves.GetHashCode();
      if (Goals != 0) hash ^= Goals.GetHashCode();
      if (Stuns != 0) hash ^= Stuns.GetHashCode();
      if (Passes != 0) hash ^= Passes.GetHashCode();
      if (Catches != 0) hash ^= Catches.GetHashCode();
      if (Steals != 0) hash ^= Steals.GetHashCode();
      if (Blocks != 0) hash ^= Blocks.GetHashCode();
      if (Interceptions != 0) hash ^= Interceptions.GetHashCode();
      if (Assists != 0) hash ^= Assists.GetHashCode();
      if (ShotsTaken != 0) hash ^= ShotsTaken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PossessionTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PossessionTime);
      }
      if (Points != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Points);
      }
      if (Saves != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Saves);
      }
      if (Goals != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Goals);
      }
      if (Stuns != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Stuns);
      }
      if (Passes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Passes);
      }
      if (Catches != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Catches);
      }
      if (Steals != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Steals);
      }
      if (Blocks != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Blocks);
      }
      if (Interceptions != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Interceptions);
      }
      if (Assists != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Assists);
      }
      if (ShotsTaken != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShotsTaken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PossessionTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PossessionTime);
      }
      if (Points != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Points);
      }
      if (Saves != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Saves);
      }
      if (Goals != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Goals);
      }
      if (Stuns != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Stuns);
      }
      if (Passes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Passes);
      }
      if (Catches != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Catches);
      }
      if (Steals != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Steals);
      }
      if (Blocks != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Blocks);
      }
      if (Interceptions != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Interceptions);
      }
      if (Assists != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Assists);
      }
      if (ShotsTaken != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShotsTaken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PossessionTime != 0D) {
        size += 1 + 8;
      }
      if (Points != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (Saves != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Saves);
      }
      if (Goals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goals);
      }
      if (Stuns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stuns);
      }
      if (Passes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passes);
      }
      if (Catches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Catches);
      }
      if (Steals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Steals);
      }
      if (Blocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blocks);
      }
      if (Interceptions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interceptions);
      }
      if (Assists != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assists);
      }
      if (ShotsTaken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotsTaken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerStats other) {
      if (other == null) {
        return;
      }
      if (other.PossessionTime != 0D) {
        PossessionTime = other.PossessionTime;
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      if (other.Saves != 0) {
        Saves = other.Saves;
      }
      if (other.Goals != 0) {
        Goals = other.Goals;
      }
      if (other.Stuns != 0) {
        Stuns = other.Stuns;
      }
      if (other.Passes != 0) {
        Passes = other.Passes;
      }
      if (other.Catches != 0) {
        Catches = other.Catches;
      }
      if (other.Steals != 0) {
        Steals = other.Steals;
      }
      if (other.Blocks != 0) {
        Blocks = other.Blocks;
      }
      if (other.Interceptions != 0) {
        Interceptions = other.Interceptions;
      }
      if (other.Assists != 0) {
        Assists = other.Assists;
      }
      if (other.ShotsTaken != 0) {
        ShotsTaken = other.ShotsTaken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            PossessionTime = input.ReadDouble();
            break;
          }
          case 16: {
            Points = input.ReadInt32();
            break;
          }
          case 24: {
            Saves = input.ReadInt32();
            break;
          }
          case 32: {
            Goals = input.ReadInt32();
            break;
          }
          case 40: {
            Stuns = input.ReadInt32();
            break;
          }
          case 48: {
            Passes = input.ReadInt32();
            break;
          }
          case 56: {
            Catches = input.ReadInt32();
            break;
          }
          case 64: {
            Steals = input.ReadInt32();
            break;
          }
          case 72: {
            Blocks = input.ReadInt32();
            break;
          }
          case 80: {
            Interceptions = input.ReadInt32();
            break;
          }
          case 88: {
            Assists = input.ReadInt32();
            break;
          }
          case 96: {
            ShotsTaken = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            PossessionTime = input.ReadDouble();
            break;
          }
          case 16: {
            Points = input.ReadInt32();
            break;
          }
          case 24: {
            Saves = input.ReadInt32();
            break;
          }
          case 32: {
            Goals = input.ReadInt32();
            break;
          }
          case 40: {
            Stuns = input.ReadInt32();
            break;
          }
          case 48: {
            Passes = input.ReadInt32();
            break;
          }
          case 56: {
            Catches = input.ReadInt32();
            break;
          }
          case 64: {
            Steals = input.ReadInt32();
            break;
          }
          case 72: {
            Blocks = input.ReadInt32();
            break;
          }
          case 80: {
            Interceptions = input.ReadInt32();
            break;
          }
          case 88: {
            Assists = input.ReadInt32();
            break;
          }
          case 96: {
            ShotsTaken = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents individual player data.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TeamMember : pb::IMessage<TeamMember>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMember> _parser = new pb::MessageParser<TeamMember>(() => new TeamMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamMember(TeamMember other) : this() {
      weapon_ = other.weapon_;
      ordnance_ = other.ordnance_;
      tacMod_ = other.tacMod_;
      arm_ = other.arm_;
      head_ = other.head_ != null ? other.head_.Clone() : null;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      accountNumber_ = other.accountNumber_;
      displayName_ = other.displayName_;
      slotNumber_ = other.slotNumber_;
      jerseyNumber_ = other.jerseyNumber_;
      level_ = other.level_;
      ping_ = other.ping_;
      packetLossRatio_ = other.packetLossRatio_;
      isStunned_ = other.isStunned_;
      isInvulnerable_ = other.isInvulnerable_;
      leftHoldingOnto_ = other.leftHoldingOnto_;
      rightHoldingOnto_ = other.rightHoldingOnto_;
      isBlocking_ = other.isBlocking_;
      isEmotePlaying_ = other.isEmotePlaying_;
      hasPossession_ = other.hasPossession_;
      leftHand_ = other.leftHand_ != null ? other.leftHand_.Clone() : null;
      rightHand_ = other.rightHand_ != null ? other.rightHand_.Clone() : null;
      velocity_ = other.velocity_.Clone();
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamMember Clone() {
      return new TeamMember(this);
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 1;
    private string weapon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Weapon {
      get { return weapon_; }
      set {
        weapon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ordnance" field.</summary>
    public const int OrdnanceFieldNumber = 2;
    private string ordnance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ordnance {
      get { return ordnance_; }
      set {
        ordnance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tac_mod" field.</summary>
    public const int TacModFieldNumber = 3;
    private string tacMod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TacMod {
      get { return tacMod_; }
      set {
        tacMod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arm" field.</summary>
    public const int ArmFieldNumber = 4;
    private string arm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Arm {
      get { return arm_; }
      set {
        arm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 5;
    private global::Nevr.Protobuf.BodyPart head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.BodyPart Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 6;
    private global::Nevr.Protobuf.BodyPart body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.BodyPart Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    /// <summary>Field number for the "account_number" field.</summary>
    public const int AccountNumberFieldNumber = 7;
    private ulong accountNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 8;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slot_number" field.</summary>
    public const int SlotNumberFieldNumber = 9;
    private int slotNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SlotNumber {
      get { return slotNumber_; }
      set {
        slotNumber_ = value;
      }
    }

    /// <summary>Field number for the "jersey_number" field.</summary>
    public const int JerseyNumberFieldNumber = 10;
    private int jerseyNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JerseyNumber {
      get { return jerseyNumber_; }
      set {
        jerseyNumber_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 11;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 12;
    private int ping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ping {
      get { return ping_; }
      set {
        ping_ = value;
      }
    }

    /// <summary>Field number for the "packet_loss_ratio" field.</summary>
    public const int PacketLossRatioFieldNumber = 13;
    private double packetLossRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PacketLossRatio {
      get { return packetLossRatio_; }
      set {
        packetLossRatio_ = value;
      }
    }

    /// <summary>Field number for the "is_stunned" field.</summary>
    public const int IsStunnedFieldNumber = 14;
    private bool isStunned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsStunned {
      get { return isStunned_; }
      set {
        isStunned_ = value;
      }
    }

    /// <summary>Field number for the "is_invulnerable" field.</summary>
    public const int IsInvulnerableFieldNumber = 15;
    private bool isInvulnerable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInvulnerable {
      get { return isInvulnerable_; }
      set {
        isInvulnerable_ = value;
      }
    }

    /// <summary>Field number for the "left_holding_onto" field.</summary>
    public const int LeftHoldingOntoFieldNumber = 16;
    private string leftHoldingOnto_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LeftHoldingOnto {
      get { return leftHoldingOnto_; }
      set {
        leftHoldingOnto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "right_holding_onto" field.</summary>
    public const int RightHoldingOntoFieldNumber = 17;
    private string rightHoldingOnto_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RightHoldingOnto {
      get { return rightHoldingOnto_; }
      set {
        rightHoldingOnto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_blocking" field.</summary>
    public const int IsBlockingFieldNumber = 18;
    private bool isBlocking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBlocking {
      get { return isBlocking_; }
      set {
        isBlocking_ = value;
      }
    }

    /// <summary>Field number for the "is_emote_playing" field.</summary>
    public const int IsEmotePlayingFieldNumber = 19;
    private bool isEmotePlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEmotePlaying {
      get { return isEmotePlaying_; }
      set {
        isEmotePlaying_ = value;
      }
    }

    /// <summary>Field number for the "has_possession" field.</summary>
    public const int HasPossessionFieldNumber = 20;
    private bool hasPossession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPossession {
      get { return hasPossession_; }
      set {
        hasPossession_ = value;
      }
    }

    /// <summary>Field number for the "left_hand" field.</summary>
    public const int LeftHandFieldNumber = 21;
    private global::Nevr.Protobuf.BodyPart leftHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.BodyPart LeftHand {
      get { return leftHand_; }
      set {
        leftHand_ = value;
      }
    }

    /// <summary>Field number for the "right_hand" field.</summary>
    public const int RightHandFieldNumber = 22;
    private global::Nevr.Protobuf.BodyPart rightHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.BodyPart RightHand {
      get { return rightHand_; }
      set {
        rightHand_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 23;
    private static readonly pb::FieldCodec<double> _repeated_velocity_codec
        = pb::FieldCodec.ForDouble(186);
    private readonly pbc::RepeatedField<double> velocity_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Velocity {
      get { return velocity_; }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 24;
    private global::Nevr.Protobuf.PlayerStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.PlayerStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Weapon != other.Weapon) return false;
      if (Ordnance != other.Ordnance) return false;
      if (TacMod != other.TacMod) return false;
      if (Arm != other.Arm) return false;
      if (!object.Equals(Head, other.Head)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      if (AccountNumber != other.AccountNumber) return false;
      if (DisplayName != other.DisplayName) return false;
      if (SlotNumber != other.SlotNumber) return false;
      if (JerseyNumber != other.JerseyNumber) return false;
      if (Level != other.Level) return false;
      if (Ping != other.Ping) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PacketLossRatio, other.PacketLossRatio)) return false;
      if (IsStunned != other.IsStunned) return false;
      if (IsInvulnerable != other.IsInvulnerable) return false;
      if (LeftHoldingOnto != other.LeftHoldingOnto) return false;
      if (RightHoldingOnto != other.RightHoldingOnto) return false;
      if (IsBlocking != other.IsBlocking) return false;
      if (IsEmotePlaying != other.IsEmotePlaying) return false;
      if (HasPossession != other.HasPossession) return false;
      if (!object.Equals(LeftHand, other.LeftHand)) return false;
      if (!object.Equals(RightHand, other.RightHand)) return false;
      if(!velocity_.Equals(other.velocity_)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Weapon.Length != 0) hash ^= Weapon.GetHashCode();
      if (Ordnance.Length != 0) hash ^= Ordnance.GetHashCode();
      if (TacMod.Length != 0) hash ^= TacMod.GetHashCode();
      if (Arm.Length != 0) hash ^= Arm.GetHashCode();
      if (head_ != null) hash ^= Head.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (AccountNumber != 0UL) hash ^= AccountNumber.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (SlotNumber != 0) hash ^= SlotNumber.GetHashCode();
      if (JerseyNumber != 0) hash ^= JerseyNumber.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Ping != 0) hash ^= Ping.GetHashCode();
      if (PacketLossRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PacketLossRatio);
      if (IsStunned != false) hash ^= IsStunned.GetHashCode();
      if (IsInvulnerable != false) hash ^= IsInvulnerable.GetHashCode();
      if (LeftHoldingOnto.Length != 0) hash ^= LeftHoldingOnto.GetHashCode();
      if (RightHoldingOnto.Length != 0) hash ^= RightHoldingOnto.GetHashCode();
      if (IsBlocking != false) hash ^= IsBlocking.GetHashCode();
      if (IsEmotePlaying != false) hash ^= IsEmotePlaying.GetHashCode();
      if (HasPossession != false) hash ^= HasPossession.GetHashCode();
      if (leftHand_ != null) hash ^= LeftHand.GetHashCode();
      if (rightHand_ != null) hash ^= RightHand.GetHashCode();
      hash ^= velocity_.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Weapon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Weapon);
      }
      if (Ordnance.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ordnance);
      }
      if (TacMod.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TacMod);
      }
      if (Arm.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Arm);
      }
      if (head_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Head);
      }
      if (body_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Body);
      }
      if (AccountNumber != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AccountNumber);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DisplayName);
      }
      if (SlotNumber != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SlotNumber);
      }
      if (JerseyNumber != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JerseyNumber);
      }
      if (Level != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Level);
      }
      if (Ping != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Ping);
      }
      if (PacketLossRatio != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(PacketLossRatio);
      }
      if (IsStunned != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsStunned);
      }
      if (IsInvulnerable != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsInvulnerable);
      }
      if (LeftHoldingOnto.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(LeftHoldingOnto);
      }
      if (RightHoldingOnto.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(RightHoldingOnto);
      }
      if (IsBlocking != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsBlocking);
      }
      if (IsEmotePlaying != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsEmotePlaying);
      }
      if (HasPossession != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HasPossession);
      }
      if (leftHand_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LeftHand);
      }
      if (rightHand_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RightHand);
      }
      velocity_.WriteTo(output, _repeated_velocity_codec);
      if (stats_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Weapon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Weapon);
      }
      if (Ordnance.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ordnance);
      }
      if (TacMod.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TacMod);
      }
      if (Arm.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Arm);
      }
      if (head_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Head);
      }
      if (body_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Body);
      }
      if (AccountNumber != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AccountNumber);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DisplayName);
      }
      if (SlotNumber != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SlotNumber);
      }
      if (JerseyNumber != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JerseyNumber);
      }
      if (Level != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Level);
      }
      if (Ping != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Ping);
      }
      if (PacketLossRatio != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(PacketLossRatio);
      }
      if (IsStunned != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsStunned);
      }
      if (IsInvulnerable != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsInvulnerable);
      }
      if (LeftHoldingOnto.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(LeftHoldingOnto);
      }
      if (RightHoldingOnto.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(RightHoldingOnto);
      }
      if (IsBlocking != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsBlocking);
      }
      if (IsEmotePlaying != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsEmotePlaying);
      }
      if (HasPossession != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HasPossession);
      }
      if (leftHand_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LeftHand);
      }
      if (rightHand_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RightHand);
      }
      velocity_.WriteTo(ref output, _repeated_velocity_codec);
      if (stats_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Weapon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Weapon);
      }
      if (Ordnance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ordnance);
      }
      if (TacMod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TacMod);
      }
      if (Arm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arm);
      }
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (AccountNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccountNumber);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (SlotNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotNumber);
      }
      if (JerseyNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JerseyNumber);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Ping != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ping);
      }
      if (PacketLossRatio != 0D) {
        size += 1 + 8;
      }
      if (IsStunned != false) {
        size += 1 + 1;
      }
      if (IsInvulnerable != false) {
        size += 1 + 1;
      }
      if (LeftHoldingOnto.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LeftHoldingOnto);
      }
      if (RightHoldingOnto.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RightHoldingOnto);
      }
      if (IsBlocking != false) {
        size += 2 + 1;
      }
      if (IsEmotePlaying != false) {
        size += 2 + 1;
      }
      if (HasPossession != false) {
        size += 2 + 1;
      }
      if (leftHand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeftHand);
      }
      if (rightHand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RightHand);
      }
      size += velocity_.CalculateSize(_repeated_velocity_codec);
      if (stats_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TeamMember other) {
      if (other == null) {
        return;
      }
      if (other.Weapon.Length != 0) {
        Weapon = other.Weapon;
      }
      if (other.Ordnance.Length != 0) {
        Ordnance = other.Ordnance;
      }
      if (other.TacMod.Length != 0) {
        TacMod = other.TacMod;
      }
      if (other.Arm.Length != 0) {
        Arm = other.Arm;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Nevr.Protobuf.BodyPart();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Nevr.Protobuf.BodyPart();
        }
        Body.MergeFrom(other.Body);
      }
      if (other.AccountNumber != 0UL) {
        AccountNumber = other.AccountNumber;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.SlotNumber != 0) {
        SlotNumber = other.SlotNumber;
      }
      if (other.JerseyNumber != 0) {
        JerseyNumber = other.JerseyNumber;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Ping != 0) {
        Ping = other.Ping;
      }
      if (other.PacketLossRatio != 0D) {
        PacketLossRatio = other.PacketLossRatio;
      }
      if (other.IsStunned != false) {
        IsStunned = other.IsStunned;
      }
      if (other.IsInvulnerable != false) {
        IsInvulnerable = other.IsInvulnerable;
      }
      if (other.LeftHoldingOnto.Length != 0) {
        LeftHoldingOnto = other.LeftHoldingOnto;
      }
      if (other.RightHoldingOnto.Length != 0) {
        RightHoldingOnto = other.RightHoldingOnto;
      }
      if (other.IsBlocking != false) {
        IsBlocking = other.IsBlocking;
      }
      if (other.IsEmotePlaying != false) {
        IsEmotePlaying = other.IsEmotePlaying;
      }
      if (other.HasPossession != false) {
        HasPossession = other.HasPossession;
      }
      if (other.leftHand_ != null) {
        if (leftHand_ == null) {
          LeftHand = new global::Nevr.Protobuf.BodyPart();
        }
        LeftHand.MergeFrom(other.LeftHand);
      }
      if (other.rightHand_ != null) {
        if (rightHand_ == null) {
          RightHand = new global::Nevr.Protobuf.BodyPart();
        }
        RightHand.MergeFrom(other.RightHand);
      }
      velocity_.Add(other.velocity_);
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::Nevr.Protobuf.PlayerStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Weapon = input.ReadString();
            break;
          }
          case 18: {
            Ordnance = input.ReadString();
            break;
          }
          case 26: {
            TacMod = input.ReadString();
            break;
          }
          case 34: {
            Arm = input.ReadString();
            break;
          }
          case 42: {
            if (head_ == null) {
              Head = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(Head);
            break;
          }
          case 50: {
            if (body_ == null) {
              Body = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(Body);
            break;
          }
          case 56: {
            AccountNumber = input.ReadUInt64();
            break;
          }
          case 66: {
            DisplayName = input.ReadString();
            break;
          }
          case 72: {
            SlotNumber = input.ReadInt32();
            break;
          }
          case 80: {
            JerseyNumber = input.ReadInt32();
            break;
          }
          case 88: {
            Level = input.ReadInt32();
            break;
          }
          case 96: {
            Ping = input.ReadInt32();
            break;
          }
          case 105: {
            PacketLossRatio = input.ReadDouble();
            break;
          }
          case 112: {
            IsStunned = input.ReadBool();
            break;
          }
          case 120: {
            IsInvulnerable = input.ReadBool();
            break;
          }
          case 130: {
            LeftHoldingOnto = input.ReadString();
            break;
          }
          case 138: {
            RightHoldingOnto = input.ReadString();
            break;
          }
          case 144: {
            IsBlocking = input.ReadBool();
            break;
          }
          case 152: {
            IsEmotePlaying = input.ReadBool();
            break;
          }
          case 160: {
            HasPossession = input.ReadBool();
            break;
          }
          case 170: {
            if (leftHand_ == null) {
              LeftHand = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(LeftHand);
            break;
          }
          case 178: {
            if (rightHand_ == null) {
              RightHand = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(RightHand);
            break;
          }
          case 186:
          case 185: {
            velocity_.AddEntriesFrom(input, _repeated_velocity_codec);
            break;
          }
          case 194: {
            if (stats_ == null) {
              Stats = new global::Nevr.Protobuf.PlayerStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Weapon = input.ReadString();
            break;
          }
          case 18: {
            Ordnance = input.ReadString();
            break;
          }
          case 26: {
            TacMod = input.ReadString();
            break;
          }
          case 34: {
            Arm = input.ReadString();
            break;
          }
          case 42: {
            if (head_ == null) {
              Head = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(Head);
            break;
          }
          case 50: {
            if (body_ == null) {
              Body = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(Body);
            break;
          }
          case 56: {
            AccountNumber = input.ReadUInt64();
            break;
          }
          case 66: {
            DisplayName = input.ReadString();
            break;
          }
          case 72: {
            SlotNumber = input.ReadInt32();
            break;
          }
          case 80: {
            JerseyNumber = input.ReadInt32();
            break;
          }
          case 88: {
            Level = input.ReadInt32();
            break;
          }
          case 96: {
            Ping = input.ReadInt32();
            break;
          }
          case 105: {
            PacketLossRatio = input.ReadDouble();
            break;
          }
          case 112: {
            IsStunned = input.ReadBool();
            break;
          }
          case 120: {
            IsInvulnerable = input.ReadBool();
            break;
          }
          case 130: {
            LeftHoldingOnto = input.ReadString();
            break;
          }
          case 138: {
            RightHoldingOnto = input.ReadString();
            break;
          }
          case 144: {
            IsBlocking = input.ReadBool();
            break;
          }
          case 152: {
            IsEmotePlaying = input.ReadBool();
            break;
          }
          case 160: {
            HasPossession = input.ReadBool();
            break;
          }
          case 170: {
            if (leftHand_ == null) {
              LeftHand = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(LeftHand);
            break;
          }
          case 178: {
            if (rightHand_ == null) {
              RightHand = new global::Nevr.Protobuf.BodyPart();
            }
            input.ReadMessage(RightHand);
            break;
          }
          case 186:
          case 185: {
            velocity_.AddEntriesFrom(ref input, _repeated_velocity_codec);
            break;
          }
          case 194: {
            if (stats_ == null) {
              Stats = new global::Nevr.Protobuf.PlayerStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents team statistics.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TeamStats : pb::IMessage<TeamStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamStats> _parser = new pb::MessageParser<TeamStats>(() => new TeamStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TeamStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamStats(TeamStats other) : this() {
      possessionTime_ = other.possessionTime_;
      points_ = other.points_;
      saves_ = other.saves_;
      goals_ = other.goals_;
      stuns_ = other.stuns_;
      passes_ = other.passes_;
      catches_ = other.catches_;
      steals_ = other.steals_;
      blocks_ = other.blocks_;
      interceptions_ = other.interceptions_;
      assists_ = other.assists_;
      shotsTaken_ = other.shotsTaken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamStats Clone() {
      return new TeamStats(this);
    }

    /// <summary>Field number for the "possession_time" field.</summary>
    public const int PossessionTimeFieldNumber = 1;
    private double possessionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PossessionTime {
      get { return possessionTime_; }
      set {
        possessionTime_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private int points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    /// <summary>Field number for the "saves" field.</summary>
    public const int SavesFieldNumber = 3;
    private int saves_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Saves {
      get { return saves_; }
      set {
        saves_ = value;
      }
    }

    /// <summary>Field number for the "goals" field.</summary>
    public const int GoalsFieldNumber = 4;
    private int goals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Goals {
      get { return goals_; }
      set {
        goals_ = value;
      }
    }

    /// <summary>Field number for the "stuns" field.</summary>
    public const int StunsFieldNumber = 5;
    private int stuns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stuns {
      get { return stuns_; }
      set {
        stuns_ = value;
      }
    }

    /// <summary>Field number for the "passes" field.</summary>
    public const int PassesFieldNumber = 6;
    private int passes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Passes {
      get { return passes_; }
      set {
        passes_ = value;
      }
    }

    /// <summary>Field number for the "catches" field.</summary>
    public const int CatchesFieldNumber = 7;
    private int catches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Catches {
      get { return catches_; }
      set {
        catches_ = value;
      }
    }

    /// <summary>Field number for the "steals" field.</summary>
    public const int StealsFieldNumber = 8;
    private int steals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Steals {
      get { return steals_; }
      set {
        steals_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 9;
    private int blocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Blocks {
      get { return blocks_; }
      set {
        blocks_ = value;
      }
    }

    /// <summary>Field number for the "interceptions" field.</summary>
    public const int InterceptionsFieldNumber = 10;
    private int interceptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Interceptions {
      get { return interceptions_; }
      set {
        interceptions_ = value;
      }
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 11;
    private int assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Assists {
      get { return assists_; }
      set {
        assists_ = value;
      }
    }

    /// <summary>Field number for the "shots_taken" field.</summary>
    public const int ShotsTakenFieldNumber = 12;
    private int shotsTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShotsTaken {
      get { return shotsTaken_; }
      set {
        shotsTaken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TeamStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TeamStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PossessionTime, other.PossessionTime)) return false;
      if (Points != other.Points) return false;
      if (Saves != other.Saves) return false;
      if (Goals != other.Goals) return false;
      if (Stuns != other.Stuns) return false;
      if (Passes != other.Passes) return false;
      if (Catches != other.Catches) return false;
      if (Steals != other.Steals) return false;
      if (Blocks != other.Blocks) return false;
      if (Interceptions != other.Interceptions) return false;
      if (Assists != other.Assists) return false;
      if (ShotsTaken != other.ShotsTaken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PossessionTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PossessionTime);
      if (Points != 0) hash ^= Points.GetHashCode();
      if (Saves != 0) hash ^= Saves.GetHashCode();
      if (Goals != 0) hash ^= Goals.GetHashCode();
      if (Stuns != 0) hash ^= Stuns.GetHashCode();
      if (Passes != 0) hash ^= Passes.GetHashCode();
      if (Catches != 0) hash ^= Catches.GetHashCode();
      if (Steals != 0) hash ^= Steals.GetHashCode();
      if (Blocks != 0) hash ^= Blocks.GetHashCode();
      if (Interceptions != 0) hash ^= Interceptions.GetHashCode();
      if (Assists != 0) hash ^= Assists.GetHashCode();
      if (ShotsTaken != 0) hash ^= ShotsTaken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PossessionTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PossessionTime);
      }
      if (Points != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Points);
      }
      if (Saves != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Saves);
      }
      if (Goals != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Goals);
      }
      if (Stuns != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Stuns);
      }
      if (Passes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Passes);
      }
      if (Catches != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Catches);
      }
      if (Steals != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Steals);
      }
      if (Blocks != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Blocks);
      }
      if (Interceptions != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Interceptions);
      }
      if (Assists != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Assists);
      }
      if (ShotsTaken != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShotsTaken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PossessionTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PossessionTime);
      }
      if (Points != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Points);
      }
      if (Saves != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Saves);
      }
      if (Goals != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Goals);
      }
      if (Stuns != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Stuns);
      }
      if (Passes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Passes);
      }
      if (Catches != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Catches);
      }
      if (Steals != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Steals);
      }
      if (Blocks != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Blocks);
      }
      if (Interceptions != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Interceptions);
      }
      if (Assists != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Assists);
      }
      if (ShotsTaken != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShotsTaken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PossessionTime != 0D) {
        size += 1 + 8;
      }
      if (Points != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (Saves != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Saves);
      }
      if (Goals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goals);
      }
      if (Stuns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stuns);
      }
      if (Passes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passes);
      }
      if (Catches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Catches);
      }
      if (Steals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Steals);
      }
      if (Blocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blocks);
      }
      if (Interceptions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interceptions);
      }
      if (Assists != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assists);
      }
      if (ShotsTaken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotsTaken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TeamStats other) {
      if (other == null) {
        return;
      }
      if (other.PossessionTime != 0D) {
        PossessionTime = other.PossessionTime;
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      if (other.Saves != 0) {
        Saves = other.Saves;
      }
      if (other.Goals != 0) {
        Goals = other.Goals;
      }
      if (other.Stuns != 0) {
        Stuns = other.Stuns;
      }
      if (other.Passes != 0) {
        Passes = other.Passes;
      }
      if (other.Catches != 0) {
        Catches = other.Catches;
      }
      if (other.Steals != 0) {
        Steals = other.Steals;
      }
      if (other.Blocks != 0) {
        Blocks = other.Blocks;
      }
      if (other.Interceptions != 0) {
        Interceptions = other.Interceptions;
      }
      if (other.Assists != 0) {
        Assists = other.Assists;
      }
      if (other.ShotsTaken != 0) {
        ShotsTaken = other.ShotsTaken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            PossessionTime = input.ReadDouble();
            break;
          }
          case 16: {
            Points = input.ReadInt32();
            break;
          }
          case 24: {
            Saves = input.ReadInt32();
            break;
          }
          case 32: {
            Goals = input.ReadInt32();
            break;
          }
          case 40: {
            Stuns = input.ReadInt32();
            break;
          }
          case 48: {
            Passes = input.ReadInt32();
            break;
          }
          case 56: {
            Catches = input.ReadInt32();
            break;
          }
          case 64: {
            Steals = input.ReadInt32();
            break;
          }
          case 72: {
            Blocks = input.ReadInt32();
            break;
          }
          case 80: {
            Interceptions = input.ReadInt32();
            break;
          }
          case 88: {
            Assists = input.ReadInt32();
            break;
          }
          case 96: {
            ShotsTaken = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            PossessionTime = input.ReadDouble();
            break;
          }
          case 16: {
            Points = input.ReadInt32();
            break;
          }
          case 24: {
            Saves = input.ReadInt32();
            break;
          }
          case 32: {
            Goals = input.ReadInt32();
            break;
          }
          case 40: {
            Stuns = input.ReadInt32();
            break;
          }
          case 48: {
            Passes = input.ReadInt32();
            break;
          }
          case 56: {
            Catches = input.ReadInt32();
            break;
          }
          case 64: {
            Steals = input.ReadInt32();
            break;
          }
          case 72: {
            Blocks = input.ReadInt32();
            break;
          }
          case 80: {
            Interceptions = input.ReadInt32();
            break;
          }
          case 88: {
            Assists = input.ReadInt32();
            break;
          }
          case 96: {
            ShotsTaken = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents team data.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Team : pb::IMessage<Team>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Team> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Team() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Team(Team other) : this() {
      players_ = other.players_.Clone();
      teamName_ = other.teamName_;
      hasPossession_ = other.hasPossession_;
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Team Clone() {
      return new Team(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nevr.Protobuf.TeamMember> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Nevr.Protobuf.TeamMember.Parser);
    private readonly pbc::RepeatedField<global::Nevr.Protobuf.TeamMember> players_ = new pbc::RepeatedField<global::Nevr.Protobuf.TeamMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Nevr.Protobuf.TeamMember> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "team_name" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private string teamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "has_possession" field.</summary>
    public const int HasPossessionFieldNumber = 3;
    private bool hasPossession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPossession {
      get { return hasPossession_; }
      set {
        hasPossession_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 4;
    private global::Nevr.Protobuf.TeamStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.TeamStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Team);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Team other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (TeamName != other.TeamName) return false;
      if (HasPossession != other.HasPossession) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (HasPossession != false) hash ^= HasPossession.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (HasPossession != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasPossession);
      }
      if (stats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (HasPossession != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasPossession);
      }
      if (stats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (HasPossession != false) {
        size += 1 + 1;
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Team other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.HasPossession != false) {
        HasPossession = other.HasPossession;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::Nevr.Protobuf.TeamStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 24: {
            HasPossession = input.ReadBool();
            break;
          }
          case 34: {
            if (stats_ == null) {
              Stats = new global::Nevr.Protobuf.TeamStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 24: {
            HasPossession = input.ReadBool();
            break;
          }
          case 34: {
            if (stats_ == null) {
              Stats = new global::Nevr.Protobuf.TeamStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents the last score event.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LastScore : pb::IMessage<LastScore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LastScore> _parser = new pb::MessageParser<LastScore>(() => new LastScore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LastScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LastScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LastScore(LastScore other) : this() {
      discSpeed_ = other.discSpeed_;
      team_ = other.team_;
      goalType_ = other.goalType_;
      pointAmount_ = other.pointAmount_;
      distanceThrown_ = other.distanceThrown_;
      personScored_ = other.personScored_;
      assistScored_ = other.assistScored_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LastScore Clone() {
      return new LastScore(this);
    }

    /// <summary>Field number for the "disc_speed" field.</summary>
    public const int DiscSpeedFieldNumber = 1;
    private double discSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DiscSpeed {
      get { return discSpeed_; }
      set {
        discSpeed_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private string team_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Team {
      get { return team_; }
      set {
        team_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "goal_type" field.</summary>
    public const int GoalTypeFieldNumber = 3;
    private string goalType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GoalType {
      get { return goalType_; }
      set {
        goalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "point_amount" field.</summary>
    public const int PointAmountFieldNumber = 4;
    private int pointAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PointAmount {
      get { return pointAmount_; }
      set {
        pointAmount_ = value;
      }
    }

    /// <summary>Field number for the "distance_thrown" field.</summary>
    public const int DistanceThrownFieldNumber = 5;
    private double distanceThrown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DistanceThrown {
      get { return distanceThrown_; }
      set {
        distanceThrown_ = value;
      }
    }

    /// <summary>Field number for the "person_scored" field.</summary>
    public const int PersonScoredFieldNumber = 6;
    private string personScored_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PersonScored {
      get { return personScored_; }
      set {
        personScored_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assist_scored" field.</summary>
    public const int AssistScoredFieldNumber = 7;
    private string assistScored_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssistScored {
      get { return assistScored_; }
      set {
        assistScored_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LastScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LastScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DiscSpeed, other.DiscSpeed)) return false;
      if (Team != other.Team) return false;
      if (GoalType != other.GoalType) return false;
      if (PointAmount != other.PointAmount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DistanceThrown, other.DistanceThrown)) return false;
      if (PersonScored != other.PersonScored) return false;
      if (AssistScored != other.AssistScored) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DiscSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DiscSpeed);
      if (Team.Length != 0) hash ^= Team.GetHashCode();
      if (GoalType.Length != 0) hash ^= GoalType.GetHashCode();
      if (PointAmount != 0) hash ^= PointAmount.GetHashCode();
      if (DistanceThrown != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DistanceThrown);
      if (PersonScored.Length != 0) hash ^= PersonScored.GetHashCode();
      if (AssistScored.Length != 0) hash ^= AssistScored.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DiscSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DiscSpeed);
      }
      if (Team.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Team);
      }
      if (GoalType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GoalType);
      }
      if (PointAmount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PointAmount);
      }
      if (DistanceThrown != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DistanceThrown);
      }
      if (PersonScored.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PersonScored);
      }
      if (AssistScored.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AssistScored);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DiscSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DiscSpeed);
      }
      if (Team.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Team);
      }
      if (GoalType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GoalType);
      }
      if (PointAmount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PointAmount);
      }
      if (DistanceThrown != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DistanceThrown);
      }
      if (PersonScored.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PersonScored);
      }
      if (AssistScored.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AssistScored);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DiscSpeed != 0D) {
        size += 1 + 8;
      }
      if (Team.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Team);
      }
      if (GoalType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoalType);
      }
      if (PointAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointAmount);
      }
      if (DistanceThrown != 0D) {
        size += 1 + 8;
      }
      if (PersonScored.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersonScored);
      }
      if (AssistScored.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssistScored);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LastScore other) {
      if (other == null) {
        return;
      }
      if (other.DiscSpeed != 0D) {
        DiscSpeed = other.DiscSpeed;
      }
      if (other.Team.Length != 0) {
        Team = other.Team;
      }
      if (other.GoalType.Length != 0) {
        GoalType = other.GoalType;
      }
      if (other.PointAmount != 0) {
        PointAmount = other.PointAmount;
      }
      if (other.DistanceThrown != 0D) {
        DistanceThrown = other.DistanceThrown;
      }
      if (other.PersonScored.Length != 0) {
        PersonScored = other.PersonScored;
      }
      if (other.AssistScored.Length != 0) {
        AssistScored = other.AssistScored;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            DiscSpeed = input.ReadDouble();
            break;
          }
          case 18: {
            Team = input.ReadString();
            break;
          }
          case 26: {
            GoalType = input.ReadString();
            break;
          }
          case 32: {
            PointAmount = input.ReadInt32();
            break;
          }
          case 41: {
            DistanceThrown = input.ReadDouble();
            break;
          }
          case 50: {
            PersonScored = input.ReadString();
            break;
          }
          case 58: {
            AssistScored = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            DiscSpeed = input.ReadDouble();
            break;
          }
          case 18: {
            Team = input.ReadString();
            break;
          }
          case 26: {
            GoalType = input.ReadString();
            break;
          }
          case 32: {
            PointAmount = input.ReadInt32();
            break;
          }
          case 41: {
            DistanceThrown = input.ReadDouble();
            break;
          }
          case 50: {
            PersonScored = input.ReadString();
            break;
          }
          case 58: {
            AssistScored = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents the last throw event.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LastThrowInfo : pb::IMessage<LastThrowInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LastThrowInfo> _parser = new pb::MessageParser<LastThrowInfo>(() => new LastThrowInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LastThrowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LastThrowInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LastThrowInfo(LastThrowInfo other) : this() {
      armSpeed_ = other.armSpeed_;
      totalSpeed_ = other.totalSpeed_;
      offAxisSpinDeg_ = other.offAxisSpinDeg_;
      wristThrowPenalty_ = other.wristThrowPenalty_;
      rotPerSec_ = other.rotPerSec_;
      potSpeedFromRot_ = other.potSpeedFromRot_;
      speedFromArm_ = other.speedFromArm_;
      speedFromMovement_ = other.speedFromMovement_;
      speedFromWrist_ = other.speedFromWrist_;
      wristAlignToThrowDeg_ = other.wristAlignToThrowDeg_;
      throwAlignToMovementDeg_ = other.throwAlignToMovementDeg_;
      offAxisPenalty_ = other.offAxisPenalty_;
      throwMovePenalty_ = other.throwMovePenalty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LastThrowInfo Clone() {
      return new LastThrowInfo(this);
    }

    /// <summary>Field number for the "arm_speed" field.</summary>
    public const int ArmSpeedFieldNumber = 1;
    private double armSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ArmSpeed {
      get { return armSpeed_; }
      set {
        armSpeed_ = value;
      }
    }

    /// <summary>Field number for the "total_speed" field.</summary>
    public const int TotalSpeedFieldNumber = 2;
    private double totalSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalSpeed {
      get { return totalSpeed_; }
      set {
        totalSpeed_ = value;
      }
    }

    /// <summary>Field number for the "off_axis_spin_deg" field.</summary>
    public const int OffAxisSpinDegFieldNumber = 3;
    private double offAxisSpinDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OffAxisSpinDeg {
      get { return offAxisSpinDeg_; }
      set {
        offAxisSpinDeg_ = value;
      }
    }

    /// <summary>Field number for the "wrist_throw_penalty" field.</summary>
    public const int WristThrowPenaltyFieldNumber = 4;
    private double wristThrowPenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WristThrowPenalty {
      get { return wristThrowPenalty_; }
      set {
        wristThrowPenalty_ = value;
      }
    }

    /// <summary>Field number for the "rot_per_sec" field.</summary>
    public const int RotPerSecFieldNumber = 5;
    private double rotPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RotPerSec {
      get { return rotPerSec_; }
      set {
        rotPerSec_ = value;
      }
    }

    /// <summary>Field number for the "pot_speed_from_rot" field.</summary>
    public const int PotSpeedFromRotFieldNumber = 6;
    private double potSpeedFromRot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PotSpeedFromRot {
      get { return potSpeedFromRot_; }
      set {
        potSpeedFromRot_ = value;
      }
    }

    /// <summary>Field number for the "speed_from_arm" field.</summary>
    public const int SpeedFromArmFieldNumber = 7;
    private double speedFromArm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SpeedFromArm {
      get { return speedFromArm_; }
      set {
        speedFromArm_ = value;
      }
    }

    /// <summary>Field number for the "speed_from_movement" field.</summary>
    public const int SpeedFromMovementFieldNumber = 8;
    private double speedFromMovement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SpeedFromMovement {
      get { return speedFromMovement_; }
      set {
        speedFromMovement_ = value;
      }
    }

    /// <summary>Field number for the "speed_from_wrist" field.</summary>
    public const int SpeedFromWristFieldNumber = 9;
    private double speedFromWrist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SpeedFromWrist {
      get { return speedFromWrist_; }
      set {
        speedFromWrist_ = value;
      }
    }

    /// <summary>Field number for the "wrist_align_to_throw_deg" field.</summary>
    public const int WristAlignToThrowDegFieldNumber = 10;
    private double wristAlignToThrowDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WristAlignToThrowDeg {
      get { return wristAlignToThrowDeg_; }
      set {
        wristAlignToThrowDeg_ = value;
      }
    }

    /// <summary>Field number for the "throw_align_to_movement_deg" field.</summary>
    public const int ThrowAlignToMovementDegFieldNumber = 11;
    private double throwAlignToMovementDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ThrowAlignToMovementDeg {
      get { return throwAlignToMovementDeg_; }
      set {
        throwAlignToMovementDeg_ = value;
      }
    }

    /// <summary>Field number for the "off_axis_penalty" field.</summary>
    public const int OffAxisPenaltyFieldNumber = 12;
    private double offAxisPenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OffAxisPenalty {
      get { return offAxisPenalty_; }
      set {
        offAxisPenalty_ = value;
      }
    }

    /// <summary>Field number for the "throw_move_penalty" field.</summary>
    public const int ThrowMovePenaltyFieldNumber = 13;
    private double throwMovePenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ThrowMovePenalty {
      get { return throwMovePenalty_; }
      set {
        throwMovePenalty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LastThrowInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LastThrowInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ArmSpeed, other.ArmSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalSpeed, other.TotalSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OffAxisSpinDeg, other.OffAxisSpinDeg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WristThrowPenalty, other.WristThrowPenalty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotPerSec, other.RotPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PotSpeedFromRot, other.PotSpeedFromRot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpeedFromArm, other.SpeedFromArm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpeedFromMovement, other.SpeedFromMovement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpeedFromWrist, other.SpeedFromWrist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WristAlignToThrowDeg, other.WristAlignToThrowDeg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ThrowAlignToMovementDeg, other.ThrowAlignToMovementDeg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OffAxisPenalty, other.OffAxisPenalty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ThrowMovePenalty, other.ThrowMovePenalty)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ArmSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ArmSpeed);
      if (TotalSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalSpeed);
      if (OffAxisSpinDeg != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OffAxisSpinDeg);
      if (WristThrowPenalty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WristThrowPenalty);
      if (RotPerSec != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotPerSec);
      if (PotSpeedFromRot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PotSpeedFromRot);
      if (SpeedFromArm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpeedFromArm);
      if (SpeedFromMovement != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpeedFromMovement);
      if (SpeedFromWrist != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpeedFromWrist);
      if (WristAlignToThrowDeg != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WristAlignToThrowDeg);
      if (ThrowAlignToMovementDeg != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ThrowAlignToMovementDeg);
      if (OffAxisPenalty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OffAxisPenalty);
      if (ThrowMovePenalty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ThrowMovePenalty);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ArmSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ArmSpeed);
      }
      if (TotalSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalSpeed);
      }
      if (OffAxisSpinDeg != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(OffAxisSpinDeg);
      }
      if (WristThrowPenalty != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(WristThrowPenalty);
      }
      if (RotPerSec != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RotPerSec);
      }
      if (PotSpeedFromRot != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PotSpeedFromRot);
      }
      if (SpeedFromArm != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(SpeedFromArm);
      }
      if (SpeedFromMovement != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SpeedFromMovement);
      }
      if (SpeedFromWrist != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SpeedFromWrist);
      }
      if (WristAlignToThrowDeg != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(WristAlignToThrowDeg);
      }
      if (ThrowAlignToMovementDeg != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(ThrowAlignToMovementDeg);
      }
      if (OffAxisPenalty != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(OffAxisPenalty);
      }
      if (ThrowMovePenalty != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(ThrowMovePenalty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ArmSpeed != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ArmSpeed);
      }
      if (TotalSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalSpeed);
      }
      if (OffAxisSpinDeg != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(OffAxisSpinDeg);
      }
      if (WristThrowPenalty != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(WristThrowPenalty);
      }
      if (RotPerSec != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RotPerSec);
      }
      if (PotSpeedFromRot != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PotSpeedFromRot);
      }
      if (SpeedFromArm != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(SpeedFromArm);
      }
      if (SpeedFromMovement != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SpeedFromMovement);
      }
      if (SpeedFromWrist != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SpeedFromWrist);
      }
      if (WristAlignToThrowDeg != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(WristAlignToThrowDeg);
      }
      if (ThrowAlignToMovementDeg != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(ThrowAlignToMovementDeg);
      }
      if (OffAxisPenalty != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(OffAxisPenalty);
      }
      if (ThrowMovePenalty != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(ThrowMovePenalty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ArmSpeed != 0D) {
        size += 1 + 8;
      }
      if (TotalSpeed != 0D) {
        size += 1 + 8;
      }
      if (OffAxisSpinDeg != 0D) {
        size += 1 + 8;
      }
      if (WristThrowPenalty != 0D) {
        size += 1 + 8;
      }
      if (RotPerSec != 0D) {
        size += 1 + 8;
      }
      if (PotSpeedFromRot != 0D) {
        size += 1 + 8;
      }
      if (SpeedFromArm != 0D) {
        size += 1 + 8;
      }
      if (SpeedFromMovement != 0D) {
        size += 1 + 8;
      }
      if (SpeedFromWrist != 0D) {
        size += 1 + 8;
      }
      if (WristAlignToThrowDeg != 0D) {
        size += 1 + 8;
      }
      if (ThrowAlignToMovementDeg != 0D) {
        size += 1 + 8;
      }
      if (OffAxisPenalty != 0D) {
        size += 1 + 8;
      }
      if (ThrowMovePenalty != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LastThrowInfo other) {
      if (other == null) {
        return;
      }
      if (other.ArmSpeed != 0D) {
        ArmSpeed = other.ArmSpeed;
      }
      if (other.TotalSpeed != 0D) {
        TotalSpeed = other.TotalSpeed;
      }
      if (other.OffAxisSpinDeg != 0D) {
        OffAxisSpinDeg = other.OffAxisSpinDeg;
      }
      if (other.WristThrowPenalty != 0D) {
        WristThrowPenalty = other.WristThrowPenalty;
      }
      if (other.RotPerSec != 0D) {
        RotPerSec = other.RotPerSec;
      }
      if (other.PotSpeedFromRot != 0D) {
        PotSpeedFromRot = other.PotSpeedFromRot;
      }
      if (other.SpeedFromArm != 0D) {
        SpeedFromArm = other.SpeedFromArm;
      }
      if (other.SpeedFromMovement != 0D) {
        SpeedFromMovement = other.SpeedFromMovement;
      }
      if (other.SpeedFromWrist != 0D) {
        SpeedFromWrist = other.SpeedFromWrist;
      }
      if (other.WristAlignToThrowDeg != 0D) {
        WristAlignToThrowDeg = other.WristAlignToThrowDeg;
      }
      if (other.ThrowAlignToMovementDeg != 0D) {
        ThrowAlignToMovementDeg = other.ThrowAlignToMovementDeg;
      }
      if (other.OffAxisPenalty != 0D) {
        OffAxisPenalty = other.OffAxisPenalty;
      }
      if (other.ThrowMovePenalty != 0D) {
        ThrowMovePenalty = other.ThrowMovePenalty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ArmSpeed = input.ReadDouble();
            break;
          }
          case 17: {
            TotalSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            OffAxisSpinDeg = input.ReadDouble();
            break;
          }
          case 33: {
            WristThrowPenalty = input.ReadDouble();
            break;
          }
          case 41: {
            RotPerSec = input.ReadDouble();
            break;
          }
          case 49: {
            PotSpeedFromRot = input.ReadDouble();
            break;
          }
          case 57: {
            SpeedFromArm = input.ReadDouble();
            break;
          }
          case 65: {
            SpeedFromMovement = input.ReadDouble();
            break;
          }
          case 73: {
            SpeedFromWrist = input.ReadDouble();
            break;
          }
          case 81: {
            WristAlignToThrowDeg = input.ReadDouble();
            break;
          }
          case 89: {
            ThrowAlignToMovementDeg = input.ReadDouble();
            break;
          }
          case 97: {
            OffAxisPenalty = input.ReadDouble();
            break;
          }
          case 105: {
            ThrowMovePenalty = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            ArmSpeed = input.ReadDouble();
            break;
          }
          case 17: {
            TotalSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            OffAxisSpinDeg = input.ReadDouble();
            break;
          }
          case 33: {
            WristThrowPenalty = input.ReadDouble();
            break;
          }
          case 41: {
            RotPerSec = input.ReadDouble();
            break;
          }
          case 49: {
            PotSpeedFromRot = input.ReadDouble();
            break;
          }
          case 57: {
            SpeedFromArm = input.ReadDouble();
            break;
          }
          case 65: {
            SpeedFromMovement = input.ReadDouble();
            break;
          }
          case 73: {
            SpeedFromWrist = input.ReadDouble();
            break;
          }
          case 81: {
            WristAlignToThrowDeg = input.ReadDouble();
            break;
          }
          case 89: {
            ThrowAlignToMovementDeg = input.ReadDouble();
            break;
          }
          case 97: {
            OffAxisPenalty = input.ReadDouble();
            break;
          }
          case 105: {
            ThrowMovePenalty = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents the pause state of the game.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PauseState : pb::IMessage<PauseState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PauseState> _parser = new pb::MessageParser<PauseState>(() => new PauseState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PauseState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PauseState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PauseState(PauseState other) : this() {
      pausedState_ = other.pausedState_;
      unpausedTeam_ = other.unpausedTeam_;
      pausedRequestedTeam_ = other.pausedRequestedTeam_;
      unpausedTimer_ = other.unpausedTimer_;
      pausedTimer_ = other.pausedTimer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PauseState Clone() {
      return new PauseState(this);
    }

    /// <summary>Field number for the "paused_state" field.</summary>
    public const int PausedStateFieldNumber = 1;
    private string pausedState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PausedState {
      get { return pausedState_; }
      set {
        pausedState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unpaused_team" field.</summary>
    public const int UnpausedTeamFieldNumber = 2;
    private string unpausedTeam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnpausedTeam {
      get { return unpausedTeam_; }
      set {
        unpausedTeam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paused_requested_team" field.</summary>
    public const int PausedRequestedTeamFieldNumber = 3;
    private string pausedRequestedTeam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PausedRequestedTeam {
      get { return pausedRequestedTeam_; }
      set {
        pausedRequestedTeam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unpaused_timer" field.</summary>
    public const int UnpausedTimerFieldNumber = 4;
    private double unpausedTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UnpausedTimer {
      get { return unpausedTimer_; }
      set {
        unpausedTimer_ = value;
      }
    }

    /// <summary>Field number for the "paused_timer" field.</summary>
    public const int PausedTimerFieldNumber = 5;
    private double pausedTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PausedTimer {
      get { return pausedTimer_; }
      set {
        pausedTimer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PauseState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PauseState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PausedState != other.PausedState) return false;
      if (UnpausedTeam != other.UnpausedTeam) return false;
      if (PausedRequestedTeam != other.PausedRequestedTeam) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnpausedTimer, other.UnpausedTimer)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PausedTimer, other.PausedTimer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PausedState.Length != 0) hash ^= PausedState.GetHashCode();
      if (UnpausedTeam.Length != 0) hash ^= UnpausedTeam.GetHashCode();
      if (PausedRequestedTeam.Length != 0) hash ^= PausedRequestedTeam.GetHashCode();
      if (UnpausedTimer != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnpausedTimer);
      if (PausedTimer != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PausedTimer);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PausedState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PausedState);
      }
      if (UnpausedTeam.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnpausedTeam);
      }
      if (PausedRequestedTeam.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PausedRequestedTeam);
      }
      if (UnpausedTimer != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(UnpausedTimer);
      }
      if (PausedTimer != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PausedTimer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PausedState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PausedState);
      }
      if (UnpausedTeam.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnpausedTeam);
      }
      if (PausedRequestedTeam.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PausedRequestedTeam);
      }
      if (UnpausedTimer != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(UnpausedTimer);
      }
      if (PausedTimer != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PausedTimer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PausedState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PausedState);
      }
      if (UnpausedTeam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnpausedTeam);
      }
      if (PausedRequestedTeam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PausedRequestedTeam);
      }
      if (UnpausedTimer != 0D) {
        size += 1 + 8;
      }
      if (PausedTimer != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PauseState other) {
      if (other == null) {
        return;
      }
      if (other.PausedState.Length != 0) {
        PausedState = other.PausedState;
      }
      if (other.UnpausedTeam.Length != 0) {
        UnpausedTeam = other.UnpausedTeam;
      }
      if (other.PausedRequestedTeam.Length != 0) {
        PausedRequestedTeam = other.PausedRequestedTeam;
      }
      if (other.UnpausedTimer != 0D) {
        UnpausedTimer = other.UnpausedTimer;
      }
      if (other.PausedTimer != 0D) {
        PausedTimer = other.PausedTimer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PausedState = input.ReadString();
            break;
          }
          case 18: {
            UnpausedTeam = input.ReadString();
            break;
          }
          case 26: {
            PausedRequestedTeam = input.ReadString();
            break;
          }
          case 33: {
            UnpausedTimer = input.ReadDouble();
            break;
          }
          case 41: {
            PausedTimer = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PausedState = input.ReadString();
            break;
          }
          case 18: {
            UnpausedTeam = input.ReadString();
            break;
          }
          case 26: {
            PausedRequestedTeam = input.ReadString();
            break;
          }
          case 33: {
            UnpausedTimer = input.ReadDouble();
            break;
          }
          case 41: {
            PausedTimer = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlayerRoot : pb::IMessage<PlayerRoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerRoot> _parser = new pb::MessageParser<PlayerRoot>(() => new PlayerRoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerRoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerRoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerRoot(PlayerRoot other) : this() {
      vrLeft_ = other.vrLeft_.Clone();
      vrPosition_ = other.vrPosition_.Clone();
      vrForward_ = other.vrForward_.Clone();
      vrUp_ = other.vrUp_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerRoot Clone() {
      return new PlayerRoot(this);
    }

    /// <summary>Field number for the "vr_left" field.</summary>
    public const int VrLeftFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_vrLeft_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> vrLeft_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VrLeft {
      get { return vrLeft_; }
    }

    /// <summary>Field number for the "vr_position" field.</summary>
    public const int VrPositionFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_vrPosition_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> vrPosition_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VrPosition {
      get { return vrPosition_; }
    }

    /// <summary>Field number for the "vr_forward" field.</summary>
    public const int VrForwardFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_vrForward_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> vrForward_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VrForward {
      get { return vrForward_; }
    }

    /// <summary>Field number for the "vr_up" field.</summary>
    public const int VrUpFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_vrUp_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> vrUp_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VrUp {
      get { return vrUp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerRoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerRoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vrLeft_.Equals(other.vrLeft_)) return false;
      if(!vrPosition_.Equals(other.vrPosition_)) return false;
      if(!vrForward_.Equals(other.vrForward_)) return false;
      if(!vrUp_.Equals(other.vrUp_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vrLeft_.GetHashCode();
      hash ^= vrPosition_.GetHashCode();
      hash ^= vrForward_.GetHashCode();
      hash ^= vrUp_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      vrLeft_.WriteTo(output, _repeated_vrLeft_codec);
      vrPosition_.WriteTo(output, _repeated_vrPosition_codec);
      vrForward_.WriteTo(output, _repeated_vrForward_codec);
      vrUp_.WriteTo(output, _repeated_vrUp_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      vrLeft_.WriteTo(ref output, _repeated_vrLeft_codec);
      vrPosition_.WriteTo(ref output, _repeated_vrPosition_codec);
      vrForward_.WriteTo(ref output, _repeated_vrForward_codec);
      vrUp_.WriteTo(ref output, _repeated_vrUp_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += vrLeft_.CalculateSize(_repeated_vrLeft_codec);
      size += vrPosition_.CalculateSize(_repeated_vrPosition_codec);
      size += vrForward_.CalculateSize(_repeated_vrForward_codec);
      size += vrUp_.CalculateSize(_repeated_vrUp_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerRoot other) {
      if (other == null) {
        return;
      }
      vrLeft_.Add(other.vrLeft_);
      vrPosition_.Add(other.vrPosition_);
      vrForward_.Add(other.vrForward_);
      vrUp_.Add(other.vrUp_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            vrLeft_.AddEntriesFrom(input, _repeated_vrLeft_codec);
            break;
          }
          case 18:
          case 17: {
            vrPosition_.AddEntriesFrom(input, _repeated_vrPosition_codec);
            break;
          }
          case 26:
          case 25: {
            vrForward_.AddEntriesFrom(input, _repeated_vrForward_codec);
            break;
          }
          case 34:
          case 33: {
            vrUp_.AddEntriesFrom(input, _repeated_vrUp_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            vrLeft_.AddEntriesFrom(ref input, _repeated_vrLeft_codec);
            break;
          }
          case 18:
          case 17: {
            vrPosition_.AddEntriesFrom(ref input, _repeated_vrPosition_codec);
            break;
          }
          case 26:
          case 25: {
            vrForward_.AddEntriesFrom(ref input, _repeated_vrForward_codec);
            break;
          }
          case 34:
          case 33: {
            vrUp_.AddEntriesFrom(ref input, _repeated_vrUp_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Top-level message representing the entire JSON data.
  /// Endpoint: /session
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SessionResponse : pb::IMessage<SessionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SessionResponse> _parser = new pb::MessageParser<SessionResponse>(() => new SessionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionResponse(SessionResponse other) : this() {
      orangeTeamRestartRequest_ = other.orangeTeamRestartRequest_;
      sessionID_ = other.sessionID_;
      gameClockDisplay_ = other.gameClockDisplay_;
      gameStatus_ = other.gameStatus_;
      sessionIP_ = other.sessionIP_;
      matchType_ = other.matchType_;
      mapName_ = other.mapName_;
      disc_ = other.disc_ != null ? other.disc_.Clone() : null;
      blueRoundScore_ = other.blueRoundScore_;
      orangePoints_ = other.orangePoints_;
      privateMatch_ = other.privateMatch_;
      blueTeamRestartRequest_ = other.blueTeamRestartRequest_;
      tournamentMatch_ = other.tournamentMatch_;
      orangeRoundScore_ = other.orangeRoundScore_;
      totalRoundCount_ = other.totalRoundCount_;
      bluePoints_ = other.bluePoints_;
      lastThrow_ = other.lastThrow_ != null ? other.lastThrow_.Clone() : null;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      pause_ = other.pause_ != null ? other.pause_.Clone() : null;
      possession_ = other.possession_.Clone();
      leftShoulderPressed_ = other.leftShoulderPressed_;
      rightShoulderPressed_ = other.rightShoulderPressed_;
      leftShoulderPressed2_ = other.leftShoulderPressed2_;
      rightShoulderPressed2_ = other.rightShoulderPressed2_;
      rulesChangedBy_ = other.rulesChangedBy_;
      rulesChangedAt_ = other.rulesChangedAt_;
      clientName_ = other.clientName_;
      lastScore_ = other.lastScore_ != null ? other.lastScore_.Clone() : null;
      teams_ = other.teams_.Clone();
      contested_ = other.contested_;
      payloadMultiplier_ = other.payloadMultiplier_;
      payloadCheckpoint_ = other.payloadCheckpoint_;
      payloadDistance_ = other.payloadDistance_;
      payloadDefenders_ = other.payloadDefenders_;
      payloadSpeed_ = other.payloadSpeed_;
      gameClock_ = other.gameClock_;
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionResponse Clone() {
      return new SessionResponse(this);
    }

    /// <summary>Field number for the "orange_team_restart_request" field.</summary>
    public const int OrangeTeamRestartRequestFieldNumber = 1;
    private int orangeTeamRestartRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrangeTeamRestartRequest {
      get { return orangeTeamRestartRequest_; }
      set {
        orangeTeamRestartRequest_ = value;
      }
    }

    /// <summary>Field number for the "sessionID" field.</summary>
    public const int SessionIDFieldNumber = 2;
    private string sessionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionID {
      get { return sessionID_; }
      set {
        sessionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_clock_display" field.</summary>
    public const int GameClockDisplayFieldNumber = 3;
    private string gameClockDisplay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameClockDisplay {
      get { return gameClockDisplay_; }
      set {
        gameClockDisplay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_status" field.</summary>
    public const int GameStatusFieldNumber = 4;
    private string gameStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameStatus {
      get { return gameStatus_; }
      set {
        gameStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sessionIP" field.</summary>
    public const int SessionIPFieldNumber = 5;
    private string sessionIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionIP {
      get { return sessionIP_; }
      set {
        sessionIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 6;
    private string matchType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MatchType {
      get { return matchType_; }
      set {
        matchType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 7;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disc" field.</summary>
    public const int DiscFieldNumber = 8;
    private global::Nevr.Protobuf.Disc disc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.Disc Disc {
      get { return disc_; }
      set {
        disc_ = value;
      }
    }

    /// <summary>Field number for the "blue_round_score" field.</summary>
    public const int BlueRoundScoreFieldNumber = 11;
    private int blueRoundScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlueRoundScore {
      get { return blueRoundScore_; }
      set {
        blueRoundScore_ = value;
      }
    }

    /// <summary>Field number for the "orange_points" field.</summary>
    public const int OrangePointsFieldNumber = 12;
    private int orangePoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrangePoints {
      get { return orangePoints_; }
      set {
        orangePoints_ = value;
      }
    }

    /// <summary>Field number for the "private_match" field.</summary>
    public const int PrivateMatchFieldNumber = 14;
    private bool privateMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PrivateMatch {
      get { return privateMatch_; }
      set {
        privateMatch_ = value;
      }
    }

    /// <summary>Field number for the "blue_team_restart_request" field.</summary>
    public const int BlueTeamRestartRequestFieldNumber = 15;
    private int blueTeamRestartRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlueTeamRestartRequest {
      get { return blueTeamRestartRequest_; }
      set {
        blueTeamRestartRequest_ = value;
      }
    }

    /// <summary>Field number for the "tournament_match" field.</summary>
    public const int TournamentMatchFieldNumber = 16;
    private bool tournamentMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TournamentMatch {
      get { return tournamentMatch_; }
      set {
        tournamentMatch_ = value;
      }
    }

    /// <summary>Field number for the "orange_round_score" field.</summary>
    public const int OrangeRoundScoreFieldNumber = 17;
    private int orangeRoundScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrangeRoundScore {
      get { return orangeRoundScore_; }
      set {
        orangeRoundScore_ = value;
      }
    }

    /// <summary>Field number for the "total_round_count" field.</summary>
    public const int TotalRoundCountFieldNumber = 18;
    private int totalRoundCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalRoundCount {
      get { return totalRoundCount_; }
      set {
        totalRoundCount_ = value;
      }
    }

    /// <summary>Field number for the "blue_points" field.</summary>
    public const int BluePointsFieldNumber = 19;
    private int bluePoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BluePoints {
      get { return bluePoints_; }
      set {
        bluePoints_ = value;
      }
    }

    /// <summary>Field number for the "last_throw" field.</summary>
    public const int LastThrowFieldNumber = 20;
    private global::Nevr.Protobuf.LastThrowInfo lastThrow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.LastThrowInfo LastThrow {
      get { return lastThrow_; }
      set {
        lastThrow_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 21;
    private global::Nevr.Protobuf.PlayerRoot player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.PlayerRoot Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "pause" field.</summary>
    public const int PauseFieldNumber = 22;
    private global::Nevr.Protobuf.PauseState pause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.PauseState Pause {
      get { return pause_; }
      set {
        pause_ = value;
      }
    }

    /// <summary>Field number for the "possession" field.</summary>
    public const int PossessionFieldNumber = 23;
    private static readonly pb::FieldCodec<int> _repeated_possession_codec
        = pb::FieldCodec.ForInt32(186);
    private readonly pbc::RepeatedField<int> possession_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Possession {
      get { return possession_; }
    }

    /// <summary>Field number for the "left_shoulder_pressed" field.</summary>
    public const int LeftShoulderPressedFieldNumber = 24;
    private double leftShoulderPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LeftShoulderPressed {
      get { return leftShoulderPressed_; }
      set {
        leftShoulderPressed_ = value;
      }
    }

    /// <summary>Field number for the "right_shoulder_pressed" field.</summary>
    public const int RightShoulderPressedFieldNumber = 25;
    private double rightShoulderPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RightShoulderPressed {
      get { return rightShoulderPressed_; }
      set {
        rightShoulderPressed_ = value;
      }
    }

    /// <summary>Field number for the "left_shoulder_pressed2" field.</summary>
    public const int LeftShoulderPressed2FieldNumber = 26;
    private double leftShoulderPressed2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LeftShoulderPressed2 {
      get { return leftShoulderPressed2_; }
      set {
        leftShoulderPressed2_ = value;
      }
    }

    /// <summary>Field number for the "right_shoulder_pressed2" field.</summary>
    public const int RightShoulderPressed2FieldNumber = 27;
    private double rightShoulderPressed2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RightShoulderPressed2 {
      get { return rightShoulderPressed2_; }
      set {
        rightShoulderPressed2_ = value;
      }
    }

    /// <summary>Field number for the "rules_changed_by" field.</summary>
    public const int RulesChangedByFieldNumber = 28;
    private string rulesChangedBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RulesChangedBy {
      get { return rulesChangedBy_; }
      set {
        rulesChangedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rules_changed_at" field.</summary>
    public const int RulesChangedAtFieldNumber = 29;
    private ulong rulesChangedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RulesChangedAt {
      get { return rulesChangedAt_; }
      set {
        rulesChangedAt_ = value;
      }
    }

    /// <summary>Field number for the "client_name" field.</summary>
    public const int ClientNameFieldNumber = 30;
    private string clientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_score" field.</summary>
    public const int LastScoreFieldNumber = 31;
    private global::Nevr.Protobuf.LastScore lastScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.LastScore LastScore {
      get { return lastScore_; }
      set {
        lastScore_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 32;
    private static readonly pb::FieldCodec<global::Nevr.Protobuf.Team> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(258, global::Nevr.Protobuf.Team.Parser);
    private readonly pbc::RepeatedField<global::Nevr.Protobuf.Team> teams_ = new pbc::RepeatedField<global::Nevr.Protobuf.Team>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Nevr.Protobuf.Team> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "contested" field.</summary>
    public const int ContestedFieldNumber = 33;
    private bool contested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Contested {
      get { return contested_; }
      set {
        contested_ = value;
      }
    }

    /// <summary>Field number for the "payload_multiplier" field.</summary>
    public const int PayloadMultiplierFieldNumber = 34;
    private double payloadMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PayloadMultiplier {
      get { return payloadMultiplier_; }
      set {
        payloadMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "payload_checkpoint" field.</summary>
    public const int PayloadCheckpointFieldNumber = 35;
    private int payloadCheckpoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PayloadCheckpoint {
      get { return payloadCheckpoint_; }
      set {
        payloadCheckpoint_ = value;
      }
    }

    /// <summary>Field number for the "payload_distance" field.</summary>
    public const int PayloadDistanceFieldNumber = 36;
    private double payloadDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PayloadDistance {
      get { return payloadDistance_; }
      set {
        payloadDistance_ = value;
      }
    }

    /// <summary>Field number for the "payload_defenders" field.</summary>
    public const int PayloadDefendersFieldNumber = 37;
    private int payloadDefenders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PayloadDefenders {
      get { return payloadDefenders_; }
      set {
        payloadDefenders_ = value;
      }
    }

    /// <summary>Field number for the "payload_speed" field.</summary>
    public const int PayloadSpeedFieldNumber = 38;
    private double payloadSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PayloadSpeed {
      get { return payloadSpeed_; }
      set {
        payloadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "game_clock" field.</summary>
    public const int GameClockFieldNumber = 39;
    private double gameClock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GameClock {
      get { return gameClock_; }
      set {
        gameClock_ = value;
      }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 40;
    private int errCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrangeTeamRestartRequest != other.OrangeTeamRestartRequest) return false;
      if (SessionID != other.SessionID) return false;
      if (GameClockDisplay != other.GameClockDisplay) return false;
      if (GameStatus != other.GameStatus) return false;
      if (SessionIP != other.SessionIP) return false;
      if (MatchType != other.MatchType) return false;
      if (MapName != other.MapName) return false;
      if (!object.Equals(Disc, other.Disc)) return false;
      if (BlueRoundScore != other.BlueRoundScore) return false;
      if (OrangePoints != other.OrangePoints) return false;
      if (PrivateMatch != other.PrivateMatch) return false;
      if (BlueTeamRestartRequest != other.BlueTeamRestartRequest) return false;
      if (TournamentMatch != other.TournamentMatch) return false;
      if (OrangeRoundScore != other.OrangeRoundScore) return false;
      if (TotalRoundCount != other.TotalRoundCount) return false;
      if (BluePoints != other.BluePoints) return false;
      if (!object.Equals(LastThrow, other.LastThrow)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Pause, other.Pause)) return false;
      if(!possession_.Equals(other.possession_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeftShoulderPressed, other.LeftShoulderPressed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RightShoulderPressed, other.RightShoulderPressed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeftShoulderPressed2, other.LeftShoulderPressed2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RightShoulderPressed2, other.RightShoulderPressed2)) return false;
      if (RulesChangedBy != other.RulesChangedBy) return false;
      if (RulesChangedAt != other.RulesChangedAt) return false;
      if (ClientName != other.ClientName) return false;
      if (!object.Equals(LastScore, other.LastScore)) return false;
      if(!teams_.Equals(other.teams_)) return false;
      if (Contested != other.Contested) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PayloadMultiplier, other.PayloadMultiplier)) return false;
      if (PayloadCheckpoint != other.PayloadCheckpoint) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PayloadDistance, other.PayloadDistance)) return false;
      if (PayloadDefenders != other.PayloadDefenders) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PayloadSpeed, other.PayloadSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GameClock, other.GameClock)) return false;
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (OrangeTeamRestartRequest != 0) hash ^= OrangeTeamRestartRequest.GetHashCode();
      if (SessionID.Length != 0) hash ^= SessionID.GetHashCode();
      if (GameClockDisplay.Length != 0) hash ^= GameClockDisplay.GetHashCode();
      if (GameStatus.Length != 0) hash ^= GameStatus.GetHashCode();
      if (SessionIP.Length != 0) hash ^= SessionIP.GetHashCode();
      if (MatchType.Length != 0) hash ^= MatchType.GetHashCode();
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (disc_ != null) hash ^= Disc.GetHashCode();
      if (BlueRoundScore != 0) hash ^= BlueRoundScore.GetHashCode();
      if (OrangePoints != 0) hash ^= OrangePoints.GetHashCode();
      if (PrivateMatch != false) hash ^= PrivateMatch.GetHashCode();
      if (BlueTeamRestartRequest != 0) hash ^= BlueTeamRestartRequest.GetHashCode();
      if (TournamentMatch != false) hash ^= TournamentMatch.GetHashCode();
      if (OrangeRoundScore != 0) hash ^= OrangeRoundScore.GetHashCode();
      if (TotalRoundCount != 0) hash ^= TotalRoundCount.GetHashCode();
      if (BluePoints != 0) hash ^= BluePoints.GetHashCode();
      if (lastThrow_ != null) hash ^= LastThrow.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (pause_ != null) hash ^= Pause.GetHashCode();
      hash ^= possession_.GetHashCode();
      if (LeftShoulderPressed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeftShoulderPressed);
      if (RightShoulderPressed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RightShoulderPressed);
      if (LeftShoulderPressed2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeftShoulderPressed2);
      if (RightShoulderPressed2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RightShoulderPressed2);
      if (RulesChangedBy.Length != 0) hash ^= RulesChangedBy.GetHashCode();
      if (RulesChangedAt != 0UL) hash ^= RulesChangedAt.GetHashCode();
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (lastScore_ != null) hash ^= LastScore.GetHashCode();
      hash ^= teams_.GetHashCode();
      if (Contested != false) hash ^= Contested.GetHashCode();
      if (PayloadMultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PayloadMultiplier);
      if (PayloadCheckpoint != 0) hash ^= PayloadCheckpoint.GetHashCode();
      if (PayloadDistance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PayloadDistance);
      if (PayloadDefenders != 0) hash ^= PayloadDefenders.GetHashCode();
      if (PayloadSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PayloadSpeed);
      if (GameClock != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GameClock);
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrangeTeamRestartRequest != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrangeTeamRestartRequest);
      }
      if (SessionID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionID);
      }
      if (GameClockDisplay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameClockDisplay);
      }
      if (GameStatus.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameStatus);
      }
      if (SessionIP.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SessionIP);
      }
      if (MatchType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MatchType);
      }
      if (MapName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MapName);
      }
      if (disc_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Disc);
      }
      if (BlueRoundScore != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BlueRoundScore);
      }
      if (OrangePoints != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OrangePoints);
      }
      if (PrivateMatch != false) {
        output.WriteRawTag(112);
        output.WriteBool(PrivateMatch);
      }
      if (BlueTeamRestartRequest != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BlueTeamRestartRequest);
      }
      if (TournamentMatch != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(TournamentMatch);
      }
      if (OrangeRoundScore != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(OrangeRoundScore);
      }
      if (TotalRoundCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TotalRoundCount);
      }
      if (BluePoints != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BluePoints);
      }
      if (lastThrow_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LastThrow);
      }
      if (player_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Player);
      }
      if (pause_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Pause);
      }
      possession_.WriteTo(output, _repeated_possession_codec);
      if (LeftShoulderPressed != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(LeftShoulderPressed);
      }
      if (RightShoulderPressed != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(RightShoulderPressed);
      }
      if (LeftShoulderPressed2 != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(LeftShoulderPressed2);
      }
      if (RightShoulderPressed2 != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(RightShoulderPressed2);
      }
      if (RulesChangedBy.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(RulesChangedBy);
      }
      if (RulesChangedAt != 0UL) {
        output.WriteRawTag(232, 1);
        output.WriteUInt64(RulesChangedAt);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(ClientName);
      }
      if (lastScore_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(LastScore);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
      if (Contested != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Contested);
      }
      if (PayloadMultiplier != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(PayloadMultiplier);
      }
      if (PayloadCheckpoint != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(PayloadCheckpoint);
      }
      if (PayloadDistance != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(PayloadDistance);
      }
      if (PayloadDefenders != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(PayloadDefenders);
      }
      if (PayloadSpeed != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(PayloadSpeed);
      }
      if (GameClock != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(GameClock);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrangeTeamRestartRequest != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrangeTeamRestartRequest);
      }
      if (SessionID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionID);
      }
      if (GameClockDisplay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameClockDisplay);
      }
      if (GameStatus.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameStatus);
      }
      if (SessionIP.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SessionIP);
      }
      if (MatchType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MatchType);
      }
      if (MapName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MapName);
      }
      if (disc_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Disc);
      }
      if (BlueRoundScore != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BlueRoundScore);
      }
      if (OrangePoints != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OrangePoints);
      }
      if (PrivateMatch != false) {
        output.WriteRawTag(112);
        output.WriteBool(PrivateMatch);
      }
      if (BlueTeamRestartRequest != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BlueTeamRestartRequest);
      }
      if (TournamentMatch != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(TournamentMatch);
      }
      if (OrangeRoundScore != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(OrangeRoundScore);
      }
      if (TotalRoundCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TotalRoundCount);
      }
      if (BluePoints != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BluePoints);
      }
      if (lastThrow_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LastThrow);
      }
      if (player_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Player);
      }
      if (pause_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Pause);
      }
      possession_.WriteTo(ref output, _repeated_possession_codec);
      if (LeftShoulderPressed != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(LeftShoulderPressed);
      }
      if (RightShoulderPressed != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(RightShoulderPressed);
      }
      if (LeftShoulderPressed2 != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(LeftShoulderPressed2);
      }
      if (RightShoulderPressed2 != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(RightShoulderPressed2);
      }
      if (RulesChangedBy.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(RulesChangedBy);
      }
      if (RulesChangedAt != 0UL) {
        output.WriteRawTag(232, 1);
        output.WriteUInt64(RulesChangedAt);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(ClientName);
      }
      if (lastScore_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(LastScore);
      }
      teams_.WriteTo(ref output, _repeated_teams_codec);
      if (Contested != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Contested);
      }
      if (PayloadMultiplier != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(PayloadMultiplier);
      }
      if (PayloadCheckpoint != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(PayloadCheckpoint);
      }
      if (PayloadDistance != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(PayloadDistance);
      }
      if (PayloadDefenders != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(PayloadDefenders);
      }
      if (PayloadSpeed != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(PayloadSpeed);
      }
      if (GameClock != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(GameClock);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (OrangeTeamRestartRequest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrangeTeamRestartRequest);
      }
      if (SessionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionID);
      }
      if (GameClockDisplay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameClockDisplay);
      }
      if (GameStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameStatus);
      }
      if (SessionIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionIP);
      }
      if (MatchType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchType);
      }
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (disc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disc);
      }
      if (BlueRoundScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlueRoundScore);
      }
      if (OrangePoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrangePoints);
      }
      if (PrivateMatch != false) {
        size += 1 + 1;
      }
      if (BlueTeamRestartRequest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlueTeamRestartRequest);
      }
      if (TournamentMatch != false) {
        size += 2 + 1;
      }
      if (OrangeRoundScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrangeRoundScore);
      }
      if (TotalRoundCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalRoundCount);
      }
      if (BluePoints != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BluePoints);
      }
      if (lastThrow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastThrow);
      }
      if (player_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (pause_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pause);
      }
      size += possession_.CalculateSize(_repeated_possession_codec);
      if (LeftShoulderPressed != 0D) {
        size += 2 + 8;
      }
      if (RightShoulderPressed != 0D) {
        size += 2 + 8;
      }
      if (LeftShoulderPressed2 != 0D) {
        size += 2 + 8;
      }
      if (RightShoulderPressed2 != 0D) {
        size += 2 + 8;
      }
      if (RulesChangedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RulesChangedBy);
      }
      if (RulesChangedAt != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RulesChangedAt);
      }
      if (ClientName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (lastScore_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastScore);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      if (Contested != false) {
        size += 2 + 1;
      }
      if (PayloadMultiplier != 0D) {
        size += 2 + 8;
      }
      if (PayloadCheckpoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PayloadCheckpoint);
      }
      if (PayloadDistance != 0D) {
        size += 2 + 8;
      }
      if (PayloadDefenders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PayloadDefenders);
      }
      if (PayloadSpeed != 0D) {
        size += 2 + 8;
      }
      if (GameClock != 0D) {
        size += 2 + 8;
      }
      if (ErrCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SessionResponse other) {
      if (other == null) {
        return;
      }
      if (other.OrangeTeamRestartRequest != 0) {
        OrangeTeamRestartRequest = other.OrangeTeamRestartRequest;
      }
      if (other.SessionID.Length != 0) {
        SessionID = other.SessionID;
      }
      if (other.GameClockDisplay.Length != 0) {
        GameClockDisplay = other.GameClockDisplay;
      }
      if (other.GameStatus.Length != 0) {
        GameStatus = other.GameStatus;
      }
      if (other.SessionIP.Length != 0) {
        SessionIP = other.SessionIP;
      }
      if (other.MatchType.Length != 0) {
        MatchType = other.MatchType;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.disc_ != null) {
        if (disc_ == null) {
          Disc = new global::Nevr.Protobuf.Disc();
        }
        Disc.MergeFrom(other.Disc);
      }
      if (other.BlueRoundScore != 0) {
        BlueRoundScore = other.BlueRoundScore;
      }
      if (other.OrangePoints != 0) {
        OrangePoints = other.OrangePoints;
      }
      if (other.PrivateMatch != false) {
        PrivateMatch = other.PrivateMatch;
      }
      if (other.BlueTeamRestartRequest != 0) {
        BlueTeamRestartRequest = other.BlueTeamRestartRequest;
      }
      if (other.TournamentMatch != false) {
        TournamentMatch = other.TournamentMatch;
      }
      if (other.OrangeRoundScore != 0) {
        OrangeRoundScore = other.OrangeRoundScore;
      }
      if (other.TotalRoundCount != 0) {
        TotalRoundCount = other.TotalRoundCount;
      }
      if (other.BluePoints != 0) {
        BluePoints = other.BluePoints;
      }
      if (other.lastThrow_ != null) {
        if (lastThrow_ == null) {
          LastThrow = new global::Nevr.Protobuf.LastThrowInfo();
        }
        LastThrow.MergeFrom(other.LastThrow);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Nevr.Protobuf.PlayerRoot();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.pause_ != null) {
        if (pause_ == null) {
          Pause = new global::Nevr.Protobuf.PauseState();
        }
        Pause.MergeFrom(other.Pause);
      }
      possession_.Add(other.possession_);
      if (other.LeftShoulderPressed != 0D) {
        LeftShoulderPressed = other.LeftShoulderPressed;
      }
      if (other.RightShoulderPressed != 0D) {
        RightShoulderPressed = other.RightShoulderPressed;
      }
      if (other.LeftShoulderPressed2 != 0D) {
        LeftShoulderPressed2 = other.LeftShoulderPressed2;
      }
      if (other.RightShoulderPressed2 != 0D) {
        RightShoulderPressed2 = other.RightShoulderPressed2;
      }
      if (other.RulesChangedBy.Length != 0) {
        RulesChangedBy = other.RulesChangedBy;
      }
      if (other.RulesChangedAt != 0UL) {
        RulesChangedAt = other.RulesChangedAt;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      if (other.lastScore_ != null) {
        if (lastScore_ == null) {
          LastScore = new global::Nevr.Protobuf.LastScore();
        }
        LastScore.MergeFrom(other.LastScore);
      }
      teams_.Add(other.teams_);
      if (other.Contested != false) {
        Contested = other.Contested;
      }
      if (other.PayloadMultiplier != 0D) {
        PayloadMultiplier = other.PayloadMultiplier;
      }
      if (other.PayloadCheckpoint != 0) {
        PayloadCheckpoint = other.PayloadCheckpoint;
      }
      if (other.PayloadDistance != 0D) {
        PayloadDistance = other.PayloadDistance;
      }
      if (other.PayloadDefenders != 0) {
        PayloadDefenders = other.PayloadDefenders;
      }
      if (other.PayloadSpeed != 0D) {
        PayloadSpeed = other.PayloadSpeed;
      }
      if (other.GameClock != 0D) {
        GameClock = other.GameClock;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrangeTeamRestartRequest = input.ReadInt32();
            break;
          }
          case 18: {
            SessionID = input.ReadString();
            break;
          }
          case 26: {
            GameClockDisplay = input.ReadString();
            break;
          }
          case 34: {
            GameStatus = input.ReadString();
            break;
          }
          case 42: {
            SessionIP = input.ReadString();
            break;
          }
          case 50: {
            MatchType = input.ReadString();
            break;
          }
          case 58: {
            MapName = input.ReadString();
            break;
          }
          case 66: {
            if (disc_ == null) {
              Disc = new global::Nevr.Protobuf.Disc();
            }
            input.ReadMessage(Disc);
            break;
          }
          case 88: {
            BlueRoundScore = input.ReadInt32();
            break;
          }
          case 96: {
            OrangePoints = input.ReadInt32();
            break;
          }
          case 112: {
            PrivateMatch = input.ReadBool();
            break;
          }
          case 120: {
            BlueTeamRestartRequest = input.ReadInt32();
            break;
          }
          case 128: {
            TournamentMatch = input.ReadBool();
            break;
          }
          case 136: {
            OrangeRoundScore = input.ReadInt32();
            break;
          }
          case 144: {
            TotalRoundCount = input.ReadInt32();
            break;
          }
          case 152: {
            BluePoints = input.ReadInt32();
            break;
          }
          case 162: {
            if (lastThrow_ == null) {
              LastThrow = new global::Nevr.Protobuf.LastThrowInfo();
            }
            input.ReadMessage(LastThrow);
            break;
          }
          case 170: {
            if (player_ == null) {
              Player = new global::Nevr.Protobuf.PlayerRoot();
            }
            input.ReadMessage(Player);
            break;
          }
          case 178: {
            if (pause_ == null) {
              Pause = new global::Nevr.Protobuf.PauseState();
            }
            input.ReadMessage(Pause);
            break;
          }
          case 186:
          case 184: {
            possession_.AddEntriesFrom(input, _repeated_possession_codec);
            break;
          }
          case 193: {
            LeftShoulderPressed = input.ReadDouble();
            break;
          }
          case 201: {
            RightShoulderPressed = input.ReadDouble();
            break;
          }
          case 209: {
            LeftShoulderPressed2 = input.ReadDouble();
            break;
          }
          case 217: {
            RightShoulderPressed2 = input.ReadDouble();
            break;
          }
          case 226: {
            RulesChangedBy = input.ReadString();
            break;
          }
          case 232: {
            RulesChangedAt = input.ReadUInt64();
            break;
          }
          case 242: {
            ClientName = input.ReadString();
            break;
          }
          case 250: {
            if (lastScore_ == null) {
              LastScore = new global::Nevr.Protobuf.LastScore();
            }
            input.ReadMessage(LastScore);
            break;
          }
          case 258: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 264: {
            Contested = input.ReadBool();
            break;
          }
          case 273: {
            PayloadMultiplier = input.ReadDouble();
            break;
          }
          case 280: {
            PayloadCheckpoint = input.ReadInt32();
            break;
          }
          case 289: {
            PayloadDistance = input.ReadDouble();
            break;
          }
          case 296: {
            PayloadDefenders = input.ReadInt32();
            break;
          }
          case 305: {
            PayloadSpeed = input.ReadDouble();
            break;
          }
          case 313: {
            GameClock = input.ReadDouble();
            break;
          }
          case 320: {
            ErrCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrangeTeamRestartRequest = input.ReadInt32();
            break;
          }
          case 18: {
            SessionID = input.ReadString();
            break;
          }
          case 26: {
            GameClockDisplay = input.ReadString();
            break;
          }
          case 34: {
            GameStatus = input.ReadString();
            break;
          }
          case 42: {
            SessionIP = input.ReadString();
            break;
          }
          case 50: {
            MatchType = input.ReadString();
            break;
          }
          case 58: {
            MapName = input.ReadString();
            break;
          }
          case 66: {
            if (disc_ == null) {
              Disc = new global::Nevr.Protobuf.Disc();
            }
            input.ReadMessage(Disc);
            break;
          }
          case 88: {
            BlueRoundScore = input.ReadInt32();
            break;
          }
          case 96: {
            OrangePoints = input.ReadInt32();
            break;
          }
          case 112: {
            PrivateMatch = input.ReadBool();
            break;
          }
          case 120: {
            BlueTeamRestartRequest = input.ReadInt32();
            break;
          }
          case 128: {
            TournamentMatch = input.ReadBool();
            break;
          }
          case 136: {
            OrangeRoundScore = input.ReadInt32();
            break;
          }
          case 144: {
            TotalRoundCount = input.ReadInt32();
            break;
          }
          case 152: {
            BluePoints = input.ReadInt32();
            break;
          }
          case 162: {
            if (lastThrow_ == null) {
              LastThrow = new global::Nevr.Protobuf.LastThrowInfo();
            }
            input.ReadMessage(LastThrow);
            break;
          }
          case 170: {
            if (player_ == null) {
              Player = new global::Nevr.Protobuf.PlayerRoot();
            }
            input.ReadMessage(Player);
            break;
          }
          case 178: {
            if (pause_ == null) {
              Pause = new global::Nevr.Protobuf.PauseState();
            }
            input.ReadMessage(Pause);
            break;
          }
          case 186:
          case 184: {
            possession_.AddEntriesFrom(ref input, _repeated_possession_codec);
            break;
          }
          case 193: {
            LeftShoulderPressed = input.ReadDouble();
            break;
          }
          case 201: {
            RightShoulderPressed = input.ReadDouble();
            break;
          }
          case 209: {
            LeftShoulderPressed2 = input.ReadDouble();
            break;
          }
          case 217: {
            RightShoulderPressed2 = input.ReadDouble();
            break;
          }
          case 226: {
            RulesChangedBy = input.ReadString();
            break;
          }
          case 232: {
            RulesChangedAt = input.ReadUInt64();
            break;
          }
          case 242: {
            ClientName = input.ReadString();
            break;
          }
          case 250: {
            if (lastScore_ == null) {
              LastScore = new global::Nevr.Protobuf.LastScore();
            }
            input.ReadMessage(LastScore);
            break;
          }
          case 258: {
            teams_.AddEntriesFrom(ref input, _repeated_teams_codec);
            break;
          }
          case 264: {
            Contested = input.ReadBool();
            break;
          }
          case 273: {
            PayloadMultiplier = input.ReadDouble();
            break;
          }
          case 280: {
            PayloadCheckpoint = input.ReadInt32();
            break;
          }
          case 289: {
            PayloadDistance = input.ReadDouble();
            break;
          }
          case 296: {
            PayloadDefenders = input.ReadInt32();
            break;
          }
          case 305: {
            PayloadSpeed = input.ReadDouble();
            break;
          }
          case 313: {
            GameClock = input.ReadDouble();
            break;
          }
          case 320: {
            ErrCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a 3D translation vector.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BoneTranslation : pb::IMessage<BoneTranslation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoneTranslation> _parser = new pb::MessageParser<BoneTranslation>(() => new BoneTranslation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoneTranslation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoneTranslation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoneTranslation(BoneTranslation other) : this() {
      v_ = other.v_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoneTranslation Clone() {
      return new BoneTranslation(this);
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_v_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> v_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> V {
      get { return v_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoneTranslation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoneTranslation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!v_.Equals(other.v_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= v_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      v_.WriteTo(output, _repeated_v_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      v_.WriteTo(ref output, _repeated_v_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += v_.CalculateSize(_repeated_v_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoneTranslation other) {
      if (other == null) {
        return;
      }
      v_.Add(other.v_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            v_.AddEntriesFrom(input, _repeated_v_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            v_.AddEntriesFrom(ref input, _repeated_v_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a 4D quaternion for rotation.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BoneOrientation : pb::IMessage<BoneOrientation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoneOrientation> _parser = new pb::MessageParser<BoneOrientation>(() => new BoneOrientation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoneOrientation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoneOrientation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoneOrientation(BoneOrientation other) : this() {
      v_ = other.v_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoneOrientation Clone() {
      return new BoneOrientation(this);
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_v_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> v_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> V {
      get { return v_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoneOrientation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoneOrientation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!v_.Equals(other.v_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= v_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      v_.WriteTo(output, _repeated_v_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      v_.WriteTo(ref output, _repeated_v_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += v_.CalculateSize(_repeated_v_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoneOrientation other) {
      if (other == null) {
        return;
      }
      v_.Add(other.v_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            v_.AddEntriesFrom(input, _repeated_v_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            v_.AddEntriesFrom(ref input, _repeated_v_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents bone data for a single player.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlayerBones : pb::IMessage<PlayerBones>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerBones> _parser = new pb::MessageParser<PlayerBones>(() => new PlayerBones());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerBones> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerBones() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerBones(PlayerBones other) : this() {
      boneT_ = other.boneT_ != null ? other.boneT_.Clone() : null;
      xPID_ = other.xPID_;
      boneO_ = other.boneO_ != null ? other.boneO_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerBones Clone() {
      return new PlayerBones(this);
    }

    /// <summary>Field number for the "bone_t" field.</summary>
    public const int BoneTFieldNumber = 1;
    private global::Nevr.Protobuf.BoneTranslation boneT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.BoneTranslation BoneT {
      get { return boneT_; }
      set {
        boneT_ = value;
      }
    }

    /// <summary>Field number for the "XPID" field.</summary>
    public const int XPIDFieldNumber = 2;
    private int xPID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int XPID {
      get { return xPID_; }
      set {
        xPID_ = value;
      }
    }

    /// <summary>Field number for the "bone_o" field.</summary>
    public const int BoneOFieldNumber = 3;
    private global::Nevr.Protobuf.BoneOrientation boneO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nevr.Protobuf.BoneOrientation BoneO {
      get { return boneO_; }
      set {
        boneO_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerBones);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerBones other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BoneT, other.BoneT)) return false;
      if (XPID != other.XPID) return false;
      if (!object.Equals(BoneO, other.BoneO)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (boneT_ != null) hash ^= BoneT.GetHashCode();
      if (XPID != 0) hash ^= XPID.GetHashCode();
      if (boneO_ != null) hash ^= BoneO.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (boneT_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BoneT);
      }
      if (XPID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(XPID);
      }
      if (boneO_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BoneO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (boneT_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BoneT);
      }
      if (XPID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(XPID);
      }
      if (boneO_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BoneO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (boneT_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoneT);
      }
      if (XPID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XPID);
      }
      if (boneO_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoneO);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerBones other) {
      if (other == null) {
        return;
      }
      if (other.boneT_ != null) {
        if (boneT_ == null) {
          BoneT = new global::Nevr.Protobuf.BoneTranslation();
        }
        BoneT.MergeFrom(other.BoneT);
      }
      if (other.XPID != 0) {
        XPID = other.XPID;
      }
      if (other.boneO_ != null) {
        if (boneO_ == null) {
          BoneO = new global::Nevr.Protobuf.BoneOrientation();
        }
        BoneO.MergeFrom(other.BoneO);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (boneT_ == null) {
              BoneT = new global::Nevr.Protobuf.BoneTranslation();
            }
            input.ReadMessage(BoneT);
            break;
          }
          case 16: {
            XPID = input.ReadInt32();
            break;
          }
          case 26: {
            if (boneO_ == null) {
              BoneO = new global::Nevr.Protobuf.BoneOrientation();
            }
            input.ReadMessage(BoneO);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (boneT_ == null) {
              BoneT = new global::Nevr.Protobuf.BoneTranslation();
            }
            input.ReadMessage(BoneT);
            break;
          }
          case 16: {
            XPID = input.ReadInt32();
            break;
          }
          case 26: {
            if (boneO_ == null) {
              BoneO = new global::Nevr.Protobuf.BoneOrientation();
            }
            input.ReadMessage(BoneO);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Top-level message representing the user_bones API response.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UserBonesResponse : pb::IMessage<UserBonesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserBonesResponse> _parser = new pb::MessageParser<UserBonesResponse>(() => new UserBonesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserBonesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nevr.Protobuf.NevrGameapiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserBonesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserBonesResponse(UserBonesResponse other) : this() {
      userBones_ = other.userBones_.Clone();
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserBonesResponse Clone() {
      return new UserBonesResponse(this);
    }

    /// <summary>Field number for the "user_bones" field.</summary>
    public const int UserBonesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nevr.Protobuf.PlayerBones> _repeated_userBones_codec
        = pb::FieldCodec.ForMessage(10, global::Nevr.Protobuf.PlayerBones.Parser);
    private readonly pbc::RepeatedField<global::Nevr.Protobuf.PlayerBones> userBones_ = new pbc::RepeatedField<global::Nevr.Protobuf.PlayerBones>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Nevr.Protobuf.PlayerBones> UserBones {
      get { return userBones_; }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private int errCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserBonesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserBonesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userBones_.Equals(other.userBones_)) return false;
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userBones_.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      userBones_.WriteTo(output, _repeated_userBones_codec);
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      userBones_.WriteTo(ref output, _repeated_userBones_codec);
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += userBones_.CalculateSize(_repeated_userBones_codec);
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserBonesResponse other) {
      if (other == null) {
        return;
      }
      userBones_.Add(other.userBones_);
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userBones_.AddEntriesFrom(input, _repeated_userBones_codec);
            break;
          }
          case 16: {
            ErrCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            userBones_.AddEntriesFrom(ref input, _repeated_userBones_codec);
            break;
          }
          case 16: {
            ErrCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
